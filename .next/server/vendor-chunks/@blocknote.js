"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@blocknote";
exports.ids = ["vendor-chunks/@blocknote"];
exports.modules = {

/***/ "(ssr)/./node_modules/@blocknote/core/dist/style.css":
/*!*****************************************************!*\
  !*** ./node_modules/@blocknote/core/dist/style.css ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"2370f620b6c5\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGJsb2Nrbm90ZS9jb3JlL2Rpc3Qvc3R5bGUuY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjhfbm90aW9uLWNsb25lLy4vbm9kZV9tb2R1bGVzL0BibG9ja25vdGUvY29yZS9kaXN0L3N0eWxlLmNzcz9lZDY0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiMjM3MGY2MjBiNmM1XCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@blocknote/core/dist/style.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/@blocknote/core/dist/blocknote.js":
/*!********************************************************!*\
  !*** ./node_modules/@blocknote/core/dist/blocknote.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlockNoteEditor: () => (/* binding */ _n),\n/* harmony export */   CustomBlockSerializerExtension: () => (/* binding */ Xe),\n/* harmony export */   FormattingToolbarProsemirrorPlugin: () => (/* binding */ zo),\n/* harmony export */   FormattingToolbarView: () => (/* binding */ Oo),\n/* harmony export */   HyperlinkToolbarProsemirrorPlugin: () => (/* binding */ Fo),\n/* harmony export */   ImageToolbarProsemirrorPlugin: () => (/* binding */ Lo),\n/* harmony export */   ImageToolbarView: () => (/* binding */ Ho),\n/* harmony export */   SideMenuProsemirrorPlugin: () => (/* binding */ Ko),\n/* harmony export */   SideMenuView: () => (/* binding */ qo),\n/* harmony export */   SlashMenuProsemirrorPlugin: () => (/* binding */ Ze),\n/* harmony export */   UnreachableCaseError: () => (/* binding */ De),\n/* harmony export */   blockStyles: () => (/* binding */ In),\n/* harmony export */   camelToDataKebab: () => (/* binding */ ct),\n/* harmony export */   createBlockSpec: () => (/* binding */ ko),\n/* harmony export */   createTipTapBlock: () => (/* binding */ W),\n/* harmony export */   defaultBlockSchema: () => (/* binding */ qt),\n/* harmony export */   defaultProps: () => (/* binding */ T),\n/* harmony export */   formatKeyboardShortcut: () => (/* binding */ xn),\n/* harmony export */   formattingToolbarPluginKey: () => (/* binding */ Ro),\n/* harmony export */   getBlockNoteExtensions: () => (/* binding */ io),\n/* harmony export */   getDefaultSlashMenuItems: () => (/* binding */ Yo),\n/* harmony export */   hyperlinkToolbarPluginKey: () => (/* binding */ Uo),\n/* harmony export */   imageToolbarPluginKey: () => (/* binding */ U),\n/* harmony export */   isAppleOS: () => (/* binding */ Pe),\n/* harmony export */   mergeCSSClasses: () => (/* binding */ B),\n/* harmony export */   parse: () => (/* binding */ fo),\n/* harmony export */   propsToAttributes: () => (/* binding */ mo),\n/* harmony export */   render: () => (/* binding */ go),\n/* harmony export */   setupSuggestionsMenu: () => (/* binding */ Je),\n/* harmony export */   sideMenuPluginKey: () => (/* binding */ Xo),\n/* harmony export */   slashMenuPluginKey: () => (/* binding */ et),\n/* harmony export */   uploadToTmpFilesDotOrg_DEV_ONLY: () => (/* binding */ An)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_extension_bold__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/extension-bold */ \"(ssr)/./node_modules/@tiptap/extension-bold/dist/index.js\");\n/* harmony import */ var _tiptap_extension_code__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/extension-code */ \"(ssr)/./node_modules/@tiptap/extension-code/dist/index.js\");\n/* harmony import */ var _tiptap_extension_collaboration__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/extension-collaboration */ \"(ssr)/./node_modules/@tiptap/extension-collaboration/dist/index.js\");\n/* harmony import */ var _tiptap_extension_collaboration_cursor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tiptap/extension-collaboration-cursor */ \"(ssr)/./node_modules/@tiptap/extension-collaboration-cursor/dist/index.js\");\n/* harmony import */ var _tiptap_extension_dropcursor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tiptap/extension-dropcursor */ \"(ssr)/./node_modules/@tiptap/extension-dropcursor/dist/index.js\");\n/* harmony import */ var _tiptap_extension_gapcursor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tiptap/extension-gapcursor */ \"(ssr)/./node_modules/@tiptap/extension-gapcursor/dist/index.js\");\n/* harmony import */ var _tiptap_extension_hard_break__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tiptap/extension-hard-break */ \"(ssr)/./node_modules/@tiptap/extension-hard-break/dist/index.js\");\n/* harmony import */ var _tiptap_extension_history__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tiptap/extension-history */ \"(ssr)/./node_modules/@tiptap/extension-history/dist/index.js\");\n/* harmony import */ var _tiptap_extension_italic__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @tiptap/extension-italic */ \"(ssr)/./node_modules/@tiptap/extension-italic/dist/index.js\");\n/* harmony import */ var _tiptap_extension_link__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tiptap/extension-link */ \"(ssr)/./node_modules/@tiptap/extension-link/dist/index.js\");\n/* harmony import */ var _tiptap_extension_strike__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @tiptap/extension-strike */ \"(ssr)/./node_modules/@tiptap/extension-strike/dist/index.js\");\n/* harmony import */ var _tiptap_extension_text__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @tiptap/extension-text */ \"(ssr)/./node_modules/@tiptap/extension-text/dist/index.js\");\n/* harmony import */ var _tiptap_extension_underline__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @tiptap/extension-underline */ \"(ssr)/./node_modules/@tiptap/extension-underline/dist/index.js\");\n/* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! prosemirror-model */ \"(ssr)/./node_modules/prosemirror-model/dist/index.js\");\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! prosemirror-state */ \"(ssr)/./node_modules/prosemirror-state/dist/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var prosemirror_view__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! prosemirror-view */ \"(ssr)/./node_modules/prosemirror-view/dist/index.js\");\n/* harmony import */ var rehype_parse__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! rehype-parse */ \"(ssr)/./node_modules/rehype-parse/lib/index.js\");\n/* harmony import */ var rehype_remark__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! rehype-remark */ \"(ssr)/./node_modules/rehype-remark/lib/index.js\");\n/* harmony import */ var rehype_stringify__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! rehype-stringify */ \"(ssr)/./node_modules/rehype-stringify/lib/index.js\");\n/* harmony import */ var remark_gfm__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! remark-gfm */ \"(ssr)/./node_modules/remark-gfm/index.js\");\n/* harmony import */ var remark_parse__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! remark-parse */ \"(ssr)/./node_modules/remark-parse/lib/index.js\");\n/* harmony import */ var remark_rehype__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! remark-rehype */ \"(ssr)/./node_modules/remark-rehype/lib/index.js\");\n/* harmony import */ var remark_rehype__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! remark-rehype */ \"(ssr)/./node_modules/mdast-util-to-hast/lib/handlers/index.js\");\n/* harmony import */ var remark_stringify__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! remark-stringify */ \"(ssr)/./node_modules/remark-stringify/lib/index.js\");\n/* harmony import */ var unified__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! unified */ \"(ssr)/./node_modules/unified/lib/index.js\");\n/* harmony import */ var hast_util_from_dom__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! hast-util-from-dom */ \"(ssr)/./node_modules/hast-util-from-dom/lib/index.js\");\nvar Jt = Object.defineProperty;\nvar Zt = (n, t, e) => t in n ? Jt(n, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : n[t] = e;\nvar u = (n, t, e) => (Zt(n, typeof t != \"symbol\" ? t + \"\" : t, e), e);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst Be = \"_bnEditor_12je0_3\", xe = \"_bnRoot_12je0_19\", Ie = \"_defaultStyles_12je0_34\", _e = \"_dragPreview_12je0_57\", R = {\n  bnEditor: Be,\n  bnRoot: xe,\n  defaultStyles: Ie,\n  dragPreview: _e,\n  \"collaboration-cursor__caret\": \"_collaboration-cursor__caret_12je0_63\",\n  \"collaboration-cursor__label\": \"_collaboration-cursor__label_12je0_74\"\n};\nfunction yt(n) {\n  const t = n.attrs.id, e = n.firstChild, o = e.type, r = n.childCount === 2 ? n.lastChild.childCount : 0;\n  return {\n    id: t,\n    node: n,\n    contentNode: e,\n    contentType: o,\n    numChildBlocks: r\n  };\n}\nfunction v(n, t) {\n  const o = n.nodeSize - 2;\n  if (t <= 1)\n    for (t = 1 + 1; n.resolve(t).parent.type.name !== \"blockContainer\" && t < o; )\n      t++;\n  else if (t >= o)\n    for (t = o - 1; n.resolve(t).parent.type.name !== \"blockContainer\" && t > 1; )\n      t--;\n  n.resolve(t).parent.type.name === \"blockGroup\" && t++;\n  const r = n.resolve(t), i = r.depth;\n  let s = r.node(i), l = i;\n  for (; ; ) {\n    if (l < 0)\n      throw new Error(\n        \"Could not find blockContainer node. This can only happen if the underlying BlockNote schema has been edited.\"\n      );\n    if (s.type.name === \"blockContainer\")\n      break;\n    l -= 1, s = r.node(l);\n  }\n  const { id: a, contentNode: d, contentType: c, numChildBlocks: h } = yt(s), m = r.start(l), p = r.end(l);\n  return {\n    id: a,\n    node: s,\n    contentNode: d,\n    contentType: c,\n    numChildBlocks: h,\n    startPos: m,\n    endPos: p,\n    depth: l\n  };\n}\nconst T = {\n  backgroundColor: {\n    default: \"default\"\n  },\n  textColor: {\n    default: \"default\"\n  },\n  textAlignment: {\n    default: \"left\",\n    values: [\"left\", \"center\", \"right\", \"justify\"]\n  }\n}, Ae = _tiptap_core__WEBPACK_IMPORTED_MODULE_13__.Extension.create({\n  name: \"blockBackgroundColor\",\n  addGlobalAttributes() {\n    return [\n      {\n        types: [\"blockContainer\"],\n        attributes: {\n          backgroundColor: {\n            default: T.backgroundColor.default,\n            parseHTML: (n) => n.hasAttribute(\"data-background-color\") ? n.getAttribute(\"data-background-color\") : T.backgroundColor.default,\n            renderHTML: (n) => n.backgroundColor !== T.backgroundColor.default && {\n              \"data-background-color\": n.backgroundColor\n            }\n          }\n        }\n      }\n    ];\n  },\n  addCommands() {\n    return {\n      setBlockBackgroundColor: (n, t) => ({ state: e, view: o }) => {\n        const r = v(e.doc, n);\n        return r === void 0 ? !1 : (e.tr.setNodeAttribute(\n          r.startPos - 1,\n          \"backgroundColor\",\n          t\n        ), o.focus(), !0);\n      }\n    };\n  }\n}), He = _tiptap_core__WEBPACK_IMPORTED_MODULE_13__.Mark.create({\n  name: \"backgroundColor\",\n  addAttributes() {\n    return {\n      color: {\n        default: void 0,\n        parseHTML: (n) => n.getAttribute(\"data-background-color\"),\n        renderHTML: (n) => ({\n          \"data-background-color\": n.color\n        })\n      }\n    };\n  },\n  parseHTML() {\n    return [\n      {\n        tag: \"span\",\n        getAttrs: (n) => typeof n == \"string\" ? !1 : n.hasAttribute(\"data-background-color\") ? { color: n.getAttribute(\"data-background-color\") } : !1\n      }\n    ];\n  },\n  renderHTML({ HTMLAttributes: n }) {\n    return [\"span\", n, 0];\n  },\n  addCommands() {\n    return {\n      setBackgroundColor: (n) => ({ commands: t }) => n !== T.backgroundColor.default ? t.setMark(this.name, { color: n }) : t.unsetMark(this.name)\n    };\n  }\n});\nfunction Le(n, t = JSON.stringify) {\n  const e = {};\n  return n.filter((o) => {\n    const r = t(o);\n    return Object.prototype.hasOwnProperty.call(e, r) ? !1 : e[r] = !0;\n  });\n}\nfunction Ne(n) {\n  const t = n.filter(\n    (o, r) => n.indexOf(o) !== r\n  );\n  return Le(t);\n}\nconst X = _tiptap_core__WEBPACK_IMPORTED_MODULE_13__.Extension.create({\n  name: \"uniqueID\",\n  // we’ll set a very high priority to make sure this runs first\n  // and is compatible with `appendTransaction` hooks of other extensions\n  priority: 1e4,\n  addOptions() {\n    return {\n      attributeName: \"id\",\n      types: [],\n      generateID: () => {\n        if (typeof window < \"u\" && window.__TEST_OPTIONS) {\n          const n = window.__TEST_OPTIONS;\n          return n.mockID === void 0 ? n.mockID = 0 : n.mockID++, n.mockID.toString();\n        }\n        return (0,uuid__WEBPACK_IMPORTED_MODULE_14__[\"default\"])();\n      },\n      filterTransaction: null\n    };\n  },\n  addGlobalAttributes() {\n    return [\n      {\n        types: this.options.types,\n        attributes: {\n          [this.options.attributeName]: {\n            default: null,\n            parseHTML: (n) => n.getAttribute(`data-${this.options.attributeName}`),\n            renderHTML: (n) => ({\n              [`data-${this.options.attributeName}`]: n[this.options.attributeName]\n            })\n          }\n        }\n      }\n    ];\n  },\n  // check initial content for missing ids\n  // onCreate() {\n  //   // Don’t do this when the collaboration extension is active\n  //   // because this may update the content, so Y.js tries to merge these changes.\n  //   // This leads to empty block nodes.\n  //   // See: https://github.com/ueberdosis/tiptap/issues/2400\n  //   if (\n  //     this.editor.extensionManager.extensions.find(\n  //       (extension) => extension.name === \"collaboration\"\n  //     )\n  //   ) {\n  //     return;\n  //   }\n  //   const { view, state } = this.editor;\n  //   const { tr, doc } = state;\n  //   const { types, attributeName, generateID } = this.options;\n  //   const nodesWithoutId = findChildren(doc, (node) => {\n  //     return (\n  //       types.includes(node.type.name) && node.attrs[attributeName] === null\n  //     );\n  //   });\n  //   nodesWithoutId.forEach(({ node, pos }) => {\n  //     tr.setNodeMarkup(pos, undefined, {\n  //       ...node.attrs,\n  //       [attributeName]: generateID(),\n  //     });\n  //   });\n  //   tr.setMeta(\"addToHistory\", false);\n  //   view.dispatch(tr);\n  // },\n  addProseMirrorPlugins() {\n    let n = null, t = !1;\n    return [\n      new prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.Plugin({\n        key: new prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.PluginKey(\"uniqueID\"),\n        appendTransaction: (e, o, r) => {\n          const i = e.some((f) => f.docChanged) && !o.doc.eq(r.doc), s = this.options.filterTransaction && e.some((f) => {\n            let b, w;\n            return !(!((w = (b = this.options).filterTransaction) === null || w === void 0) && w.call(b, f));\n          });\n          if (!i || s)\n            return;\n          const { tr: l } = r, { types: a, attributeName: d, generateID: c } = this.options, h = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_13__.combineTransactionSteps)(\n            o.doc,\n            e\n          ), { mapping: m } = h;\n          if ((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_13__.getChangedRanges)(h).forEach(({ newRange: f }) => {\n            const b = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_13__.findChildrenInRange)(\n              r.doc,\n              f,\n              (M) => a.includes(M.type.name)\n            ), w = b.map(({ node: M }) => M.attrs[d]).filter((M) => M !== null), C = Ne(w);\n            b.forEach(({ node: M, pos: E }) => {\n              let y;\n              const S = (y = l.doc.nodeAt(E)) === null || y === void 0 ? void 0 : y.attrs[d];\n              if (S === null) {\n                l.setNodeMarkup(E, void 0, {\n                  ...M.attrs,\n                  [d]: c()\n                });\n                return;\n              }\n              const { deleted: g } = m.invert().mapResult(E);\n              g && C.includes(S) && l.setNodeMarkup(E, void 0, {\n                ...M.attrs,\n                [d]: c()\n              });\n            });\n          }), !!l.steps.length)\n            return l;\n        },\n        // we register a global drag handler to track the current drag source element\n        view(e) {\n          const o = (r) => {\n            let i;\n            n = !((i = e.dom.parentElement) === null || i === void 0) && i.contains(r.target) ? e.dom.parentElement : null;\n          };\n          return window.addEventListener(\"dragstart\", o), {\n            destroy() {\n              window.removeEventListener(\"dragstart\", o);\n            }\n          };\n        },\n        props: {\n          // `handleDOMEvents` is called before `transformPasted`\n          // so we can do some checks before\n          handleDOMEvents: {\n            // only create new ids for dropped content while holding `alt`\n            // or content is dragged from another editor\n            drop: (e, o) => {\n              let r;\n              return (n !== e.dom.parentElement || ((r = o.dataTransfer) === null || r === void 0 ? void 0 : r.effectAllowed) === \"copy\") && (n = null, t = !0), !1;\n            },\n            // always create new ids on pasted content\n            paste: () => (t = !0, !1)\n          },\n          // we’ll remove ids for every pasted node\n          // so we can create a new one within `appendTransaction`\n          transformPasted: (e) => {\n            if (!t)\n              return e;\n            const { types: o, attributeName: r } = this.options, i = (s) => {\n              const l = [];\n              return s.forEach((a) => {\n                if (a.isText) {\n                  l.push(a);\n                  return;\n                }\n                if (!o.includes(a.type.name)) {\n                  l.push(a.copy(i(a.content)));\n                  return;\n                }\n                const d = a.type.create(\n                  {\n                    ...a.attrs,\n                    [r]: null\n                  },\n                  i(a.content),\n                  a.marks\n                );\n                l.push(d);\n              }), prosemirror_model__WEBPACK_IMPORTED_MODULE_16__.Fragment.from(l);\n            };\n            return t = !1, new prosemirror_model__WEBPACK_IMPORTED_MODULE_16__.Slice(\n              i(e.content),\n              e.openStart,\n              e.openEnd\n            );\n          }\n        }\n      })\n    ];\n  }\n}), Pe = () => /Mac/.test(navigator.platform) || /AppleWebKit/.test(navigator.userAgent) && /Mobile\\/\\w+/.test(navigator.userAgent);\nfunction xn(n) {\n  return Pe() ? n.replace(\"Mod\", \"⌘\") : n.replace(\"Mod\", \"Ctrl\");\n}\nfunction B(...n) {\n  return n.filter((t) => t).join(\" \");\n}\nclass De extends Error {\n  constructor(t) {\n    super(`Unreachable case: ${t}`);\n  }\n}\nconst vt = /* @__PURE__ */ new Set([\n  \"bold\",\n  \"italic\",\n  \"underline\",\n  \"strike\",\n  \"code\"\n]), wt = /* @__PURE__ */ new Set([\"textColor\", \"backgroundColor\"]);\nfunction lt(n, t) {\n  const e = [];\n  for (const [o, r] of Object.entries(n.styles))\n    vt.has(o) ? e.push(t.mark(o)) : wt.has(o) && e.push(t.mark(o, { color: r }));\n  return n.text.split(/(\\n)/g).filter((o) => o.length > 0).map((o) => o === `\n` ? t.nodes.hardBreak.create() : t.text(o, e));\n}\nfunction Oe(n, t) {\n  const e = t.marks.link.create({\n    href: n.href\n  });\n  return Ct(n.content, t).map((o) => {\n    if (o.type.name === \"text\")\n      return o.mark([...o.marks, e]);\n    if (o.type.name === \"hardBreak\")\n      return o;\n    throw new Error(\"unexpected node type\");\n  });\n}\nfunction Ct(n, t) {\n  const e = [];\n  if (typeof n == \"string\")\n    return e.push(\n      ...lt({ type: \"text\", text: n, styles: {} }, t)\n    ), e;\n  for (const o of n)\n    e.push(...lt(o, t));\n  return e;\n}\nfunction Et(n, t) {\n  const e = [];\n  for (const o of n)\n    if (o.type === \"link\")\n      e.push(...Oe(o, t));\n    else if (o.type === \"text\")\n      e.push(...Ct([o], t));\n    else\n      throw new De(o);\n  return e;\n}\nfunction F(n, t) {\n  let e = n.id;\n  e === void 0 && (e = X.options.generateID());\n  let o = n.type;\n  o === void 0 && (o = \"paragraph\");\n  let r;\n  if (!n.content)\n    r = t.nodes[o].create(n.props);\n  else if (typeof n.content == \"string\")\n    r = t.nodes[o].create(\n      n.props,\n      t.text(n.content)\n    );\n  else {\n    const l = Et(n.content, t);\n    r = t.nodes[o].create(n.props, l);\n  }\n  const i = [];\n  if (n.children)\n    for (const l of n.children)\n      i.push(F(l, t));\n  const s = t.nodes.blockGroup.create({}, i);\n  return t.nodes.blockContainer.create(\n    {\n      id: e,\n      ...n.props\n    },\n    i.length > 0 ? [r, s] : r\n  );\n}\nfunction Re(n) {\n  const t = [];\n  let e;\n  return n.content.forEach((o) => {\n    if (o.type.name === \"hardBreak\") {\n      e ? e.type === \"text\" ? e.text += `\n` : e.type === \"link\" && (e.content[e.content.length - 1].text += `\n`) : e = {\n        type: \"text\",\n        text: `\n`,\n        styles: {}\n      };\n      return;\n    }\n    const r = {};\n    let i;\n    for (const s of o.marks)\n      if (s.type.name === \"link\")\n        i = s;\n      else if (vt.has(s.type.name))\n        r[s.type.name] = !0;\n      else if (wt.has(s.type.name))\n        r[s.type.name] = s.attrs.color;\n      else\n        throw Error(\"Mark is of an unrecognized type: \" + s.type.name);\n    e ? e.type === \"text\" ? i ? (t.push(e), e = {\n      type: \"link\",\n      href: i.attrs.href,\n      content: [\n        {\n          type: \"text\",\n          text: o.textContent,\n          styles: r\n        }\n      ]\n    }) : JSON.stringify(e.styles) === JSON.stringify(r) ? e.text += o.textContent : (t.push(e), e = {\n      type: \"text\",\n      text: o.textContent,\n      styles: r\n    }) : e.type === \"link\" && (i ? e.href === i.attrs.href ? JSON.stringify(\n      e.content[e.content.length - 1].styles\n    ) === JSON.stringify(r) ? e.content[e.content.length - 1].text += o.textContent : e.content.push({\n      type: \"text\",\n      text: o.textContent,\n      styles: r\n    }) : (t.push(e), e = {\n      type: \"link\",\n      href: i.attrs.href,\n      content: [\n        {\n          type: \"text\",\n          text: o.textContent,\n          styles: r\n        }\n      ]\n    }) : (t.push(e), e = {\n      type: \"text\",\n      text: o.textContent,\n      styles: r\n    })) : i ? e = {\n      type: \"link\",\n      href: i.attrs.href,\n      content: [\n        {\n          type: \"text\",\n          text: o.textContent,\n          styles: r\n        }\n      ]\n    } : e = {\n      type: \"text\",\n      text: o.textContent,\n      styles: r\n    };\n  }), e && t.push(e), t;\n}\nfunction A(n, t, e) {\n  if (n.type.name !== \"blockContainer\")\n    throw Error(\n      \"Node must be of type blockContainer, but is of type\" + n.type.name + \".\"\n    );\n  const o = e == null ? void 0 : e.get(n);\n  if (o)\n    return o;\n  const r = yt(n);\n  let i = r.id;\n  i === null && (i = X.options.generateID());\n  const s = {};\n  for (const [c, h] of Object.entries({\n    ...n.attrs,\n    ...r.contentNode.attrs\n  })) {\n    const m = t[r.contentType.name];\n    if (!m)\n      throw Error(\n        \"Block is of an unrecognized type: \" + r.contentType.name\n      );\n    const p = m.propSchema;\n    c in p && (s[c] = h);\n  }\n  const l = t[r.contentType.name], a = [];\n  for (let c = 0; c < r.numChildBlocks; c++)\n    a.push(\n      A(n.lastChild.child(c), t, e)\n    );\n  const d = {\n    id: i,\n    type: l.node.name,\n    props: s,\n    content: l.node.config.content === \"inline*\" ? Re(r.contentNode) : void 0,\n    children: a\n  };\n  return e == null || e.set(n, d), d;\n}\nconst dt = new prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.PluginKey(\"previous-blocks\"), ze = {\n  // Numbered List Items\n  index: \"index\",\n  // Headings\n  level: \"level\",\n  // All Blocks\n  type: \"type\",\n  depth: \"depth\",\n  \"depth-change\": \"depth-change\"\n}, Ve = () => {\n  let n;\n  return new prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.Plugin({\n    key: dt,\n    view(t) {\n      return {\n        update: async (e, o) => {\n          var r;\n          ((r = this.key) == null ? void 0 : r.getState(e.state).updatedBlocks.size) > 0 && (n = setTimeout(() => {\n            e.dispatch(\n              e.state.tr.setMeta(dt, { clearUpdate: !0 })\n            );\n          }, 0));\n        },\n        destroy: () => {\n          n && clearTimeout(n);\n        }\n      };\n    },\n    state: {\n      init() {\n        return {\n          // Block attributes, by block ID, from just before the previous transaction.\n          prevTransactionOldBlockAttrs: {},\n          // Block attributes, by block ID, from just before the current transaction.\n          currentTransactionOldBlockAttrs: {},\n          // Set of IDs of blocks whose attributes changed from the current transaction.\n          updatedBlocks: /* @__PURE__ */ new Set()\n        };\n      },\n      apply(t, e, o, r) {\n        if (e.currentTransactionOldBlockAttrs = {}, e.updatedBlocks.clear(), !t.docChanged || o.doc.eq(r.doc))\n          return e;\n        const i = {}, s = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_13__.findChildren)(o.doc, (d) => d.attrs.id), l = new Map(\n          s.map((d) => [d.node.attrs.id, d])\n        ), a = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_13__.findChildren)(r.doc, (d) => d.attrs.id);\n        for (const d of a) {\n          const c = l.get(d.node.attrs.id), h = c == null ? void 0 : c.node.firstChild, m = d.node.firstChild;\n          if (c && h && m) {\n            const p = {\n              index: m.attrs.index,\n              level: m.attrs.level,\n              type: m.type.name,\n              depth: r.doc.resolve(d.pos).depth\n            };\n            let f = {\n              index: h.attrs.index,\n              level: h.attrs.level,\n              type: h.type.name,\n              depth: o.doc.resolve(c.pos).depth\n            };\n            i[d.node.attrs.id] = f, t.getMeta(\"numberedListIndexing\") && (d.node.attrs.id in e.prevTransactionOldBlockAttrs && (f = e.prevTransactionOldBlockAttrs[d.node.attrs.id]), p.type === \"numberedListItem\" && (f.index = p.index)), e.currentTransactionOldBlockAttrs[d.node.attrs.id] = f, JSON.stringify(f) !== JSON.stringify(p) && (f[\"depth-change\"] = f.depth - p.depth, e.updatedBlocks.add(d.node.attrs.id));\n          }\n        }\n        return e.prevTransactionOldBlockAttrs = i, e;\n      }\n    },\n    props: {\n      decorations(t) {\n        const e = this.getState(t);\n        if (e.updatedBlocks.size === 0)\n          return;\n        const o = [];\n        return t.doc.descendants((r, i) => {\n          if (!r.attrs.id || !e.updatedBlocks.has(r.attrs.id))\n            return;\n          const s = e.currentTransactionOldBlockAttrs[r.attrs.id], l = {};\n          for (const [d, c] of Object.entries(s))\n            l[\"data-prev-\" + ze[d]] = c || \"none\";\n          const a = prosemirror_view__WEBPACK_IMPORTED_MODULE_17__.Decoration.node(i, i + r.nodeSize, {\n            ...l\n          });\n          o.push(a);\n        }), prosemirror_view__WEBPACK_IMPORTED_MODULE_17__.DecorationSet.create(t.doc, o);\n      }\n    }\n  });\n}, St = \"_blockOuter_nstdf_5\", Mt = \"_block_nstdf_5\", Tt = \"_reactNodeViewRenderer_nstdf_17\", Bt = \"_blockContent_nstdf_22\", xt = \"_blockGroup_nstdf_43\", It = \"_wrapper_nstdf_227\", _t = \"_addImageButton_nstdf_235\", At = \"_addImageButtonIcon_nstdf_251\", Ht = \"_addImageButtonText_nstdf_257\", Lt = \"_imageAndCaptionWrapper_nstdf_261\", Nt = \"_imageWrapper_nstdf_267\", Pt = \"_image_nstdf_261\", Dt = \"_resizeHandle_nstdf_280\", Ot = \"_caption_nstdf_291\", Rt = \"_isEmpty_nstdf_297\", zt = \"_inlineContent_nstdf_297\", Vt = \"_isFilter_nstdf_298\", Ut = \"_hasAnchor_nstdf_310\", k = {\n  blockOuter: St,\n  block: Mt,\n  reactNodeViewRenderer: Tt,\n  blockContent: Bt,\n  blockGroup: xt,\n  wrapper: It,\n  addImageButton: _t,\n  addImageButtonIcon: At,\n  addImageButtonText: Ht,\n  imageAndCaptionWrapper: Lt,\n  imageWrapper: Nt,\n  image: Pt,\n  resizeHandle: Dt,\n  caption: Ot,\n  isEmpty: Rt,\n  inlineContent: zt,\n  isFilter: Vt,\n  hasAnchor: Ut\n}, In = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  addImageButton: _t,\n  addImageButtonIcon: At,\n  addImageButtonText: Ht,\n  block: Mt,\n  blockContent: Bt,\n  blockGroup: xt,\n  blockOuter: St,\n  caption: Ot,\n  default: k,\n  hasAnchor: Ut,\n  image: Pt,\n  imageAndCaptionWrapper: Lt,\n  imageWrapper: Nt,\n  inlineContent: zt,\n  isEmpty: Rt,\n  isFilter: Vt,\n  reactNodeViewRenderer: Tt,\n  resizeHandle: Dt,\n  wrapper: It\n}, Symbol.toStringTag, { value: \"Module\" })), Ue = {\n  blockColor: \"data-block-color\",\n  blockStyle: \"data-block-style\",\n  id: \"data-id\",\n  depth: \"data-depth\",\n  depthChange: \"data-depth-change\"\n}, Fe = new prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.PluginKey(\"non-editable-block\"), $e = () => new prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.Plugin({\n  key: Fe,\n  props: {\n    handleKeyDown: (n, t) => {\n      \"node\" in n.state.selection && t.preventDefault();\n    }\n  }\n}), We = _tiptap_core__WEBPACK_IMPORTED_MODULE_13__.Node.create({\n  name: \"blockContainer\",\n  group: \"blockContainer\",\n  // A block always contains content, and optionally a blockGroup which contains nested blocks\n  content: \"blockContent blockGroup?\",\n  // Ensures content-specific keyboard handlers trigger first.\n  priority: 50,\n  defining: !0,\n  parseHTML() {\n    return [\n      {\n        tag: \"div\",\n        getAttrs: (n) => {\n          if (typeof n == \"string\")\n            return !1;\n          const t = {};\n          for (const [e, o] of Object.entries(Ue))\n            n.getAttribute(o) && (t[e] = n.getAttribute(o));\n          return n.getAttribute(\"data-node-type\") === \"blockContainer\" ? t : !1;\n        }\n      }\n    ];\n  },\n  renderHTML({ HTMLAttributes: n }) {\n    var e;\n    const t = ((e = this.options.domAttributes) == null ? void 0 : e.blockContainer) || {};\n    return [\n      \"div\",\n      (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_13__.mergeAttributes)(n, {\n        class: k.blockOuter,\n        \"data-node-type\": \"block-outer\"\n      }),\n      [\n        \"div\",\n        (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_13__.mergeAttributes)(\n          {\n            ...t,\n            class: B(k.block, t.class),\n            \"data-node-type\": this.name\n          },\n          n\n        ),\n        0\n      ]\n    ];\n  },\n  addCommands() {\n    return {\n      // Creates a new text block at a given position.\n      BNCreateBlock: (n) => ({ state: t, dispatch: e }) => {\n        const o = t.schema.nodes.blockContainer.createAndFill();\n        return e && t.tr.insert(n, o), !0;\n      },\n      // Deletes a block at a given position.\n      BNDeleteBlock: (n) => ({ state: t, dispatch: e }) => {\n        const o = v(t.doc, n);\n        if (o === void 0)\n          return !1;\n        const { startPos: r, endPos: i } = o;\n        return e && t.tr.deleteRange(r, i), !0;\n      },\n      // Updates a block at a given position.\n      BNUpdateBlock: (n, t) => ({ state: e, dispatch: o }) => {\n        const r = v(e.doc, n);\n        if (r === void 0)\n          return !1;\n        const { startPos: i, endPos: s, node: l, contentNode: a } = r;\n        if (o) {\n          if (t.children !== void 0) {\n            const p = [];\n            for (const f of t.children)\n              p.push(F(f, e.schema));\n            l.childCount === 2 ? e.tr.replace(\n              i + a.nodeSize + 1,\n              s - 1,\n              new prosemirror_model__WEBPACK_IMPORTED_MODULE_16__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_16__.Fragment.from(p), 0, 0)\n            ) : e.tr.insert(\n              i + a.nodeSize,\n              e.schema.nodes.blockGroup.create({}, p)\n            );\n          }\n          if (t.content !== void 0) {\n            let p = [];\n            typeof t.content == \"string\" ? p.push(e.schema.text(t.content)) : p = Et(t.content, e.schema), e.tr.replace(\n              i + 1,\n              i + a.nodeSize - 1,\n              new prosemirror_model__WEBPACK_IMPORTED_MODULE_16__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_16__.Fragment.from(p), 0, 0)\n            );\n          }\n          const d = a.type.name, c = t.type || d, h = e.schema.nodes[d].spec.content, m = e.schema.nodes[c].spec.content;\n          h === \"inline*\" && m === \"\" ? e.tr.replaceWith(\n            i,\n            s,\n            e.schema.nodes[c].create({\n              ...a.attrs,\n              ...t.props\n            })\n          ).setSelection(\n            new prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.NodeSelection(e.tr.doc.resolve(i))\n          ) : e.tr.setNodeMarkup(\n            i,\n            t.type === void 0 ? void 0 : e.schema.nodes[t.type],\n            {\n              ...a.attrs,\n              ...t.props\n            }\n          ), e.tr.setNodeMarkup(i - 1, void 0, {\n            ...l.attrs,\n            ...t.props\n          });\n        }\n        return !0;\n      },\n      // Appends the text contents of a block to the nearest previous block, given a position between them. Children of\n      // the merged block are moved out of it first, rather than also being merged.\n      //\n      // In the example below, the position passed into the function is between Block1 and Block2.\n      //\n      // Block1\n      //    Block2\n      // Block3\n      //    Block4\n      //        Block5\n      //\n      // Becomes:\n      //\n      // Block1\n      //    Block2Block3\n      // Block4\n      //     Block5\n      BNMergeBlocks: (n) => ({ state: t, dispatch: e }) => {\n        const o = t.doc.resolve(n + 1).node().type.name === \"blockContainer\", r = t.doc.resolve(n - 1).node().type.name === \"blockContainer\";\n        if (!o || !r)\n          return !1;\n        const i = v(\n          t.doc,\n          n + 1\n        ), { node: s, contentNode: l, startPos: a, endPos: d, depth: c } = i;\n        if (s.childCount === 2) {\n          const p = t.doc.resolve(\n            a + l.nodeSize + 1\n          ), f = t.doc.resolve(d - 1), b = p.blockRange(f);\n          e && t.tr.lift(b, c - 1);\n        }\n        let h = n - 1, m = v(t.doc, h);\n        for (; m.numChildBlocks > 0; )\n          if (h--, m = v(t.doc, h), m === void 0)\n            return !1;\n        return e && (e(\n          t.tr.deleteRange(a, a + l.nodeSize).replace(\n            h - 1,\n            a,\n            new prosemirror_model__WEBPACK_IMPORTED_MODULE_16__.Slice(l.content, 0, 0)\n          ).scrollIntoView()\n        ), t.tr.setSelection(\n          new prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.TextSelection(t.doc.resolve(h - 1))\n        )), !0;\n      },\n      // Splits a block at a given position. Content after the position is moved to a new block below, at the same\n      // nesting level.\n      BNSplitBlock: (n, t) => ({ state: e, dispatch: o }) => {\n        const r = v(e.doc, n);\n        if (r === void 0)\n          return !1;\n        const { contentNode: i, contentType: s, startPos: l, endPos: a, depth: d } = r, c = e.doc.cut(l + 1, n), h = e.doc.cut(n, a - 1), m = e.schema.nodes.blockContainer.createAndFill(), p = a + 1, f = p + 2;\n        return o && (e.tr.insert(p, m), e.tr.replace(\n          f,\n          f + 1,\n          h.content.size > 0 ? new prosemirror_model__WEBPACK_IMPORTED_MODULE_16__.Slice(\n            prosemirror_model__WEBPACK_IMPORTED_MODULE_16__.Fragment.from(h),\n            d + 2,\n            d + 2\n          ) : void 0\n        ), t && e.tr.setBlockType(\n          f,\n          f,\n          e.schema.node(s).type,\n          i.attrs\n        ), e.tr.setSelection(\n          new prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.TextSelection(e.doc.resolve(f))\n        ), e.tr.replace(\n          l + 1,\n          a - 1,\n          c.content.size > 0 ? new prosemirror_model__WEBPACK_IMPORTED_MODULE_16__.Slice(\n            prosemirror_model__WEBPACK_IMPORTED_MODULE_16__.Fragment.from(c),\n            d + 2,\n            d + 2\n          ) : void 0\n        )), !0;\n      }\n    };\n  },\n  addProseMirrorPlugins() {\n    return [Ve(), $e()];\n  },\n  addKeyboardShortcuts() {\n    return {\n      Backspace: () => this.editor.commands.first(({ commands: o }) => [\n        // Deletes the selection if it's not empty.\n        () => o.deleteSelection(),\n        // Undoes an input rule if one was triggered in the last editor state change.\n        () => o.undoInputRule(),\n        // Reverts block content type to a paragraph if the selection is at the start of the block.\n        () => o.command(({ state: r }) => {\n          const { contentType: i } = v(\n            r.doc,\n            r.selection.from\n          ), s = r.selection.$anchor.parentOffset === 0, l = i.name === \"paragraph\";\n          return s && !l ? o.BNUpdateBlock(r.selection.from, {\n            type: \"paragraph\",\n            props: {}\n          }) : !1;\n        }),\n        // Removes a level of nesting if the block is indented if the selection is at the start of the block.\n        () => o.command(({ state: r }) => r.selection.$anchor.parentOffset === 0 ? o.liftListItem(\"blockContainer\") : !1),\n        // Merges block with the previous one if it isn't indented, isn't the first block in the doc, and the selection\n        // is at the start of the block.\n        () => o.command(({ state: r }) => {\n          const { depth: i, startPos: s } = v(\n            r.doc,\n            r.selection.from\n          ), l = r.selection.$anchor.parentOffset === 0, a = r.selection.anchor === r.selection.head, d = s === 2, c = s - 1;\n          return !d && l && a && i === 2 ? o.BNMergeBlocks(c) : !1;\n        })\n      ]),\n      Delete: () => this.editor.commands.first(({ commands: o }) => [\n        // Deletes the selection if it's not empty.\n        () => o.deleteSelection(),\n        // Merges block with the next one (at the same nesting level or lower),\n        // if one exists, the block has no children, and the selection is at the\n        // end of the block.\n        () => o.command(({ state: r }) => {\n          const { node: i, contentNode: s, depth: l, endPos: a } = v(\n            r.doc,\n            r.selection.from\n          ), d = r.selection.$anchor.parentOffset === s.firstChild.nodeSize, c = r.selection.anchor === r.selection.head, h = i.childCount === 2;\n          if (d && c && !h) {\n            let m = l, p = a + 2, f = r.doc.resolve(p).depth;\n            for (; f < m; )\n              m = f, p += 2, f = r.doc.resolve(p).depth;\n            return o.BNMergeBlocks(p - 1);\n          }\n          return !1;\n        })\n      ]),\n      Enter: () => this.editor.commands.first(({ commands: o }) => [\n        // Removes a level of nesting if the block is empty & indented, while the selection is also empty & at the start\n        // of the block.\n        () => o.command(({ state: r }) => {\n          const { node: i, depth: s } = v(\n            r.doc,\n            r.selection.from\n          ), l = r.selection.$anchor.parentOffset === 0, a = r.selection.anchor === r.selection.head, d = i.textContent.length === 0, c = s > 2;\n          return l && a && d && c ? o.liftListItem(\"blockContainer\") : !1;\n        }),\n        // Creates a new block and moves the selection to it if the current one is empty, while the selection is also\n        // empty & at the start of the block.\n        () => o.command(({ state: r, chain: i }) => {\n          const { node: s, endPos: l } = v(\n            r.doc,\n            r.selection.from\n          ), a = r.selection.$anchor.parentOffset === 0, d = r.selection.anchor === r.selection.head, c = s.textContent.length === 0;\n          if (a && d && c) {\n            const h = l + 1, m = h + 2;\n            return i().BNCreateBlock(h).setTextSelection(m).run(), !0;\n          }\n          return !1;\n        }),\n        // Splits the current block, moving content inside that's after the cursor to a new text block below. Also\n        // deletes the selection beforehand, if it's not empty.\n        () => o.command(({ state: r, chain: i }) => {\n          const { node: s } = v(\n            r.doc,\n            r.selection.from\n          ), l = r.selection.$anchor.parentOffset === 0;\n          return s.textContent.length === 0 ? !1 : (i().deleteSelection().BNSplitBlock(r.selection.from, l).run(), !0);\n        })\n      ]),\n      // Always returning true for tab key presses ensures they're not captured by the browser. Otherwise, they blur the\n      // editor since the browser will try to use tab for keyboard navigation.\n      Tab: () => (this.editor.commands.sinkListItem(\"blockContainer\"), !0),\n      \"Shift-Tab\": () => (this.editor.commands.liftListItem(\"blockContainer\"), !0),\n      \"Mod-Alt-0\": () => this.editor.commands.BNCreateBlock(\n        this.editor.state.selection.anchor + 2\n      )\n    };\n  }\n}), Ge = _tiptap_core__WEBPACK_IMPORTED_MODULE_13__.Node.create({\n  name: \"blockGroup\",\n  group: \"blockGroup\",\n  content: \"blockContainer+\",\n  parseHTML() {\n    return [\n      {\n        tag: \"div\",\n        getAttrs: (n) => typeof n == \"string\" ? !1 : n.getAttribute(\"data-node-type\") === \"blockGroup\" ? null : !1\n      }\n    ];\n  },\n  renderHTML({ HTMLAttributes: n }) {\n    var e;\n    const t = ((e = this.options.domAttributes) == null ? void 0 : e.blockGroup) || {};\n    return [\n      \"div\",\n      (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_13__.mergeAttributes)(\n        {\n          ...t,\n          class: B(\n            k.blockGroup,\n            t.class\n          ),\n          \"data-node-type\": \"blockGroup\"\n        },\n        n\n      ),\n      0\n    ];\n  }\n}), je = _tiptap_core__WEBPACK_IMPORTED_MODULE_13__.Node.create({\n  name: \"doc\",\n  topNode: !0,\n  content: \"blockGroup\"\n}), qe = (n) => {\n  const t = prosemirror_model__WEBPACK_IMPORTED_MODULE_16__.DOMSerializer.fromSchema(n);\n  return new prosemirror_model__WEBPACK_IMPORTED_MODULE_16__.DOMSerializer(\n    {\n      ...t.nodes\n      // TODO: If a serializer is defined in the config for a custom block, it\n      //  should be added here. We still need to figure out how the serializer\n      //  should be defined in the custom blocks API though, and implement that,\n      //  before we can do this.\n    },\n    t.marks\n  );\n}, Xe = _tiptap_core__WEBPACK_IMPORTED_MODULE_13__.Extension.create({\n  addProseMirrorPlugins() {\n    return [\n      new prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.Plugin({\n        props: {\n          clipboardSerializer: qe(this.editor.schema)\n        }\n      })\n    ];\n  }\n});\nclass $ {\n  constructor() {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    u(this, \"callbacks\", {});\n  }\n  on(t, e) {\n    return this.callbacks[t] || (this.callbacks[t] = []), this.callbacks[t].push(e), () => this.off(t, e);\n  }\n  emit(t, ...e) {\n    const o = this.callbacks[t];\n    o && o.forEach((r) => r.apply(this, e));\n  }\n  off(t, e) {\n    const o = this.callbacks[t];\n    o && (e ? this.callbacks[t] = o.filter((r) => r !== e) : delete this.callbacks[t]);\n  }\n  removeAllListeners() {\n    this.callbacks = {};\n  }\n}\nconst Ke = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_13__.findParentNode)(\n  (n) => n.type.name === \"blockContainer\"\n);\nclass Ye {\n  constructor(t, e, o = () => {\n  }) {\n    u(this, \"suggestionsMenuState\");\n    u(this, \"updateSuggestionsMenu\");\n    u(this, \"pluginState\");\n    u(this, \"handleScroll\", () => {\n      var t;\n      if ((t = this.suggestionsMenuState) != null && t.show) {\n        const e = document.querySelector(\n          `[data-decoration-id=\"${this.pluginState.decorationId}\"]`\n        );\n        this.suggestionsMenuState.referencePos = e.getBoundingClientRect(), this.updateSuggestionsMenu();\n      }\n    });\n    this.editor = t, this.pluginKey = e, this.pluginState = Z(), this.updateSuggestionsMenu = () => {\n      if (!this.suggestionsMenuState)\n        throw new Error(\"Attempting to update uninitialized suggestions menu\");\n      o(this.suggestionsMenuState);\n    }, document.addEventListener(\"scroll\", this.handleScroll);\n  }\n  update(t, e) {\n    const o = this.pluginKey.getState(e), r = this.pluginKey.getState(t.state), i = !o.active && r.active, s = o.active && !r.active, l = o.active && r.active;\n    if (!i && !l && !s)\n      return;\n    if (this.pluginState = s ? o : r, s || !this.editor.isEditable) {\n      this.suggestionsMenuState.show = !1, this.updateSuggestionsMenu();\n      return;\n    }\n    const a = document.querySelector(\n      `[data-decoration-id=\"${this.pluginState.decorationId}\"]`\n    );\n    this.editor.isEditable && (this.suggestionsMenuState = {\n      show: !0,\n      referencePos: a.getBoundingClientRect(),\n      filteredItems: this.pluginState.items,\n      keyboardHoveredItemIndex: this.pluginState.keyboardHoveredItemIndex\n    }, this.updateSuggestionsMenu());\n  }\n  destroy() {\n    document.removeEventListener(\"scroll\", this.handleScroll);\n  }\n}\nfunction Z() {\n  return {\n    active: !1,\n    triggerCharacter: void 0,\n    queryStartPos: void 0,\n    items: [],\n    keyboardHoveredItemIndex: void 0,\n    notFoundCount: 0,\n    decorationId: void 0\n  };\n}\nconst Je = (n, t, e, o, r = () => [], i = () => {\n}) => {\n  if (o.length !== 1)\n    throw new Error(\"'char' should be a single character\");\n  let s;\n  const l = (a) => {\n    a.dispatch(a.state.tr.setMeta(e, { deactivate: !0 }));\n  };\n  return {\n    plugin: new prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.Plugin({\n      key: e,\n      view: () => (s = new Ye(\n        n,\n        e,\n        t\n      ), s),\n      state: {\n        // Initialize the plugin's internal state.\n        init() {\n          return Z();\n        },\n        // Apply changes to the plugin state from an editor transaction.\n        apply(a, d, c, h) {\n          var p, f, b, w;\n          if (a.getMeta(\"orderedListIndexing\") !== void 0)\n            return d;\n          if ((p = a.getMeta(e)) != null && p.activate)\n            return {\n              active: !0,\n              triggerCharacter: ((f = a.getMeta(e)) == null ? void 0 : f.triggerCharacter) || \"\",\n              queryStartPos: h.selection.from,\n              items: r(\"\"),\n              keyboardHoveredItemIndex: 0,\n              // TODO: Maybe should be 1 if the menu has no possible items? Probably redundant since a menu with no items\n              //  is useless in practice.\n              notFoundCount: 0,\n              decorationId: `id_${Math.floor(Math.random() * 4294967295)}`\n            };\n          if (!d.active)\n            return d;\n          const m = { ...d };\n          if (m.items = r(\n            h.doc.textBetween(\n              d.queryStartPos,\n              h.selection.from\n            )\n          ), m.notFoundCount = 0, m.items.length === 0 && (m.notFoundCount = Math.max(\n            0,\n            d.notFoundCount + (h.selection.from - c.selection.from)\n          )), // Highlighting text should hide the menu.\n          h.selection.from !== h.selection.to || // Transactions with plugin metadata {deactivate: true} should hide the menu.\n          (b = a.getMeta(e)) != null && b.deactivate || // Certain mouse events should hide the menu.\n          // TODO: Change to global mousedown listener.\n          a.getMeta(\"focus\") || a.getMeta(\"blur\") || a.getMeta(\"pointer\") || // Moving the caret before the character which triggered the menu should hide it.\n          d.active && h.selection.from < d.queryStartPos || // Entering more than 3 characters, after the last query that matched with at least 1 menu item, should hide\n          // the menu.\n          m.notFoundCount > 3)\n            return Z();\n          if (((w = a.getMeta(e)) == null ? void 0 : w.selectedItemIndexChanged) !== void 0) {\n            let C = a.getMeta(e).selectedItemIndexChanged;\n            C < 0 ? C = d.items.length - 1 : C >= d.items.length && (C = 0), m.keyboardHoveredItemIndex = C;\n          } else\n            c.selection.from !== h.selection.from && (m.keyboardHoveredItemIndex = 0);\n          return m;\n        }\n      },\n      props: {\n        handleKeyDown(a, d) {\n          const c = this.getState(a.state).active;\n          if (d.key === o && !c)\n            return a.dispatch(\n              a.state.tr.insertText(o).scrollIntoView().setMeta(e, {\n                activate: !0,\n                triggerCharacter: o\n              })\n            ), !0;\n          if (!c)\n            return !1;\n          const {\n            triggerCharacter: h,\n            queryStartPos: m,\n            items: p,\n            keyboardHoveredItemIndex: f\n          } = e.getState(a.state);\n          return d.key === \"ArrowUp\" ? (a.dispatch(\n            a.state.tr.setMeta(e, {\n              selectedItemIndexChanged: f - 1\n            })\n          ), !0) : d.key === \"ArrowDown\" ? (a.dispatch(\n            a.state.tr.setMeta(e, {\n              selectedItemIndexChanged: f + 1\n            })\n          ), !0) : d.key === \"Enter\" ? (p.length === 0 || (l(a), n._tiptapEditor.chain().focus().deleteRange({\n            from: m - h.length,\n            to: n._tiptapEditor.state.selection.from\n          }).run(), i({\n            item: p[f],\n            editor: n\n          })), !0) : d.key === \"Escape\" ? (l(a), !0) : !1;\n        },\n        // Setup decorator on the currently active suggestion.\n        decorations(a) {\n          const { active: d, decorationId: c, queryStartPos: h, triggerCharacter: m } = this.getState(a);\n          if (!d)\n            return null;\n          if (m === \"\") {\n            const p = Ke(a.selection);\n            if (p)\n              return prosemirror_view__WEBPACK_IMPORTED_MODULE_17__.DecorationSet.create(a.doc, [\n                prosemirror_view__WEBPACK_IMPORTED_MODULE_17__.Decoration.node(\n                  p.pos,\n                  p.pos + p.node.nodeSize,\n                  {\n                    nodeName: \"span\",\n                    class: \"suggestion-decorator\",\n                    \"data-decoration-id\": c\n                  }\n                )\n              ]);\n          }\n          return prosemirror_view__WEBPACK_IMPORTED_MODULE_17__.DecorationSet.create(a.doc, [\n            prosemirror_view__WEBPACK_IMPORTED_MODULE_17__.Decoration.inline(\n              h - m.length,\n              h,\n              {\n                nodeName: \"span\",\n                class: \"suggestion-decorator\",\n                \"data-decoration-id\": c\n              }\n            )\n          ]);\n        }\n      }\n    }),\n    itemCallback: (a) => {\n      l(n._tiptapEditor.view), n._tiptapEditor.chain().focus().deleteRange({\n        from: s.pluginState.queryStartPos - s.pluginState.triggerCharacter.length,\n        to: n._tiptapEditor.state.selection.from\n      }).run(), i({\n        item: a,\n        editor: n\n      });\n    }\n  };\n}, et = new prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.PluginKey(\"SlashMenuPlugin\");\nclass Ze extends $ {\n  constructor(e, o) {\n    super();\n    u(this, \"plugin\");\n    u(this, \"itemCallback\");\n    const r = Je(\n      e,\n      (i) => {\n        this.emit(\"update\", i);\n      },\n      et,\n      \"/\",\n      (i) => o.filter(\n        ({ name: s, aliases: l }) => s.toLowerCase().startsWith(i.toLowerCase()) || l && l.filter(\n          (a) => a.toLowerCase().startsWith(i.toLowerCase())\n        ).length !== 0\n      ),\n      ({ item: i, editor: s }) => i.execute(s)\n    );\n    this.plugin = r.plugin, this.itemCallback = r.itemCallback;\n  }\n  onUpdate(e) {\n    return this.on(\"update\", e);\n  }\n}\nconst Qe = new prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.PluginKey(\"blocknote-placeholder\"), to = _tiptap_core__WEBPACK_IMPORTED_MODULE_13__.Extension.create({\n  name: \"placeholder\",\n  addOptions() {\n    return {\n      emptyEditorClass: \"is-editor-empty\",\n      emptyNodeClass: \"is-empty\",\n      isFilterClass: \"is-filter\",\n      hasAnchorClass: \"has-anchor\",\n      placeholder: \"Write something …\",\n      showOnlyWhenEditable: !0,\n      showOnlyCurrent: !0,\n      includeChildren: !1\n    };\n  },\n  addProseMirrorPlugins() {\n    return [\n      new prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.Plugin({\n        key: Qe,\n        props: {\n          decorations: (n) => {\n            const { doc: t, selection: e } = n, o = et.getState(n), r = this.editor.isEditable || !this.options.showOnlyWhenEditable, { anchor: i } = e, s = [];\n            if (r)\n              return t.descendants((l, a) => {\n                const d = i >= a && i <= a + l.nodeSize, c = !l.isLeaf && !l.childCount;\n                if ((d || !this.options.showOnlyCurrent) && c) {\n                  const h = [this.options.emptyNodeClass];\n                  this.editor.isEmpty && h.push(this.options.emptyEditorClass), d && h.push(this.options.hasAnchorClass), (o == null ? void 0 : o.triggerCharacter) === \"\" && (o != null && o.active) && h.push(this.options.isFilterClass);\n                  const m = prosemirror_view__WEBPACK_IMPORTED_MODULE_17__.Decoration.node(a, a + l.nodeSize, {\n                    class: h.join(\" \")\n                  });\n                  s.push(m);\n                }\n                return this.options.includeChildren;\n              }), prosemirror_view__WEBPACK_IMPORTED_MODULE_17__.DecorationSet.create(t, s);\n          }\n        }\n      })\n    ];\n  }\n}), eo = _tiptap_core__WEBPACK_IMPORTED_MODULE_13__.Extension.create({\n  name: \"textAlignment\",\n  addGlobalAttributes() {\n    return [\n      {\n        // Attribute is applied to block content instead of container so that child blocks don't inherit the text\n        // alignment styling.\n        types: [\"paragraph\", \"heading\", \"bulletListItem\", \"numberedListItem\"],\n        attributes: {\n          textAlignment: {\n            default: \"left\",\n            parseHTML: (n) => n.getAttribute(\"data-text-alignment\"),\n            renderHTML: (n) => n.textAlignment !== \"left\" && {\n              \"data-text-alignment\": n.textAlignment\n            }\n          }\n        }\n      }\n    ];\n  },\n  addCommands() {\n    return {\n      setTextAlignment: (n) => ({ state: t }) => {\n        const e = [], o = v(\n          t.doc,\n          t.selection.from\n        );\n        if (o === void 0)\n          return !1;\n        let r = o.startPos;\n        for (; r < t.selection.to; )\n          t.doc.resolve(r).node().type.spec.group === \"blockContent\" ? (e.push(r - 1), r += t.doc.resolve(r).node().nodeSize - 1) : r += 1;\n        for (const i of e)\n          t.tr.setNodeAttribute(i, \"textAlignment\", n);\n        return !0;\n      }\n    };\n  }\n}), oo = _tiptap_core__WEBPACK_IMPORTED_MODULE_13__.Extension.create({\n  name: \"blockTextColor\",\n  addGlobalAttributes() {\n    return [\n      {\n        types: [\"blockContainer\"],\n        attributes: {\n          textColor: {\n            default: T.textColor.default,\n            parseHTML: (n) => n.hasAttribute(\"data-text-color\") ? n.getAttribute(\"data-text-color\") : T.textColor.default,\n            renderHTML: (n) => n.textColor !== T.textColor.default && {\n              \"data-text-color\": n.textColor\n            }\n          }\n        }\n      }\n    ];\n  },\n  addCommands() {\n    return {\n      setBlockTextColor: (n, t) => ({ state: e, view: o }) => {\n        const r = v(e.doc, n);\n        return r === void 0 ? !1 : (e.tr.setNodeAttribute(r.startPos - 1, \"textColor\", t), o.focus(), !0);\n      }\n    };\n  }\n}), no = _tiptap_core__WEBPACK_IMPORTED_MODULE_13__.Mark.create({\n  name: \"textColor\",\n  addAttributes() {\n    return {\n      color: {\n        default: void 0,\n        parseHTML: (n) => n.getAttribute(\"data-text-color\"),\n        renderHTML: (n) => ({\n          \"data-text-color\": n.color\n        })\n      }\n    };\n  },\n  parseHTML() {\n    return [\n      {\n        tag: \"span\",\n        getAttrs: (n) => typeof n == \"string\" ? !1 : n.hasAttribute(\"data-text-color\") ? { color: n.getAttribute(\"data-text-color\") } : !1\n      }\n    ];\n  },\n  renderHTML({ HTMLAttributes: n }) {\n    return [\"span\", n, 0];\n  },\n  addCommands() {\n    return {\n      setTextColor: (n) => ({ commands: t }) => n !== T.textColor.default ? t.setMark(this.name, { color: n }) : t.unsetMark(this.name)\n    };\n  }\n}), ro = _tiptap_core__WEBPACK_IMPORTED_MODULE_13__.Extension.create({\n  name: \"trailingNode\",\n  addProseMirrorPlugins() {\n    const n = new prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.PluginKey(this.name);\n    return [\n      new prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.Plugin({\n        key: n,\n        appendTransaction: (t, e, o) => {\n          const { doc: r, tr: i, schema: s } = o, l = n.getState(o), a = r.content.size - 2, d = s.nodes.blockContainer, c = s.nodes.paragraph;\n          if (l)\n            return i.insert(\n              a,\n              d.create(void 0, c.create())\n            );\n        },\n        state: {\n          init: (t, e) => {\n          },\n          apply: (t, e) => {\n            if (!t.docChanged)\n              return e;\n            let o = t.doc.lastChild;\n            if (!o || o.type.name !== \"blockGroup\")\n              throw new Error(\"Expected blockGroup\");\n            if (o = o.lastChild, !o || o.type.name !== \"blockContainer\")\n              throw new Error(\"Expected blockContainer\");\n            const r = o.firstChild;\n            if (!r)\n              throw new Error(\"Expected blockContent\");\n            return o.nodeSize > 4 || r.type.spec.content !== \"inline*\";\n          }\n        }\n      })\n    ];\n  }\n}), io = (n) => {\n  var e;\n  const t = [\n    _tiptap_core__WEBPACK_IMPORTED_MODULE_13__.extensions.ClipboardTextSerializer,\n    _tiptap_core__WEBPACK_IMPORTED_MODULE_13__.extensions.Commands,\n    _tiptap_core__WEBPACK_IMPORTED_MODULE_13__.extensions.Editable,\n    _tiptap_core__WEBPACK_IMPORTED_MODULE_13__.extensions.FocusEvents,\n    _tiptap_core__WEBPACK_IMPORTED_MODULE_13__.extensions.Tabindex,\n    // DevTools,\n    _tiptap_extension_gapcursor__WEBPACK_IMPORTED_MODULE_5__.Gapcursor,\n    // DropCursor,\n    to.configure({\n      emptyNodeClass: k.isEmpty,\n      hasAnchorClass: k.hasAnchor,\n      isFilterClass: k.isFilter,\n      includeChildren: !0,\n      showOnlyCurrent: !1\n    }),\n    X.configure({\n      types: [\"blockContainer\"]\n    }),\n    _tiptap_extension_hard_break__WEBPACK_IMPORTED_MODULE_6__.HardBreak,\n    // Comments,\n    // basics:\n    _tiptap_extension_text__WEBPACK_IMPORTED_MODULE_11__.Text,\n    // marks:\n    _tiptap_extension_bold__WEBPACK_IMPORTED_MODULE_0__.Bold,\n    _tiptap_extension_code__WEBPACK_IMPORTED_MODULE_1__.Code,\n    _tiptap_extension_italic__WEBPACK_IMPORTED_MODULE_8__.Italic,\n    _tiptap_extension_strike__WEBPACK_IMPORTED_MODULE_10__.Strike,\n    _tiptap_extension_underline__WEBPACK_IMPORTED_MODULE_12__.Underline,\n    _tiptap_extension_link__WEBPACK_IMPORTED_MODULE_9__.Link,\n    no,\n    oo,\n    He,\n    Ae,\n    eo,\n    // nodes\n    je,\n    We.configure({\n      domAttributes: n.domAttributes\n    }),\n    Ge.configure({\n      domAttributes: n.domAttributes\n    }),\n    ...Object.values(n.blockSchema).map(\n      (o) => o.node.configure({\n        editor: n.editor,\n        domAttributes: n.domAttributes\n      })\n    ),\n    Xe,\n    _tiptap_extension_dropcursor__WEBPACK_IMPORTED_MODULE_4__.Dropcursor.configure({ width: 5, color: \"#ddeeff\" }),\n    // This needs to be at the bottom of this list, because Key events (such as enter, when selecting a /command),\n    // should be handled before Enter handlers in other components like splitListItem\n    ro\n  ];\n  if (n.collaboration) {\n    if (t.push(\n      _tiptap_extension_collaboration__WEBPACK_IMPORTED_MODULE_2__[\"default\"].configure({\n        fragment: n.collaboration.fragment\n      })\n    ), (e = n.collaboration.provider) != null && e.awareness) {\n      const o = (r) => {\n        const i = document.createElement(\"span\");\n        i.classList.add(R[\"collaboration-cursor__caret\"]), i.setAttribute(\"style\", `border-color: ${r.color}`);\n        const s = document.createElement(\"span\");\n        s.classList.add(R[\"collaboration-cursor__label\"]), s.setAttribute(\"style\", `background-color: ${r.color}`), s.insertBefore(document.createTextNode(r.name), null);\n        const l = document.createTextNode(\"⁠\"), a = document.createTextNode(\"⁠\");\n        return i.insertBefore(l, null), i.insertBefore(s, null), i.insertBefore(a, null), i;\n      };\n      t.push(\n        _tiptap_extension_collaboration_cursor__WEBPACK_IMPORTED_MODULE_3__[\"default\"].configure({\n          user: n.collaboration.user,\n          render: n.collaboration.renderCursor || o,\n          provider: n.collaboration.provider\n        })\n      );\n    }\n  } else\n    t.push(_tiptap_extension_history__WEBPACK_IMPORTED_MODULE_7__.History);\n  return t;\n};\nfunction ot(n, t) {\n  let e, o;\n  if (t.firstChild.descendants((r, i) => e ? !1 : r.type.name !== \"blockContainer\" || r.attrs.id !== n ? !0 : (e = r, o = i + 1, !1)), e === void 0 || o === void 0)\n    throw Error(\"Could not find block in the editor with matching ID.\");\n  return {\n    node: e,\n    posBeforeNode: o\n  };\n}\nfunction Ft(n, t, e = \"before\", o) {\n  const r = typeof t == \"string\" ? t : t.id, i = [];\n  for (const d of n)\n    i.push(F(d, o.schema));\n  let s = -1;\n  const { node: l, posBeforeNode: a } = ot(r, o.state.doc);\n  if (e === \"before\" && (s = a), e === \"after\" && (s = a + l.nodeSize), e === \"nested\") {\n    if (l.childCount < 2) {\n      s = a + l.firstChild.nodeSize + 1;\n      const d = o.state.schema.nodes.blockGroup.create(\n        {},\n        i\n      );\n      o.view.dispatch(\n        o.state.tr.insert(s, d)\n      );\n      return;\n    }\n    s = a + l.firstChild.nodeSize + 2;\n  }\n  o.view.dispatch(o.state.tr.insert(s, i));\n}\nfunction so(n, t, e) {\n  const o = typeof n == \"string\" ? n : n.id, { posBeforeNode: r } = ot(o, e.state.doc);\n  e.commands.BNUpdateBlock(r + 1, t);\n}\nfunction $t(n, t) {\n  const e = new Set(\n    n.map(\n      (r) => typeof r == \"string\" ? r : r.id\n    )\n  );\n  let o = 0;\n  if (t.state.doc.descendants((r, i) => {\n    if (e.size === 0)\n      return !1;\n    if (r.type.name !== \"blockContainer\" || !e.has(r.attrs.id))\n      return !0;\n    e.delete(r.attrs.id);\n    const s = t.state.doc.nodeSize;\n    t.commands.BNDeleteBlock(i - o + 1);\n    const l = t.state.doc.nodeSize;\n    return o += s - l, !1;\n  }), e.size > 0) {\n    const r = [...e].join(`\n`);\n    throw Error(\n      \"Blocks with the following IDs could not be found in the editor: \" + r\n    );\n  }\n}\nfunction ao(n, t, e) {\n  Ft(t, n[0], \"before\", e), $t(n, e);\n}\nfunction lo() {\n  const n = (t) => {\n    let e = t.children.length;\n    for (let o = 0; o < e; o++) {\n      const r = t.children[o];\n      if (r.type === \"element\" && (n(r), r.tagName === \"u\"))\n        if (r.children.length > 0) {\n          t.children.splice(o, 1, ...r.children);\n          const i = r.children.length - 1;\n          e += i, o += i;\n        } else\n          t.children.splice(o, 1), e--, o--;\n    }\n  };\n  return n;\n}\nfunction co(n) {\n  const t = /* @__PURE__ */ new Set([\n    ...n.orderedListItemBlockTypes,\n    ...n.unorderedListItemBlockTypes\n  ]), e = (o) => {\n    let r = o.children.length, i;\n    for (let s = 0; s < r; s++) {\n      const a = o.children[s].children[0], d = a.children[0], c = a.children.length === 2 ? a.children[1] : null, h = t.has(\n        d.properties.dataContentType\n      ), m = h ? n.orderedListItemBlockTypes.has(\n        d.properties.dataContentType\n      ) ? \"ol\" : \"ul\" : null;\n      if (c !== null && e(c), i && i.tagName !== m) {\n        o.children.splice(\n          s - i.children.length,\n          i.children.length,\n          i\n        );\n        const p = i.children.length - 1;\n        s -= p, r -= p, i = void 0;\n      }\n      if (h) {\n        i || (i = (0,hast_util_from_dom__WEBPACK_IMPORTED_MODULE_18__.fromDom)(\n          document.createElement(m)\n        ));\n        const p = (0,hast_util_from_dom__WEBPACK_IMPORTED_MODULE_18__.fromDom)(\n          document.createElement(\"li\")\n        );\n        p.children.push(d.children[0]), c !== null && p.children.push(...c.children), i.children.push(p);\n      } else if (c !== null) {\n        o.children.splice(s + 1, 0, ...c.children), o.children[s] = d.children[0];\n        const p = c.children.length;\n        s += p, r += p;\n      } else\n        o.children[s] = d.children[0];\n    }\n    i && o.children.splice(\n      r - i.children.length,\n      i.children.length,\n      i\n    );\n  };\n  return e;\n}\nasync function Wt(n, t) {\n  const e = document.createElement(\"div\"), o = prosemirror_model__WEBPACK_IMPORTED_MODULE_16__.DOMSerializer.fromSchema(t);\n  for (const i of n) {\n    const s = F(i, t), l = o.serializeNode(s);\n    e.appendChild(l);\n  }\n  return (await (0,unified__WEBPACK_IMPORTED_MODULE_19__.unified)().use(rehype_parse__WEBPACK_IMPORTED_MODULE_20__[\"default\"], { fragment: !0 }).use(co, {\n    orderedListItemBlockTypes: /* @__PURE__ */ new Set([\"numberedListItem\"]),\n    unorderedListItemBlockTypes: /* @__PURE__ */ new Set([\"bulletListItem\"])\n  }).use(rehype_stringify__WEBPACK_IMPORTED_MODULE_21__[\"default\"]).process(e.innerHTML)).value;\n}\nasync function Gt(n, t, e) {\n  const o = document.createElement(\"div\");\n  o.innerHTML = n.trim();\n  const i = prosemirror_model__WEBPACK_IMPORTED_MODULE_16__.DOMParser.fromSchema(e).parse(o), s = [];\n  for (let l = 0; l < i.firstChild.childCount; l++)\n    s.push(A(i.firstChild.child(l), t));\n  return s;\n}\nasync function uo(n, t) {\n  return (await (0,unified__WEBPACK_IMPORTED_MODULE_19__.unified)().use(rehype_parse__WEBPACK_IMPORTED_MODULE_20__[\"default\"], { fragment: !0 }).use(lo).use(rehype_remark__WEBPACK_IMPORTED_MODULE_22__[\"default\"]).use(remark_gfm__WEBPACK_IMPORTED_MODULE_23__[\"default\"]).use(remark_stringify__WEBPACK_IMPORTED_MODULE_24__[\"default\"]).process(await Wt(n, t))).value;\n}\nfunction po(n, t) {\n  const e = t.value ? t.value + `\n` : \"\", o = {};\n  t.lang && (o[\"data-language\"] = t.lang);\n  let r = {\n    type: \"element\",\n    tagName: \"code\",\n    properties: o,\n    children: [{ type: \"text\", value: e }]\n  };\n  return t.meta && (r.data = { meta: t.meta }), n.patch(t, r), r = n.applyData(t, r), r = {\n    type: \"element\",\n    tagName: \"pre\",\n    properties: {},\n    children: [r]\n  }, n.patch(t, r), r;\n}\nasync function ho(n, t, e) {\n  const o = await (0,unified__WEBPACK_IMPORTED_MODULE_19__.unified)().use(remark_parse__WEBPACK_IMPORTED_MODULE_25__[\"default\"]).use(remark_gfm__WEBPACK_IMPORTED_MODULE_23__[\"default\"]).use(remark_rehype__WEBPACK_IMPORTED_MODULE_26__[\"default\"], {\n    handlers: {\n      ...remark_rehype__WEBPACK_IMPORTED_MODULE_27__.handlers,\n      code: po\n    }\n  }).use(rehype_stringify__WEBPACK_IMPORTED_MODULE_21__[\"default\"]).process(n);\n  return Gt(o.value, t, e);\n}\nfunction ct(n) {\n  return \"data-\" + n.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\nfunction mo(n) {\n  const t = {};\n  return Object.entries(n.propSchema).forEach(([e, o]) => {\n    t[e] = {\n      default: o.default,\n      keepOnSplit: !0,\n      // Props are displayed in kebab-case as HTML attributes. If a prop's\n      // value is the same as its default, we don't display an HTML\n      // attribute for it.\n      parseHTML: (r) => {\n        const i = r.getAttribute(ct(e));\n        if (i === null)\n          return null;\n        if (typeof o.default == \"boolean\")\n          return i === \"true\" ? !0 : i === \"false\" ? !1 : null;\n        if (typeof o.default == \"number\") {\n          const s = parseFloat(i);\n          return !Number.isNaN(s) && Number.isFinite(s) ? s : null;\n        }\n        return i;\n      },\n      renderHTML: (r) => r[e] !== o.default ? {\n        [ct(e)]: r[e]\n      } : {}\n    };\n  }), t;\n}\nfunction fo(n) {\n  return [\n    {\n      tag: \"div[data-content-type=\" + n.type + \"]\"\n    }\n  ];\n}\nfunction go(n, t) {\n  const e = document.createElement(\"div\");\n  e.setAttribute(\"data-content-type\", n.type);\n  for (const [r, i] of Object.entries(t))\n    e.setAttribute(r, i);\n  let o;\n  return n.containsInlineContent ? (o = document.createElement(\"div\"), e.appendChild(o)) : o = void 0, o !== void 0 ? {\n    dom: e,\n    contentDOM: o\n  } : {\n    dom: e\n  };\n}\nfunction ko(n) {\n  return {\n    node: W({\n      name: n.type,\n      content: n.containsInlineContent ? \"inline*\" : \"\",\n      selectable: !0,\n      addAttributes() {\n        return mo(n);\n      },\n      parseHTML() {\n        return fo(n);\n      },\n      renderHTML({ HTMLAttributes: e }) {\n        return go(n, e);\n      },\n      addNodeView() {\n        return ({ HTMLAttributes: e, getPos: o }) => {\n          var p, f;\n          const r = document.createElement(\"div\"), i = ((p = this.options.domAttributes) == null ? void 0 : p.blockContent) || {};\n          for (const [b, w] of Object.entries(\n            i\n          ))\n            b !== \"class\" && r.setAttribute(b, w);\n          r.className = B(\n            k.blockContent,\n            i.class\n          ), r.setAttribute(\"data-content-type\", n.type);\n          for (const [b, w] of Object.entries(e))\n            r.setAttribute(b, w);\n          const s = this.options.editor;\n          if (typeof o == \"boolean\")\n            throw new Error(\n              \"Cannot find node position as getPos is a boolean, not a function.\"\n            );\n          const l = o(), c = s._tiptapEditor.state.doc.resolve(l).node().attrs.id, h = s.getBlock(c);\n          if (h.type !== n.type)\n            throw new Error(\"Block type does not match\");\n          const m = n.render(h, s);\n          if (n.containsInlineContent) {\n            const b = m.contentDOM, w = ((f = this.options.domAttributes) == null ? void 0 : f.inlineContent) || {};\n            for (const [C, M] of Object.entries(\n              w\n            ))\n              C !== \"class\" && b.setAttribute(C, M);\n            b.className = B(\n              b.className,\n              k.inlineContent,\n              w.class\n            );\n          }\n          return r.appendChild(m.dom), \"contentDOM\" in m ? {\n            dom: r,\n            contentDOM: m.contentDOM,\n            destroy: m.destroy\n          } : {\n            dom: r,\n            destroy: m.destroy\n          };\n        };\n      }\n    }),\n    propSchema: n.propSchema\n  };\n}\nfunction W(n) {\n  return _tiptap_core__WEBPACK_IMPORTED_MODULE_13__.Node.create({\n    ...n,\n    group: \"blockContent\",\n    content: n.content\n  });\n}\nconst bo = {\n  ...T,\n  level: { default: 1, values: [1, 2, 3] }\n}, yo = W({\n  name: \"heading\",\n  content: \"inline*\",\n  addAttributes() {\n    return {\n      level: {\n        default: 1,\n        // instead of \"level\" attributes, use \"data-level\"\n        parseHTML: (n) => n.getAttribute(\"data-level\"),\n        renderHTML: (n) => ({\n          \"data-level\": n.level.toString()\n        })\n      }\n    };\n  },\n  addInputRules() {\n    return [\n      ...[1, 2, 3].map((n) => new _tiptap_core__WEBPACK_IMPORTED_MODULE_13__.InputRule({\n        find: new RegExp(`^(#{${n}})\\\\s$`),\n        handler: ({ state: t, chain: e, range: o }) => {\n          e().BNUpdateBlock(t.selection.from, {\n            type: \"heading\",\n            props: {\n              level: n\n            }\n          }).deleteRange({ from: o.from, to: o.to });\n        }\n      }))\n    ];\n  },\n  addKeyboardShortcuts() {\n    return {\n      \"Mod-Alt-1\": () => this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n        type: \"heading\",\n        props: {\n          level: 1\n        }\n      }),\n      \"Mod-Alt-2\": () => this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n        type: \"heading\",\n        props: {\n          level: 2\n        }\n      }),\n      \"Mod-Alt-3\": () => this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n        type: \"heading\",\n        props: {\n          level: 3\n        }\n      })\n    };\n  },\n  parseHTML() {\n    return [\n      {\n        tag: \"h1\",\n        attrs: { level: 1 },\n        node: \"heading\"\n      },\n      {\n        tag: \"h2\",\n        attrs: { level: 2 },\n        node: \"heading\"\n      },\n      {\n        tag: \"h3\",\n        attrs: { level: 3 },\n        node: \"heading\"\n      }\n    ];\n  },\n  renderHTML({ node: n, HTMLAttributes: t }) {\n    var r, i;\n    const e = ((r = this.options.domAttributes) == null ? void 0 : r.blockContent) || {}, o = ((i = this.options.domAttributes) == null ? void 0 : i.inlineContent) || {};\n    return [\n      \"div\",\n      (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_13__.mergeAttributes)(t, {\n        ...e,\n        class: B(\n          k.blockContent,\n          e.class\n        ),\n        \"data-content-type\": this.name\n      }),\n      [\n        `h${n.attrs.level}`,\n        {\n          ...o,\n          class: B(\n            k.inlineContent,\n            o.class\n          )\n        },\n        0\n      ]\n    ];\n  }\n}), vo = {\n  node: yo,\n  propSchema: bo\n}, jt = (n) => {\n  const { node: t, contentType: e } = v(\n    n.state.doc,\n    n.state.selection.from\n  ), o = n.state.selection.anchor === n.state.selection.head;\n  return !e.name.endsWith(\"ListItem\") || !o ? !1 : n.commands.first(({ state: r, chain: i, commands: s }) => [\n    () => (\n      // Changes list item block to a text block if the content is empty.\n      s.command(() => t.textContent.length === 0 ? s.BNUpdateBlock(r.selection.from, {\n        type: \"paragraph\",\n        props: {}\n      }) : !1)\n    ),\n    () => (\n      // Splits the current block, moving content inside that's after the cursor to a new block of the same type\n      // below.\n      s.command(() => t.textContent.length > 0 ? (i().deleteSelection().BNSplitBlock(r.selection.from, !0).run(), !0) : !1)\n    )\n  ]);\n}, wo = {\n  ...T\n}, Co = W({\n  name: \"bulletListItem\",\n  content: \"inline*\",\n  addInputRules() {\n    return [\n      // Creates an unordered list when starting with \"-\", \"+\", or \"*\".\n      new _tiptap_core__WEBPACK_IMPORTED_MODULE_13__.InputRule({\n        find: new RegExp(\"^[-+*]\\\\s$\"),\n        handler: ({ state: n, chain: t, range: e }) => {\n          t().BNUpdateBlock(n.selection.from, {\n            type: \"bulletListItem\",\n            props: {}\n          }).deleteRange({ from: e.from, to: e.to });\n        }\n      })\n    ];\n  },\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => jt(this.editor),\n      \"Mod-Shift-7\": () => this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n        type: \"bulletListItem\",\n        props: {}\n      })\n    };\n  },\n  parseHTML() {\n    return [\n      // Case for regular HTML list structure.\n      {\n        tag: \"li\",\n        getAttrs: (n) => {\n          if (typeof n == \"string\")\n            return !1;\n          const t = n.parentElement;\n          return t === null ? !1 : t.tagName === \"UL\" ? {} : !1;\n        },\n        node: \"bulletListItem\"\n      },\n      // Case for BlockNote list structure.\n      {\n        tag: \"p\",\n        getAttrs: (n) => {\n          if (typeof n == \"string\")\n            return !1;\n          const t = n.parentElement;\n          return t === null ? !1 : t.getAttribute(\"data-content-type\") === \"bulletListItem\" ? {} : !1;\n        },\n        priority: 300,\n        node: \"bulletListItem\"\n      }\n    ];\n  },\n  renderHTML({ HTMLAttributes: n }) {\n    var o, r;\n    const t = ((o = this.options.domAttributes) == null ? void 0 : o.blockContent) || {}, e = ((r = this.options.domAttributes) == null ? void 0 : r.inlineContent) || {};\n    return [\n      \"div\",\n      (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_13__.mergeAttributes)(n, {\n        ...t,\n        class: B(\n          k.blockContent,\n          t.class\n        ),\n        \"data-content-type\": this.name\n      }),\n      [\n        \"p\",\n        {\n          ...e,\n          class: B(\n            k.inlineContent,\n            e.class\n          )\n        },\n        0\n      ]\n    ];\n  }\n}), Eo = {\n  node: Co,\n  propSchema: wo\n}, So = new prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.PluginKey(\"numbered-list-indexing\"), Mo = () => new prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.Plugin({\n  key: So,\n  appendTransaction: (n, t, e) => {\n    const o = e.tr;\n    o.setMeta(\"numberedListIndexing\", !0);\n    let r = !1;\n    return e.doc.descendants((i, s) => {\n      if (i.type.name === \"blockContainer\" && i.firstChild.type.name === \"numberedListItem\") {\n        let l = \"1\";\n        const a = s === 1, d = v(o.doc, s + 1);\n        if (d === void 0)\n          return;\n        if (!a) {\n          const m = v(o.doc, s - 2);\n          if (m === void 0)\n            return;\n          if (!(d.depth !== m.depth)) {\n            const f = m.contentNode;\n            if (m.contentType.name === \"numberedListItem\") {\n              const C = f.attrs.index;\n              l = (parseInt(C) + 1).toString();\n            }\n          }\n        }\n        d.contentNode.attrs.index !== l && (r = !0, o.setNodeMarkup(s + 1, void 0, {\n          index: l\n        }));\n      }\n    }), r ? o : null;\n  }\n}), To = {\n  ...T\n}, Bo = W({\n  name: \"numberedListItem\",\n  content: \"inline*\",\n  addAttributes() {\n    return {\n      index: {\n        default: null,\n        parseHTML: (n) => n.getAttribute(\"data-index\"),\n        renderHTML: (n) => ({\n          \"data-index\": n.index\n        })\n      }\n    };\n  },\n  addInputRules() {\n    return [\n      // Creates an ordered list when starting with \"1.\".\n      new _tiptap_core__WEBPACK_IMPORTED_MODULE_13__.InputRule({\n        find: new RegExp(\"^1\\\\.\\\\s$\"),\n        handler: ({ state: n, chain: t, range: e }) => {\n          t().BNUpdateBlock(n.selection.from, {\n            type: \"numberedListItem\",\n            props: {}\n          }).deleteRange({ from: e.from, to: e.to });\n        }\n      })\n    ];\n  },\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => jt(this.editor),\n      \"Mod-Shift-8\": () => this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n        type: \"numberedListItem\",\n        props: {}\n      })\n    };\n  },\n  addProseMirrorPlugins() {\n    return [Mo()];\n  },\n  parseHTML() {\n    return [\n      // Case for regular HTML list structure.\n      // (e.g.: when pasting from other apps)\n      {\n        tag: \"li\",\n        getAttrs: (n) => {\n          if (typeof n == \"string\")\n            return !1;\n          const t = n.parentElement;\n          return t === null ? !1 : t.tagName === \"OL\" ? {} : !1;\n        },\n        node: \"numberedListItem\"\n      },\n      // Case for BlockNote list structure.\n      // (e.g.: when pasting from blocknote)\n      {\n        tag: \"p\",\n        getAttrs: (n) => {\n          if (typeof n == \"string\")\n            return !1;\n          const t = n.parentElement;\n          return t === null ? !1 : t.getAttribute(\"data-content-type\") === \"numberedListItem\" ? {} : !1;\n        },\n        priority: 300,\n        node: \"numberedListItem\"\n      }\n    ];\n  },\n  renderHTML({ HTMLAttributes: n }) {\n    var o, r;\n    const t = ((o = this.options.domAttributes) == null ? void 0 : o.blockContent) || {}, e = ((r = this.options.domAttributes) == null ? void 0 : r.inlineContent) || {};\n    return [\n      \"div\",\n      (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_13__.mergeAttributes)(n, {\n        ...t,\n        class: B(\n          k.blockContent,\n          t.class\n        ),\n        \"data-content-type\": this.name\n      }),\n      // we use a <p> tag, because for <li> tags we'd need to add a <ul> parent for around siblings to be semantically correct,\n      // which would be quite cumbersome\n      [\n        \"p\",\n        {\n          ...e,\n          class: B(\n            k.inlineContent,\n            e.class\n          )\n        },\n        0\n      ]\n    ];\n  }\n}), xo = {\n  node: Bo,\n  propSchema: To\n}, Io = {\n  ...T\n}, _o = W({\n  name: \"paragraph\",\n  content: \"inline*\",\n  parseHTML() {\n    return [\n      {\n        tag: \"p\",\n        priority: 200,\n        node: \"paragraph\"\n      }\n    ];\n  },\n  renderHTML({ HTMLAttributes: n }) {\n    var o, r;\n    const t = ((o = this.options.domAttributes) == null ? void 0 : o.blockContent) || {}, e = ((r = this.options.domAttributes) == null ? void 0 : r.inlineContent) || {};\n    return [\n      \"div\",\n      (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_13__.mergeAttributes)(\n        {\n          ...t,\n          class: B(\n            k.blockContent,\n            t.class\n          ),\n          \"data-content-type\": this.name\n        },\n        n\n      ),\n      [\n        \"p\",\n        {\n          ...e,\n          class: B(\n            k.inlineContent,\n            e.class\n          )\n        },\n        0\n      ]\n    ];\n  }\n}), Ao = {\n  node: _o,\n  propSchema: Io\n};\nclass Ho {\n  constructor(t, e, o) {\n    u(this, \"imageToolbarState\");\n    u(this, \"updateImageToolbar\");\n    u(this, \"prevWasEditable\", null);\n    u(this, \"shouldShow\", (t) => \"node\" in t.selection && t.selection.node.type.name === \"image\" && t.selection.node.attrs.src === \"\");\n    u(this, \"mouseDownHandler\", () => {\n      var t;\n      (t = this.imageToolbarState) != null && t.show && (this.imageToolbarState.show = !1, this.updateImageToolbar());\n    });\n    // For dragging the whole editor.\n    u(this, \"dragstartHandler\", () => {\n      var t;\n      (t = this.imageToolbarState) != null && t.show && (this.imageToolbarState.show = !1, this.updateImageToolbar());\n    });\n    u(this, \"blurHandler\", (t) => {\n      var o;\n      const e = this.pmView.dom.parentElement;\n      // An element is clicked.\n      t && t.relatedTarget && // Element is inside the editor.\n      (e === t.relatedTarget || e.contains(t.relatedTarget)) || (o = this.imageToolbarState) != null && o.show && (this.imageToolbarState.show = !1, this.updateImageToolbar());\n    });\n    u(this, \"scrollHandler\", () => {\n      var t;\n      if ((t = this.imageToolbarState) != null && t.show) {\n        const e = document.querySelector(\n          `[data-node-type=\"blockContainer\"][data-id=\"${this.imageToolbarState.block.id}\"]`\n        );\n        this.imageToolbarState.referencePos = e.getBoundingClientRect(), this.updateImageToolbar();\n      }\n    });\n    this.pluginKey = t, this.pmView = e, this.updateImageToolbar = () => {\n      if (!this.imageToolbarState)\n        throw new Error(\"Attempting to update uninitialized image toolbar\");\n      o(this.imageToolbarState);\n    }, e.dom.addEventListener(\"mousedown\", this.mouseDownHandler), e.dom.addEventListener(\"dragstart\", this.dragstartHandler), e.dom.addEventListener(\"blur\", this.blurHandler), document.addEventListener(\"scroll\", this.scrollHandler);\n  }\n  update(t, e) {\n    var r, i;\n    const o = this.pluginKey.getState(t.state);\n    if (!((r = this.imageToolbarState) != null && r.show) && o.block) {\n      const s = document.querySelector(\n        `[data-node-type=\"blockContainer\"][data-id=\"${o.block.id}\"]`\n      );\n      this.imageToolbarState = {\n        show: !0,\n        referencePos: s.getBoundingClientRect(),\n        block: o.block\n      }, this.updateImageToolbar();\n      return;\n    }\n    (!t.state.selection.eq(e.selection) || !t.state.doc.eq(e.doc)) && (i = this.imageToolbarState) != null && i.show && (this.imageToolbarState.show = !1, this.updateImageToolbar());\n  }\n  destroy() {\n    this.pmView.dom.removeEventListener(\"mousedown\", this.mouseDownHandler), this.pmView.dom.removeEventListener(\"dragstart\", this.dragstartHandler), this.pmView.dom.removeEventListener(\"blur\", this.blurHandler), document.removeEventListener(\"scroll\", this.scrollHandler);\n  }\n}\nconst U = new prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.PluginKey(\"ImageToolbarPlugin\");\nclass Lo extends $ {\n  constructor(e) {\n    super();\n    u(this, \"view\");\n    u(this, \"plugin\");\n    this.plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.Plugin({\n      key: U,\n      view: (o) => (this.view = new Ho(\n        // editor,\n        U,\n        o,\n        (r) => {\n          this.emit(\"update\", r);\n        }\n      ), this.view),\n      state: {\n        init: () => ({\n          block: void 0\n        }),\n        apply: (o) => {\n          var i;\n          return {\n            block: (i = o.getMeta(U)) == null ? void 0 : i.block\n          };\n        }\n      }\n    });\n  }\n  onUpdate(e) {\n    return this.on(\"update\", e);\n  }\n}\nconst No = {\n  textAlignment: T.textAlignment,\n  backgroundColor: T.backgroundColor,\n  // Image url.\n  url: {\n    default: \"\"\n  },\n  // Image caption.\n  caption: {\n    default: \"\"\n  },\n  // Image width in px.\n  width: {\n    default: 512\n  }\n}, ut = (n) => {\n  switch (n) {\n    case \"left\":\n      return \"flex-start\";\n    case \"center\":\n      return \"center\";\n    case \"right\":\n      return \"flex-end\";\n    default:\n      return \"flex-start\";\n  }\n}, pt = 64, Po = (n, t) => {\n  const e = document.createElement(\"div\");\n  e.className = k.wrapper, e.style.alignItems = ut(\n    n.props.textAlignment\n  );\n  const o = document.createElement(\"div\");\n  o.className = k.addImageButton, o.style.display = n.props.url === \"\" ? \"\" : \"none\";\n  const r = document.createElement(\"div\");\n  r.className = k.addImageButtonIcon;\n  const i = document.createElement(\"p\");\n  i.className = k.addImageButtonText, i.innerText = \"Add Image\";\n  const s = document.createElement(\"div\");\n  s.className = k.imageAndCaptionWrapper, s.style.display = n.props.url !== \"\" ? \"\" : \"none\";\n  const l = document.createElement(\"div\");\n  l.className = k.imageWrapper, l.style.display = n.props.url !== \"\" ? \"\" : \"none\";\n  const a = document.createElement(\"img\");\n  a.className = k.image, a.src = n.props.url, a.alt = \"placeholder\", a.contentEditable = \"false\", a.draggable = !1, a.style.width = `${Math.min(\n    n.props.width,\n    t.domElement.firstElementChild.clientWidth\n  )}px`;\n  const d = document.createElement(\"div\");\n  d.className = k.resizeHandle, d.style.left = \"4px\";\n  const c = document.createElement(\"div\");\n  c.className = k.resizeHandle, c.style.right = \"4px\";\n  const h = document.createElement(\"p\");\n  h.className = k.caption, h.innerText = n.props.caption, h.style.padding = n.props.caption ? \"4px\" : \"\";\n  const m = () => {\n    var nt;\n    const g = ((nt = t.getSelection()) == null ? void 0 : nt.blocks) || [];\n    [t.getTextCursorPosition().block, ...g].find(\n      (Yt) => Yt.id === n.id\n    ) !== void 0 ? (o.style.outline = \"4px solid rgb(100, 160, 255)\", s.style.outline = \"4px solid rgb(100, 160, 255)\") : (o.style.outline = \"\", s.style.outline = \"\");\n  };\n  t.onEditorContentChange(m), t.onEditorSelectionChange(m);\n  let p;\n  const f = (g) => {\n    if (!p)\n      return;\n    let x;\n    ut(n.props.textAlignment) === \"center\" ? p.handleUsed === \"left\" ? x = p.initialWidth + (p.initialClientX - g.clientX) * 2 : x = p.initialWidth + (g.clientX - p.initialClientX) * 2 : p.handleUsed === \"left\" ? x = p.initialWidth + p.initialClientX - g.clientX : x = p.initialWidth + g.clientX - p.initialClientX, x < pt ? a.style.width = `${pt}px` : x > t.domElement.firstElementChild.clientWidth ? a.style.width = `${t.domElement.firstElementChild.clientWidth}px` : a.style.width = `${x}px`;\n  }, b = (g) => {\n    p && ((!g.target || !l.contains(g.target)) && l.contains(d) && l.contains(c) && (d.style.display = \"none\", c.style.display = \"none\"), p = void 0, t.updateBlock(n, {\n      type: \"image\",\n      props: {\n        // Removes \"px\" from the end of the width string and converts to float.\n        width: parseFloat(a.style.width.slice(0, -2))\n      }\n    }));\n  }, w = (g) => {\n    g.preventDefault();\n  }, C = () => {\n    t._tiptapEditor.view.dispatch(\n      t._tiptapEditor.state.tr.setMeta(U, {\n        block: n\n      })\n    );\n  }, M = () => {\n    t.isEditable ? (d.style.display = \"block\", c.style.display = \"block\") : (d.style.display = \"none\", c.style.display = \"none\");\n  }, E = (g) => {\n    g.relatedTarget === d || g.relatedTarget === c || p || (d.style.display = \"none\", c.style.display = \"none\");\n  }, y = (g) => {\n    g.preventDefault(), d.style.display = \"block\", c.style.display = \"block\", p = {\n      handleUsed: \"left\",\n      initialWidth: n.props.width,\n      initialClientX: g.clientX\n    };\n  }, S = (g) => {\n    g.preventDefault(), d.style.display = \"block\", c.style.display = \"block\", p = {\n      handleUsed: \"right\",\n      initialWidth: n.props.width,\n      initialClientX: g.clientX\n    };\n  };\n  return e.appendChild(o), o.appendChild(r), o.appendChild(i), e.appendChild(s), s.appendChild(l), l.appendChild(a), l.appendChild(d), l.appendChild(c), s.appendChild(h), window.addEventListener(\"mousemove\", f), window.addEventListener(\"mouseup\", b), o.addEventListener(\"mousedown\", w), o.addEventListener(\"click\", C), a.addEventListener(\"mouseenter\", M), a.addEventListener(\"mouseleave\", E), d.addEventListener(\n    \"mousedown\",\n    y\n  ), c.addEventListener(\n    \"mousedown\",\n    S\n  ), {\n    dom: e,\n    destroy: () => {\n      window.removeEventListener(\"mousemove\", f), window.removeEventListener(\"mouseup\", b), o.removeEventListener(\n        \"mousedown\",\n        w\n      ), o.removeEventListener(\"click\", C), d.removeEventListener(\n        \"mousedown\",\n        y\n      ), c.removeEventListener(\n        \"mousedown\",\n        S\n      );\n    }\n  };\n}, Do = ko({\n  type: \"image\",\n  propSchema: No,\n  containsInlineContent: !1,\n  render: Po\n}), qt = {\n  paragraph: Ao,\n  heading: vo,\n  bulletListItem: Eo,\n  numberedListItem: xo,\n  image: Do\n};\nclass Oo {\n  constructor(t, e, o) {\n    u(this, \"formattingToolbarState\");\n    u(this, \"updateFormattingToolbar\");\n    u(this, \"preventHide\", !1);\n    u(this, \"preventShow\", !1);\n    u(this, \"prevWasEditable\", null);\n    u(this, \"shouldShow\", ({ view: t, state: e, from: o, to: r }) => {\n      const { doc: i, selection: s } = e, { empty: l } = s, a = !i.textBetween(o, r).length && (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_13__.isTextSelection)(e.selection);\n      return !(!t.hasFocus() || l || a);\n    });\n    u(this, \"viewMousedownHandler\", () => {\n      this.preventShow = !0;\n    });\n    u(this, \"viewMouseupHandler\", () => {\n      this.preventShow = !1, setTimeout(() => this.update(this.pmView));\n    });\n    // For dragging the whole editor.\n    u(this, \"dragstartHandler\", () => {\n      var t;\n      (t = this.formattingToolbarState) != null && t.show && (this.formattingToolbarState.show = !1, this.updateFormattingToolbar());\n    });\n    u(this, \"focusHandler\", () => {\n      setTimeout(() => this.update(this.pmView));\n    });\n    u(this, \"blurHandler\", (t) => {\n      var o;\n      if (this.preventHide) {\n        this.preventHide = !1;\n        return;\n      }\n      const e = this.pmView.dom.parentElement;\n      // An element is clicked.\n      t && t.relatedTarget && // Element is inside the editor.\n      (e === t.relatedTarget || e.contains(t.relatedTarget)) || (o = this.formattingToolbarState) != null && o.show && (this.formattingToolbarState.show = !1, this.updateFormattingToolbar());\n    });\n    u(this, \"scrollHandler\", () => {\n      var t;\n      (t = this.formattingToolbarState) != null && t.show && (this.formattingToolbarState.referencePos = this.getSelectionBoundingBox(), this.updateFormattingToolbar());\n    });\n    this.editor = t, this.pmView = e, this.updateFormattingToolbar = () => {\n      if (!this.formattingToolbarState)\n        throw new Error(\n          \"Attempting to update uninitialized formatting toolbar\"\n        );\n      o(this.formattingToolbarState);\n    }, e.dom.addEventListener(\"mousedown\", this.viewMousedownHandler), e.dom.addEventListener(\"mouseup\", this.viewMouseupHandler), e.dom.addEventListener(\"dragstart\", this.dragstartHandler), e.dom.addEventListener(\"focus\", this.focusHandler), e.dom.addEventListener(\"blur\", this.blurHandler), document.addEventListener(\"scroll\", this.scrollHandler);\n  }\n  update(t, e) {\n    var m, p;\n    const { state: o, composing: r } = t, { doc: i, selection: s } = o, l = e && e.doc.eq(i) && e.selection.eq(s);\n    if ((this.prevWasEditable === null || this.prevWasEditable === this.editor.isEditable) && (r || l))\n      return;\n    this.prevWasEditable = this.editor.isEditable;\n    const { ranges: a } = s, d = Math.min(...a.map((f) => f.$from.pos)), c = Math.max(...a.map((f) => f.$to.pos)), h = (m = this.shouldShow) == null ? void 0 : m.call(this, {\n      view: t,\n      state: o,\n      from: d,\n      to: c\n    });\n    if (this.editor.isEditable && !this.preventShow && (h || this.preventHide)) {\n      this.formattingToolbarState = {\n        show: !0,\n        referencePos: this.getSelectionBoundingBox()\n      }, this.updateFormattingToolbar();\n      return;\n    }\n    if ((p = this.formattingToolbarState) != null && p.show && !this.preventHide && (!h || this.preventShow || !this.editor.isEditable)) {\n      this.formattingToolbarState.show = !1, this.updateFormattingToolbar();\n      return;\n    }\n  }\n  destroy() {\n    this.pmView.dom.removeEventListener(\"mousedown\", this.viewMousedownHandler), this.pmView.dom.removeEventListener(\"mouseup\", this.viewMouseupHandler), this.pmView.dom.removeEventListener(\"dragstart\", this.dragstartHandler), this.pmView.dom.removeEventListener(\"focus\", this.focusHandler), this.pmView.dom.removeEventListener(\"blur\", this.blurHandler), document.removeEventListener(\"scroll\", this.scrollHandler);\n  }\n  getSelectionBoundingBox() {\n    const { state: t } = this.pmView, { selection: e } = t, { ranges: o } = e, r = Math.min(...o.map((s) => s.$from.pos)), i = Math.max(...o.map((s) => s.$to.pos));\n    if ((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_13__.isNodeSelection)(e)) {\n      const s = this.pmView.nodeDOM(r);\n      if (s)\n        return s.getBoundingClientRect();\n    }\n    return (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_13__.posToDOMRect)(this.pmView, r, i);\n  }\n}\nconst Ro = new prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.PluginKey(\n  \"FormattingToolbarPlugin\"\n);\nclass zo extends $ {\n  constructor(e) {\n    super();\n    u(this, \"view\");\n    u(this, \"plugin\");\n    this.plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.Plugin({\n      key: Ro,\n      view: (o) => (this.view = new Oo(e, o, (r) => {\n        this.emit(\"update\", r);\n      }), this.view)\n    });\n  }\n  onUpdate(e) {\n    return this.on(\"update\", e);\n  }\n}\nclass Vo {\n  constructor(t, e, o) {\n    u(this, \"hyperlinkToolbarState\");\n    u(this, \"updateHyperlinkToolbar\");\n    u(this, \"menuUpdateTimer\");\n    u(this, \"startMenuUpdateTimer\");\n    u(this, \"stopMenuUpdateTimer\");\n    u(this, \"mouseHoveredHyperlinkMark\");\n    u(this, \"mouseHoveredHyperlinkMarkRange\");\n    u(this, \"keyboardHoveredHyperlinkMark\");\n    u(this, \"keyboardHoveredHyperlinkMarkRange\");\n    u(this, \"hyperlinkMark\");\n    u(this, \"hyperlinkMarkRange\");\n    u(this, \"mouseOverHandler\", (t) => {\n      if (this.mouseHoveredHyperlinkMark = void 0, this.mouseHoveredHyperlinkMarkRange = void 0, this.stopMenuUpdateTimer(), t.target instanceof HTMLAnchorElement && t.target.nodeName === \"A\") {\n        const e = t.target, o = this.pmView.posAtDOM(e, 0) + 1, r = this.pmView.state.doc.resolve(\n          o\n        ), i = r.marks();\n        for (const s of i)\n          if (s.type.name === this.pmView.state.schema.mark(\"link\").type.name) {\n            this.mouseHoveredHyperlinkMark = s, this.mouseHoveredHyperlinkMarkRange = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_13__.getMarkRange)(\n              r,\n              s.type,\n              s.attrs\n            ) || void 0;\n            break;\n          }\n      }\n      return this.startMenuUpdateTimer(), !1;\n    });\n    u(this, \"clickHandler\", (t) => {\n      var o;\n      const e = this.pmView.dom.parentElement;\n      // Toolbar is open.\n      this.hyperlinkMark && // An element is clicked.\n      t && t.target && // The clicked element is not the editor.\n      !(e === t.target || e.contains(t.target)) && (o = this.hyperlinkToolbarState) != null && o.show && (this.hyperlinkToolbarState.show = !1, this.updateHyperlinkToolbar());\n    });\n    u(this, \"scrollHandler\", () => {\n      var t;\n      this.hyperlinkMark !== void 0 && (t = this.hyperlinkToolbarState) != null && t.show && (this.hyperlinkToolbarState.referencePos = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_13__.posToDOMRect)(\n        this.pmView,\n        this.hyperlinkMarkRange.from,\n        this.hyperlinkMarkRange.to\n      ), this.updateHyperlinkToolbar());\n    });\n    this.editor = t, this.pmView = e, this.updateHyperlinkToolbar = () => {\n      if (!this.hyperlinkToolbarState)\n        throw new Error(\"Attempting to update uninitialized hyperlink toolbar\");\n      o(this.hyperlinkToolbarState);\n    }, this.startMenuUpdateTimer = () => {\n      this.menuUpdateTimer = setTimeout(() => {\n        this.update();\n      }, 250);\n    }, this.stopMenuUpdateTimer = () => (this.menuUpdateTimer && (clearTimeout(this.menuUpdateTimer), this.menuUpdateTimer = void 0), !1), this.pmView.dom.addEventListener(\"mouseover\", this.mouseOverHandler), document.addEventListener(\"click\", this.clickHandler, !0), document.addEventListener(\"scroll\", this.scrollHandler);\n  }\n  editHyperlink(t, e) {\n    var r;\n    const o = this.pmView.state.tr.insertText(\n      e,\n      this.hyperlinkMarkRange.from,\n      this.hyperlinkMarkRange.to\n    );\n    o.addMark(\n      this.hyperlinkMarkRange.from,\n      this.hyperlinkMarkRange.from + e.length,\n      this.pmView.state.schema.mark(\"link\", { href: t })\n    ), this.pmView.dispatch(o), this.pmView.focus(), (r = this.hyperlinkToolbarState) != null && r.show && (this.hyperlinkToolbarState.show = !1, this.updateHyperlinkToolbar());\n  }\n  deleteHyperlink() {\n    var t;\n    this.pmView.dispatch(\n      this.pmView.state.tr.removeMark(\n        this.hyperlinkMarkRange.from,\n        this.hyperlinkMarkRange.to,\n        this.hyperlinkMark.type\n      ).setMeta(\"preventAutolink\", !0)\n    ), this.pmView.focus(), (t = this.hyperlinkToolbarState) != null && t.show && (this.hyperlinkToolbarState.show = !1, this.updateHyperlinkToolbar());\n  }\n  update() {\n    var e;\n    if (!this.pmView.hasFocus())\n      return;\n    const t = this.hyperlinkMark;\n    if (this.hyperlinkMark = void 0, this.hyperlinkMarkRange = void 0, this.keyboardHoveredHyperlinkMark = void 0, this.keyboardHoveredHyperlinkMarkRange = void 0, this.pmView.state.selection.empty) {\n      const o = this.pmView.state.selection.$from.marks();\n      for (const r of o)\n        if (r.type.name === this.pmView.state.schema.mark(\"link\").type.name) {\n          this.keyboardHoveredHyperlinkMark = r, this.keyboardHoveredHyperlinkMarkRange = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_13__.getMarkRange)(\n            this.pmView.state.selection.$from,\n            r.type,\n            r.attrs\n          ) || void 0;\n          break;\n        }\n    }\n    if (this.mouseHoveredHyperlinkMark && (this.hyperlinkMark = this.mouseHoveredHyperlinkMark, this.hyperlinkMarkRange = this.mouseHoveredHyperlinkMarkRange), this.keyboardHoveredHyperlinkMark && (this.hyperlinkMark = this.keyboardHoveredHyperlinkMark, this.hyperlinkMarkRange = this.keyboardHoveredHyperlinkMarkRange), this.hyperlinkMark && this.editor.isEditable) {\n      this.hyperlinkToolbarState = {\n        show: !0,\n        referencePos: (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_13__.posToDOMRect)(\n          this.pmView,\n          this.hyperlinkMarkRange.from,\n          this.hyperlinkMarkRange.to\n        ),\n        url: this.hyperlinkMark.attrs.href,\n        text: this.pmView.state.doc.textBetween(\n          this.hyperlinkMarkRange.from,\n          this.hyperlinkMarkRange.to\n        )\n      }, this.updateHyperlinkToolbar();\n      return;\n    }\n    if ((e = this.hyperlinkToolbarState) != null && e.show && t && (!this.hyperlinkMark || !this.editor.isEditable)) {\n      this.hyperlinkToolbarState.show = !1, this.updateHyperlinkToolbar();\n      return;\n    }\n  }\n  destroy() {\n    this.pmView.dom.removeEventListener(\"mouseover\", this.mouseOverHandler), document.removeEventListener(\"scroll\", this.scrollHandler), document.removeEventListener(\"click\", this.clickHandler, !0);\n  }\n}\nconst Uo = new prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.PluginKey(\n  \"HyperlinkToolbarPlugin\"\n);\nclass Fo extends $ {\n  constructor(e) {\n    super();\n    u(this, \"view\");\n    u(this, \"plugin\");\n    /**\n     * Edit the currently hovered hyperlink.\n     */\n    u(this, \"editHyperlink\", (e, o) => {\n      this.view.editHyperlink(e, o);\n    });\n    /**\n     * Delete the currently hovered hyperlink.\n     */\n    u(this, \"deleteHyperlink\", () => {\n      this.view.deleteHyperlink();\n    });\n    /**\n     * When hovering on/off hyperlinks using the mouse cursor, the hyperlink\n     * toolbar will open & close with a delay.\n     *\n     * This function starts the delay timer, and should be used for when the mouse cursor enters the hyperlink toolbar.\n     */\n    u(this, \"startHideTimer\", () => {\n      this.view.startMenuUpdateTimer();\n    });\n    /**\n     * When hovering on/off hyperlinks using the mouse cursor, the hyperlink\n     * toolbar will open & close with a delay.\n     *\n     * This function stops the delay timer, and should be used for when the mouse cursor exits the hyperlink toolbar.\n     */\n    u(this, \"stopHideTimer\", () => {\n      this.view.stopMenuUpdateTimer();\n    });\n    this.plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.Plugin({\n      key: Uo,\n      view: (o) => (this.view = new Vo(e, o, (r) => {\n        this.emit(\"update\", r);\n      }), this.view)\n    });\n  }\n  onUpdate(e) {\n    return this.on(\"update\", e);\n  }\n}\nclass z extends prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.Selection {\n  constructor(e, o) {\n    super(e, o);\n    u(this, \"nodes\");\n    const r = e.node();\n    this.nodes = [], e.doc.nodesBetween(e.pos, o.pos, (i, s, l) => {\n      if (l !== null && l.eq(r))\n        return this.nodes.push(i), !1;\n    });\n  }\n  static create(e, o, r = o) {\n    return new z(e.resolve(o), e.resolve(r));\n  }\n  content() {\n    return new prosemirror_model__WEBPACK_IMPORTED_MODULE_16__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_16__.Fragment.from(this.nodes), 0, 0);\n  }\n  eq(e) {\n    if (!(e instanceof z) || this.nodes.length !== e.nodes.length || this.from !== e.from || this.to !== e.to)\n      return !1;\n    for (let o = 0; o < this.nodes.length; o++)\n      if (!this.nodes[o].eq(e.nodes[o]))\n        return !1;\n    return !0;\n  }\n  map(e, o) {\n    const r = o.mapResult(this.from), i = o.mapResult(this.to);\n    return i.deleted ? prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.Selection.near(e.resolve(r.pos)) : r.deleted ? prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.Selection.near(e.resolve(i.pos)) : new z(\n      e.resolve(r.pos),\n      e.resolve(i.pos)\n    );\n  }\n  toJSON() {\n    return { type: \"node\", anchor: this.anchor, head: this.head };\n  }\n}\nconst $o = prosemirror_view__WEBPACK_IMPORTED_MODULE_17__.__serializeForClipboard;\nlet H;\nfunction Xt(n, t) {\n  var r;\n  if (!t.dom.isConnected)\n    return;\n  const e = t.posAtCoords(n);\n  if (!e)\n    return;\n  let o = t.domAtPos(e.pos).node;\n  if (o !== t.dom) {\n    for (; o && o.parentNode && o.parentNode !== t.dom && !((r = o.hasAttribute) != null && r.call(o, \"data-id\")); )\n      o = o.parentNode;\n    if (o)\n      return { node: o, id: o.getAttribute(\"data-id\") };\n  }\n}\nfunction Wo(n, t) {\n  const e = Xt(n, t);\n  if (e && e.node.nodeType === 1) {\n    const o = t.docView, r = o.nearestDesc(e.node, !0);\n    return !r || r === o ? null : r.posBefore;\n  }\n  return null;\n}\nfunction Go(n, t) {\n  let e, o;\n  const r = t.resolve(n.from).node().type.spec.group === \"blockContent\", i = t.resolve(n.to).node().type.spec.group === \"blockContent\", s = Math.min(n.$anchor.depth, n.$head.depth);\n  if (r && i) {\n    const l = n.$from.start(s - 1), a = n.$to.end(s - 1);\n    e = t.resolve(l - 1).pos, o = t.resolve(a + 1).pos;\n  } else\n    e = n.from, o = n.to;\n  return { from: e, to: o };\n}\nfunction ht(n, t, e = t) {\n  t === e && (e += n.state.doc.resolve(t + 1).node().nodeSize);\n  const o = n.domAtPos(t).node.cloneNode(!0), r = n.domAtPos(t).node, i = (c, h) => Array.prototype.indexOf.call(c.children, h), s = i(\n    r,\n    // Expects from position to be just before the first selected block.\n    n.domAtPos(t + 1).node.parentElement\n  ), l = i(\n    r,\n    // Expects to position to be just after the last selected block.\n    n.domAtPos(e - 1).node.parentElement\n  );\n  for (let c = r.childElementCount - 1; c >= 0; c--)\n    (c > l || c < s) && o.removeChild(o.children[c]);\n  Kt(), H = o;\n  const d = n.dom.className.split(\" \").filter(\n    (c) => !c.includes(\"bn\") && !c.includes(\"ProseMirror\") && !c.includes(\"editor\")\n  ).join(\" \");\n  H.className = H.className + \" \" + R.dragPreview + \" \" + d, document.body.appendChild(H);\n}\nfunction Kt() {\n  H !== void 0 && (document.body.removeChild(H), H = void 0);\n}\nfunction jo(n, t) {\n  if (!n.dataTransfer)\n    return;\n  const e = t.dom.getBoundingClientRect(), o = {\n    left: e.left + e.width / 2,\n    // take middle of editor\n    top: n.clientY\n  }, r = Wo(o, t);\n  if (r != null) {\n    const i = t.state.selection, s = t.state.doc, { from: l, to: a } = Go(i, s), d = l <= r && r < a, c = i.$anchor.node() !== i.$head.node() || i instanceof z;\n    d && c ? (t.dispatch(\n      t.state.tr.setSelection(z.create(s, l, a))\n    ), ht(t, l, a)) : (t.dispatch(\n      t.state.tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.NodeSelection.create(t.state.doc, r))\n    ), ht(t, r));\n    const h = t.state.selection.content(), { dom: m, text: p } = $o(t, h);\n    n.dataTransfer.clearData(), n.dataTransfer.setData(\"text/html\", m.innerHTML), n.dataTransfer.setData(\"text/plain\", p), n.dataTransfer.effectAllowed = \"move\", n.dataTransfer.setDragImage(H, 0, 0), t.dragging = { slice: h, move: !0 };\n  }\n}\nclass qo {\n  constructor(t, e, o) {\n    u(this, \"sideMenuState\");\n    // When true, the drag handle with be anchored at the same level as root elements\n    // When false, the drag handle with be just to the left of the element\n    // TODO: Is there any case where we want this to be false?\n    u(this, \"horizontalPosAnchoredAtRoot\");\n    u(this, \"horizontalPosAnchor\");\n    u(this, \"hoveredBlock\");\n    // Used to check if currently dragged content comes from this editor instance.\n    u(this, \"isDragging\", !1);\n    u(this, \"menuFrozen\", !1);\n    /**\n     * Sets isDragging when dragging text.\n     */\n    u(this, \"onDragStart\", () => {\n      this.isDragging = !0;\n    });\n    /**\n     * If the event is outside the editor contents,\n     * we dispatch a fake event, so that we can still drop the content\n     * when dragging / dropping to the side of the editor\n     */\n    u(this, \"onDrop\", (t) => {\n      if (this.editor._tiptapEditor.commands.blur(), t.synthetic || !this.isDragging)\n        return;\n      const e = this.pmView.posAtCoords({\n        left: t.clientX,\n        top: t.clientY\n      });\n      if (this.isDragging = !1, !e || e.inside === -1) {\n        const o = new Event(\"drop\", t), r = this.pmView.dom.firstChild.getBoundingClientRect();\n        o.clientX = r.left + r.width / 2, o.clientY = t.clientY, o.dataTransfer = t.dataTransfer, o.preventDefault = () => t.preventDefault(), o.synthetic = !0, this.pmView.dom.dispatchEvent(o);\n      }\n    });\n    /**\n     * If the event is outside the editor contents,\n     * we dispatch a fake event, so that we can still drop the content\n     * when dragging / dropping to the side of the editor\n     */\n    u(this, \"onDragOver\", (t) => {\n      if (t.synthetic || !this.isDragging)\n        return;\n      const e = this.pmView.posAtCoords({\n        left: t.clientX,\n        top: t.clientY\n      });\n      if (!e || e.inside === -1) {\n        const o = new Event(\"dragover\", t), r = this.pmView.dom.firstChild.getBoundingClientRect();\n        o.clientX = r.left + r.width / 2, o.clientY = t.clientY, o.dataTransfer = t.dataTransfer, o.preventDefault = () => t.preventDefault(), o.synthetic = !0, this.pmView.dom.dispatchEvent(o);\n      }\n    });\n    u(this, \"onKeyDown\", (t) => {\n      var e;\n      (e = this.sideMenuState) != null && e.show && (this.sideMenuState.show = !1, this.updateSideMenu(this.sideMenuState)), this.menuFrozen = !1;\n    });\n    u(this, \"onMouseDown\", (t) => {\n      this.sideMenuState && !this.sideMenuState.show && (this.sideMenuState.show = !0, this.updateSideMenu(this.sideMenuState)), this.menuFrozen = !1;\n    });\n    u(this, \"onMouseMove\", (t) => {\n      var d, c, h, m, p;\n      if (this.menuFrozen)\n        return;\n      const e = this.pmView.dom.firstChild.getBoundingClientRect(), o = this.pmView.dom.getBoundingClientRect(), r = t.clientX >= o.left && t.clientX <= o.right && t.clientY >= o.top && t.clientY <= o.bottom, i = this.pmView.dom.parentElement;\n      if (\n        // Cursor is within the editor area\n        r && // An element is hovered\n        t && t.target && // Element is outside the editor\n        !(i === t.target || i.contains(t.target))\n      ) {\n        (d = this.sideMenuState) != null && d.show && (this.sideMenuState.show = !1, this.updateSideMenu(this.sideMenuState));\n        return;\n      }\n      this.horizontalPosAnchor = e.x;\n      const s = {\n        left: e.left + e.width / 2,\n        // take middle of editor\n        top: t.clientY\n      }, l = Xt(s, this.pmView);\n      if (!l || !this.editor.isEditable) {\n        (c = this.sideMenuState) != null && c.show && (this.sideMenuState.show = !1, this.updateSideMenu(this.sideMenuState));\n        return;\n      }\n      if ((h = this.sideMenuState) != null && h.show && ((m = this.hoveredBlock) != null && m.hasAttribute(\"data-id\")) && ((p = this.hoveredBlock) == null ? void 0 : p.getAttribute(\"data-id\")) === l.id)\n        return;\n      this.hoveredBlock = l.node;\n      const a = l.node.firstChild;\n      if (a && this.editor.isEditable) {\n        const f = a.getBoundingClientRect();\n        this.sideMenuState = {\n          show: !0,\n          referencePos: new DOMRect(\n            this.horizontalPosAnchoredAtRoot ? this.horizontalPosAnchor : f.x,\n            f.y,\n            f.width,\n            f.height\n          ),\n          block: this.editor.getBlock(\n            this.hoveredBlock.getAttribute(\"data-id\")\n          )\n        }, this.updateSideMenu(this.sideMenuState);\n      }\n    });\n    u(this, \"onScroll\", () => {\n      var t;\n      if ((t = this.sideMenuState) != null && t.show) {\n        const o = this.hoveredBlock.firstChild.getBoundingClientRect();\n        this.sideMenuState.referencePos = new DOMRect(\n          this.horizontalPosAnchoredAtRoot ? this.horizontalPosAnchor : o.x,\n          o.y,\n          o.width,\n          o.height\n        ), this.updateSideMenu(this.sideMenuState);\n      }\n    });\n    this.editor = t, this.pmView = e, this.updateSideMenu = o, this.horizontalPosAnchoredAtRoot = !0, this.horizontalPosAnchor = this.pmView.dom.firstChild.getBoundingClientRect().x, document.body.addEventListener(\"drop\", this.onDrop, !0), document.body.addEventListener(\"dragover\", this.onDragOver), this.pmView.dom.addEventListener(\"dragstart\", this.onDragStart), document.body.addEventListener(\"mousemove\", this.onMouseMove, !0), document.addEventListener(\"scroll\", this.onScroll), document.body.addEventListener(\"mousedown\", this.onMouseDown, !0), document.body.addEventListener(\"keydown\", this.onKeyDown, !0);\n  }\n  destroy() {\n    var t;\n    (t = this.sideMenuState) != null && t.show && (this.sideMenuState.show = !1, this.updateSideMenu(this.sideMenuState)), document.body.removeEventListener(\"mousemove\", this.onMouseMove), document.body.removeEventListener(\"dragover\", this.onDragOver), this.pmView.dom.removeEventListener(\"dragstart\", this.onDragStart), document.body.removeEventListener(\"drop\", this.onDrop, !0), document.removeEventListener(\"scroll\", this.onScroll), document.body.removeEventListener(\"mousedown\", this.onMouseDown, !0), document.body.removeEventListener(\"keydown\", this.onKeyDown, !0);\n  }\n  addBlock() {\n    var l;\n    (l = this.sideMenuState) != null && l.show && (this.sideMenuState.show = !1, this.updateSideMenu(this.sideMenuState)), this.menuFrozen = !0;\n    const e = this.hoveredBlock.firstChild.getBoundingClientRect(), o = this.pmView.posAtCoords({\n      left: e.left + e.width / 2,\n      top: e.top + e.height / 2\n    });\n    if (!o)\n      return;\n    const r = v(\n      this.editor._tiptapEditor.state.doc,\n      o.pos\n    );\n    if (r === void 0)\n      return;\n    const { contentNode: i, endPos: s } = r;\n    if (i.textContent.length !== 0) {\n      const a = s + 1, d = a + 2;\n      this.editor._tiptapEditor.chain().BNCreateBlock(a).BNUpdateBlock(d, { type: \"paragraph\", props: {} }).setTextSelection(d).run();\n    } else\n      this.editor._tiptapEditor.commands.setTextSelection(s);\n    this.pmView.focus(), this.pmView.dispatch(\n      this.pmView.state.tr.scrollIntoView().setMeta(et, {\n        // TODO import suggestion plugin key\n        activate: !0,\n        type: \"drag\"\n      })\n    );\n  }\n}\nconst Xo = new prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.PluginKey(\"SideMenuPlugin\");\nclass Ko extends $ {\n  constructor(e) {\n    super();\n    u(this, \"sideMenuView\");\n    u(this, \"plugin\");\n    /**\n     * If the block is empty, opens the slash menu. If the block has content,\n     * creates a new block below and opens the slash menu in it.\n     */\n    u(this, \"addBlock\", () => this.sideMenuView.addBlock());\n    /**\n     * Handles drag & drop events for blocks.\n     */\n    u(this, \"blockDragStart\", (e) => {\n      this.sideMenuView.isDragging = !0, jo(e, this.editor.prosemirrorView);\n    });\n    /**\n     * Handles drag & drop events for blocks.\n     */\n    u(this, \"blockDragEnd\", () => Kt());\n    /**\n     * Freezes the side menu. When frozen, the side menu will stay\n     * attached to the same block regardless of which block is hovered by the\n     * mouse cursor.\n     */\n    u(this, \"freezeMenu\", () => this.sideMenuView.menuFrozen = !0);\n    /**\n     * Unfreezes the side menu. When frozen, the side menu will stay\n     * attached to the same block regardless of which block is hovered by the\n     * mouse cursor.\n     */\n    u(this, \"unfreezeMenu\", () => this.sideMenuView.menuFrozen = !1);\n    this.editor = e, this.plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_15__.Plugin({\n      key: Xo,\n      view: (o) => (this.sideMenuView = new qo(\n        e,\n        o,\n        (r) => {\n          this.emit(\"update\", r);\n        }\n      ), this.sideMenuView)\n    });\n  }\n  onUpdate(e) {\n    return this.on(\"update\", e);\n  }\n}\nfunction N(n, t) {\n  const e = n.getTextCursorPosition().block;\n  if (e.content === void 0)\n    throw new Error(\n      \"Slash Menu open in a block that doesn't contain inline content.\"\n    );\n  e.content.length === 1 && e.content[0].type === \"text\" && e.content[0].text === \"/\" || e.content.length === 0 ? n.updateBlock(e, t) : (n.insertBlocks([t], e, \"after\"), n.setTextCursorPosition(n.getTextCursorPosition().nextBlock));\n}\nconst Yo = (n = qt) => {\n  var e, o, r;\n  const t = [];\n  return \"heading\" in n && \"level\" in n.heading.propSchema && ((e = n.heading.propSchema.level.values) != null && e.includes(1) && t.push({\n    name: \"Heading\",\n    aliases: [\"h\", \"heading1\", \"h1\"],\n    execute: (i) => N(i, {\n      type: \"heading\",\n      props: { level: 1 }\n    })\n  }), (o = n.heading.propSchema.level.values) != null && o.includes(2) && t.push({\n    name: \"Heading 2\",\n    aliases: [\"h2\", \"heading2\", \"subheading\"],\n    execute: (i) => N(i, {\n      type: \"heading\",\n      props: { level: 2 }\n    })\n  }), (r = n.heading.propSchema.level.values) != null && r.includes(3) && t.push({\n    name: \"Heading 3\",\n    aliases: [\"h3\", \"heading3\", \"subheading\"],\n    execute: (i) => N(i, {\n      type: \"heading\",\n      props: { level: 3 }\n    })\n  })), \"bulletListItem\" in n && t.push({\n    name: \"Bullet List\",\n    aliases: [\"ul\", \"list\", \"bulletlist\", \"bullet list\"],\n    execute: (i) => N(i, {\n      type: \"bulletListItem\"\n    })\n  }), \"numberedListItem\" in n && t.push({\n    name: \"Numbered List\",\n    aliases: [\"li\", \"list\", \"numberedlist\", \"numbered list\"],\n    execute: (i) => N(i, {\n      type: \"numberedListItem\"\n    })\n  }), \"paragraph\" in n && t.push({\n    name: \"Paragraph\",\n    aliases: [\"p\"],\n    execute: (i) => N(i, {\n      type: \"paragraph\"\n    })\n  }), \"image\" in n && t.push({\n    name: \"Image\",\n    aliases: [\n      \"image\",\n      \"imageUpload\",\n      \"upload\",\n      \"img\",\n      \"picture\",\n      \"media\",\n      \"url\",\n      \"drive\",\n      \"dropbox\"\n    ],\n    execute: (i) => {\n      N(i, {\n        type: \"image\"\n      }), i.setTextCursorPosition(\n        i.getTextCursorPosition().nextBlock,\n        \"start\"\n      ), i._tiptapEditor.view.dispatch(\n        i._tiptapEditor.state.tr.setMeta(U, {\n          block: i.getTextCursorPosition().prevBlock\n        })\n      );\n    }\n  }), t;\n}, Jo = {\n  enableInputRules: !0,\n  enablePasteRules: !0,\n  enableCoreExtensions: !1\n};\nclass _n {\n  constructor(t = {}) {\n    u(this, \"_tiptapEditor\");\n    u(this, \"blockCache\", /* @__PURE__ */ new WeakMap());\n    u(this, \"schema\");\n    u(this, \"ready\", !1);\n    u(this, \"sideMenu\");\n    u(this, \"formattingToolbar\");\n    u(this, \"slashMenu\");\n    u(this, \"hyperlinkToolbar\");\n    u(this, \"imageToolbar\");\n    u(this, \"uploadFile\");\n    var l, a, d, c, h, m, p, f, b, w, C, M;\n    this.options = t;\n    const e = {\n      defaultStyles: !0,\n      // TODO: There's a lot of annoying typing stuff to deal with here. If\n      //  BSchema is specified, then options.blockSchema should also be required.\n      //  If BSchema is not specified, then options.blockSchema should also not\n      //  be defined. Unfortunately, trying to implement these constraints seems\n      //  to be a huge pain, hence the `as any` casts.\n      blockSchema: t.blockSchema || qt,\n      ...t\n    };\n    this.sideMenu = new Ko(this), this.formattingToolbar = new zo(this), this.slashMenu = new Ze(\n      this,\n      e.slashMenuItems || Yo(e.blockSchema)\n    ), this.hyperlinkToolbar = new Fo(this), this.imageToolbar = new Lo(this);\n    const o = io({\n      editor: this,\n      domAttributes: e.domAttributes || {},\n      blockSchema: e.blockSchema,\n      collaboration: e.collaboration\n    }), r = _tiptap_core__WEBPACK_IMPORTED_MODULE_13__.Extension.create({\n      name: \"BlockNoteUIExtension\",\n      addProseMirrorPlugins: () => [\n        this.sideMenu.plugin,\n        this.formattingToolbar.plugin,\n        this.slashMenu.plugin,\n        this.hyperlinkToolbar.plugin,\n        this.imageToolbar.plugin\n      ]\n    });\n    o.push(r), this.schema = e.blockSchema, this.uploadFile = e.uploadFile;\n    const i = e.initialContent || (t.collaboration ? void 0 : [\n      {\n        type: \"paragraph\",\n        id: X.options.generateID()\n      }\n    ]), s = {\n      ...Jo,\n      ...e._tiptapOptions,\n      onBeforeCreate(E) {\n        var g, x;\n        if ((x = (g = e._tiptapOptions) == null ? void 0 : g.onBeforeCreate) == null || x.call(g, E), !i)\n          return;\n        const y = E.editor.schema, S = y.node(\n          \"doc\",\n          void 0,\n          y.node(\"blockGroup\", void 0, [\n            F({ id: \"initialBlock\", type: \"paragraph\" }, y)\n          ])\n        );\n        E.editor.options.content = S.toJSON();\n      },\n      onCreate: (E) => {\n        var y, S, g;\n        (S = (y = e._tiptapOptions) == null ? void 0 : y.onCreate) == null || S.call(y, E), i !== void 0 && this.replaceBlocks(this.topLevelBlocks, i), (g = e.onEditorReady) == null || g.call(e, this), this.ready = !0;\n      },\n      onUpdate: (E) => {\n        var y, S, g;\n        (S = (y = e._tiptapOptions) == null ? void 0 : y.onUpdate) == null || S.call(y, E), this.ready && ((g = e.onEditorContentChange) == null || g.call(e, this));\n      },\n      onSelectionUpdate: (E) => {\n        var y, S, g;\n        (S = (y = e._tiptapOptions) == null ? void 0 : y.onSelectionUpdate) == null || S.call(y, E), this.ready && ((g = e.onTextCursorPositionChange) == null || g.call(e, this));\n      },\n      editable: t.editable !== void 0 ? t.editable : ((l = e._tiptapOptions) == null ? void 0 : l.editable) !== void 0 ? (a = e._tiptapOptions) == null ? void 0 : a.editable : !0,\n      extensions: e.enableBlockNoteExtensions === !1 ? ((d = e._tiptapOptions) == null ? void 0 : d.extensions) || [] : [...((c = e._tiptapOptions) == null ? void 0 : c.extensions) || [], ...o],\n      editorProps: {\n        ...(h = e._tiptapOptions) == null ? void 0 : h.editorProps,\n        attributes: {\n          ...(p = (m = e._tiptapOptions) == null ? void 0 : m.editorProps) == null ? void 0 : p.attributes,\n          ...(f = e.domAttributes) == null ? void 0 : f.editor,\n          class: B(\n            R.bnEditor,\n            R.bnRoot,\n            ((w = (b = e.domAttributes) == null ? void 0 : b.editor) == null ? void 0 : w.class) || \"\",\n            e.defaultStyles ? R.defaultStyles : \"\",\n            ((M = (C = e.domAttributes) == null ? void 0 : C.editor) == null ? void 0 : M.class) || \"\"\n          )\n        }\n      }\n    };\n    e.parentElement && (s.element = e.parentElement), this._tiptapEditor = new _tiptap_core__WEBPACK_IMPORTED_MODULE_13__.Editor(s);\n  }\n  get prosemirrorView() {\n    return this._tiptapEditor.view;\n  }\n  get domElement() {\n    return this._tiptapEditor.view.dom;\n  }\n  isFocused() {\n    return this._tiptapEditor.view.hasFocus();\n  }\n  focus() {\n    this._tiptapEditor.view.focus();\n  }\n  /**\n   * Gets a snapshot of all top-level (non-nested) blocks in the editor.\n   * @returns A snapshot of all top-level (non-nested) blocks in the editor.\n   */\n  get topLevelBlocks() {\n    const t = [];\n    return this._tiptapEditor.state.doc.firstChild.descendants((e) => (t.push(A(e, this.schema, this.blockCache)), !1)), t;\n  }\n  /**\n   * Gets a snapshot of an existing block from the editor.\n   * @param blockIdentifier The identifier of an existing block that should be retrieved.\n   * @returns The block that matches the identifier, or `undefined` if no matching block was found.\n   */\n  getBlock(t) {\n    const e = typeof t == \"string\" ? t : t.id;\n    let o;\n    return this._tiptapEditor.state.doc.firstChild.descendants((r) => typeof o < \"u\" ? !1 : r.type.name !== \"blockContainer\" || r.attrs.id !== e ? !0 : (o = A(r, this.schema, this.blockCache), !1)), o;\n  }\n  /**\n   * Traverses all blocks in the editor depth-first, and executes a callback for each.\n   * @param callback The callback to execute for each block. Returning `false` stops the traversal.\n   * @param reverse Whether the blocks should be traversed in reverse order.\n   */\n  forEachBlock(t, e = !1) {\n    const o = this.topLevelBlocks.slice();\n    e && o.reverse();\n    function r(i) {\n      for (const s of i) {\n        if (!t(s))\n          return !1;\n        const l = e ? s.children.slice().reverse() : s.children;\n        if (!r(l))\n          return !1;\n      }\n      return !0;\n    }\n    r(o);\n  }\n  /**\n   * Executes a callback whenever the editor's contents change.\n   * @param callback The callback to execute.\n   */\n  onEditorContentChange(t) {\n    this._tiptapEditor.on(\"update\", t);\n  }\n  /**\n   * Executes a callback whenever the editor's selection changes.\n   * @param callback The callback to execute.\n   */\n  onEditorSelectionChange(t) {\n    this._tiptapEditor.on(\"selectionUpdate\", t);\n  }\n  /**\n   * Gets a snapshot of the current text cursor position.\n   * @returns A snapshot of the current text cursor position.\n   */\n  getTextCursorPosition() {\n    const { node: t, depth: e, startPos: o, endPos: r } = v(\n      this._tiptapEditor.state.doc,\n      this._tiptapEditor.state.selection.from\n    ), i = this._tiptapEditor.state.doc.resolve(r).index(e - 1), s = this._tiptapEditor.state.doc.resolve(r + 1).node().childCount;\n    let l;\n    i > 0 && (l = this._tiptapEditor.state.doc.resolve(o - 2).node());\n    let a;\n    return i < s - 1 && (a = this._tiptapEditor.state.doc.resolve(r + 2).node()), {\n      block: A(t, this.schema, this.blockCache),\n      prevBlock: l === void 0 ? void 0 : A(l, this.schema, this.blockCache),\n      nextBlock: a === void 0 ? void 0 : A(a, this.schema, this.blockCache)\n    };\n  }\n  /**\n   * Sets the text cursor position to the start or end of an existing block. Throws an error if the target block could\n   * not be found.\n   * @param targetBlock The identifier of an existing block that the text cursor should be moved to.\n   * @param placement Whether the text cursor should be placed at the start or end of the block.\n   */\n  setTextCursorPosition(t, e = \"start\") {\n    const o = typeof t == \"string\" ? t : t.id, { posBeforeNode: r } = ot(o, this._tiptapEditor.state.doc), { startPos: i, contentNode: s } = v(\n      this._tiptapEditor.state.doc,\n      r + 2\n    );\n    if (s.type.spec.content === \"\") {\n      this._tiptapEditor.commands.setNodeSelection(i);\n      return;\n    }\n    e === \"start\" ? this._tiptapEditor.commands.setTextSelection(i + 1) : this._tiptapEditor.commands.setTextSelection(\n      i + s.nodeSize - 1\n    );\n  }\n  /**\n   * Gets a snapshot of the current selection.\n   */\n  getSelection() {\n    if (this._tiptapEditor.state.selection.from === this._tiptapEditor.state.selection.to || \"node\" in this._tiptapEditor.state.selection)\n      return;\n    const t = [];\n    return this._tiptapEditor.state.doc.descendants((e, o) => e.type.spec.group !== \"blockContent\" || o + e.nodeSize < this._tiptapEditor.state.selection.from || o > this._tiptapEditor.state.selection.to ? !0 : (t.push(\n      A(\n        this._tiptapEditor.state.doc.resolve(o).node(),\n        this.schema,\n        this.blockCache\n      )\n    ), !1)), { blocks: t };\n  }\n  /**\n   * Checks if the editor is currently editable, or if it's locked.\n   * @returns True if the editor is editable, false otherwise.\n   */\n  get isEditable() {\n    return this._tiptapEditor.isEditable;\n  }\n  /**\n   * Makes the editor editable or locks it, depending on the argument passed.\n   * @param editable True to make the editor editable, or false to lock it.\n   */\n  set isEditable(t) {\n    this._tiptapEditor.setEditable(t);\n  }\n  /**\n   * Inserts new blocks into the editor. If a block's `id` is undefined, BlockNote generates one automatically. Throws an\n   * error if the reference block could not be found.\n   * @param blocksToInsert An array of partial blocks that should be inserted.\n   * @param referenceBlock An identifier for an existing block, at which the new blocks should be inserted.\n   * @param placement Whether the blocks should be inserted just before, just after, or nested inside the\n   * `referenceBlock`. Inserts the blocks at the start of the existing block's children if \"nested\" is used.\n   */\n  insertBlocks(t, e, o = \"before\") {\n    Ft(t, e, o, this._tiptapEditor);\n  }\n  /**\n   * Updates an existing block in the editor. Since updatedBlock is a PartialBlock object, some fields might not be\n   * defined. These undefined fields are kept as-is from the existing block. Throws an error if the block to update could\n   * not be found.\n   * @param blockToUpdate The block that should be updated.\n   * @param update A partial block which defines how the existing block should be changed.\n   */\n  updateBlock(t, e) {\n    so(t, e, this._tiptapEditor);\n  }\n  /**\n   * Removes existing blocks from the editor. Throws an error if any of the blocks could not be found.\n   * @param blocksToRemove An array of identifiers for existing blocks that should be removed.\n   */\n  removeBlocks(t) {\n    $t(t, this._tiptapEditor);\n  }\n  /**\n   * Replaces existing blocks in the editor with new blocks. If the blocks that should be removed are not adjacent or\n   * are at different nesting levels, `blocksToInsert` will be inserted at the position of the first block in\n   * `blocksToRemove`. Throws an error if any of the blocks to remove could not be found.\n   * @param blocksToRemove An array of blocks that should be replaced.\n   * @param blocksToInsert An array of partial blocks to replace the old ones with.\n   */\n  replaceBlocks(t, e) {\n    ao(t, e, this._tiptapEditor);\n  }\n  /**\n   * Gets the active text styles at the text cursor position or at the end of the current selection if it's active.\n   */\n  getActiveStyles() {\n    const t = {}, e = this._tiptapEditor.state.selection.$to.marks(), o = /* @__PURE__ */ new Set([\n      \"bold\",\n      \"italic\",\n      \"underline\",\n      \"strike\",\n      \"code\"\n    ]), r = /* @__PURE__ */ new Set([\"textColor\", \"backgroundColor\"]);\n    for (const i of e)\n      o.has(i.type.name) ? t[i.type.name] = !0 : r.has(i.type.name) && (t[i.type.name] = i.attrs.color);\n    return t;\n  }\n  /**\n   * Adds styles to the currently selected content.\n   * @param styles The styles to add.\n   */\n  addStyles(t) {\n    const e = /* @__PURE__ */ new Set([\n      \"bold\",\n      \"italic\",\n      \"underline\",\n      \"strike\",\n      \"code\"\n    ]), o = /* @__PURE__ */ new Set([\"textColor\", \"backgroundColor\"]);\n    this._tiptapEditor.view.focus();\n    for (const [r, i] of Object.entries(t))\n      e.has(r) ? this._tiptapEditor.commands.setMark(r) : o.has(r) && this._tiptapEditor.commands.setMark(r, { color: i });\n  }\n  /**\n   * Removes styles from the currently selected content.\n   * @param styles The styles to remove.\n   */\n  removeStyles(t) {\n    this._tiptapEditor.view.focus();\n    for (const e of Object.keys(t))\n      this._tiptapEditor.commands.unsetMark(e);\n  }\n  /**\n   * Toggles styles on the currently selected content.\n   * @param styles The styles to toggle.\n   */\n  toggleStyles(t) {\n    const e = /* @__PURE__ */ new Set([\n      \"bold\",\n      \"italic\",\n      \"underline\",\n      \"strike\",\n      \"code\"\n    ]), o = /* @__PURE__ */ new Set([\"textColor\", \"backgroundColor\"]);\n    this._tiptapEditor.view.focus();\n    for (const [r, i] of Object.entries(t))\n      e.has(r) ? this._tiptapEditor.commands.toggleMark(r) : o.has(r) && this._tiptapEditor.commands.toggleMark(r, { color: i });\n  }\n  /**\n   * Gets the currently selected text.\n   */\n  getSelectedText() {\n    return this._tiptapEditor.state.doc.textBetween(\n      this._tiptapEditor.state.selection.from,\n      this._tiptapEditor.state.selection.to\n    );\n  }\n  /**\n   * Gets the URL of the last link in the current selection, or `undefined` if there are no links in the selection.\n   */\n  getSelectedLinkUrl() {\n    return this._tiptapEditor.getAttributes(\"link\").href;\n  }\n  /**\n   * Creates a new link to replace the selected content.\n   * @param url The link URL.\n   * @param text The text to display the link with.\n   */\n  createLink(t, e) {\n    if (t === \"\")\n      return;\n    const { from: o, to: r } = this._tiptapEditor.state.selection;\n    e || (e = this._tiptapEditor.state.doc.textBetween(o, r));\n    const i = this._tiptapEditor.schema.mark(\"link\", { href: t });\n    this._tiptapEditor.view.dispatch(\n      this._tiptapEditor.view.state.tr.insertText(e, o, r).addMark(o, o + e.length, i)\n    );\n  }\n  /**\n   * Checks if the block containing the text cursor can be nested.\n   */\n  canNestBlock() {\n    const { startPos: t, depth: e } = v(\n      this._tiptapEditor.state.doc,\n      this._tiptapEditor.state.selection.from\n    );\n    return this._tiptapEditor.state.doc.resolve(t).index(e - 1) > 0;\n  }\n  /**\n   * Nests the block containing the text cursor into the block above it.\n   */\n  nestBlock() {\n    this._tiptapEditor.commands.sinkListItem(\"blockContainer\");\n  }\n  /**\n   * Checks if the block containing the text cursor is nested.\n   */\n  canUnnestBlock() {\n    const { depth: t } = v(\n      this._tiptapEditor.state.doc,\n      this._tiptapEditor.state.selection.from\n    );\n    return t > 2;\n  }\n  /**\n   * Lifts the block containing the text cursor out of its parent.\n   */\n  unnestBlock() {\n    this._tiptapEditor.commands.liftListItem(\"blockContainer\");\n  }\n  /**\n   * Serializes blocks into an HTML string. To better conform to HTML standards, children of blocks which aren't list\n   * items are un-nested in the output HTML.\n   * @param blocks An array of blocks that should be serialized into HTML.\n   * @returns The blocks, serialized as an HTML string.\n   */\n  async blocksToHTML(t) {\n    return Wt(t, this._tiptapEditor.schema);\n  }\n  /**\n   * Parses blocks from an HTML string. Tries to create `Block` objects out of any HTML block-level elements, and\n   * `InlineNode` objects from any HTML inline elements, though not all element types are recognized. If BlockNote\n   * doesn't recognize an HTML element's tag, it will parse it as a paragraph or plain text.\n   * @param html The HTML string to parse blocks from.\n   * @returns The blocks parsed from the HTML string.\n   */\n  async HTMLToBlocks(t) {\n    return Gt(t, this.schema, this._tiptapEditor.schema);\n  }\n  /**\n   * Serializes blocks into a Markdown string. The output is simplified as Markdown does not support all features of\n   * BlockNote - children of blocks which aren't list items are un-nested and certain styles are removed.\n   * @param blocks An array of blocks that should be serialized into Markdown.\n   * @returns The blocks, serialized as a Markdown string.\n   */\n  async blocksToMarkdown(t) {\n    return uo(t, this._tiptapEditor.schema);\n  }\n  /**\n   * Creates a list of blocks from a Markdown string. Tries to create `Block` and `InlineNode` objects based on\n   * Markdown syntax, though not all symbols are recognized. If BlockNote doesn't recognize a symbol, it will parse it\n   * as text.\n   * @param markdown The Markdown string to parse blocks from.\n   * @returns The blocks parsed from the Markdown string.\n   */\n  async markdownToBlocks(t) {\n    return ho(t, this.schema, this._tiptapEditor.schema);\n  }\n  /**\n   * Updates the user info for the current user that's shown to other collaborators.\n   */\n  updateCollaborationUserInfo(t) {\n    if (!this.options.collaboration)\n      throw new Error(\n        \"Cannot update collaboration user info when collaboration is disabled.\"\n      );\n    this._tiptapEditor.commands.updateUser(t);\n  }\n}\nconst An = async (n) => {\n  const t = new FormData();\n  return t.append(\"file\", n), (await (await fetch(\"https://tmpfiles.org/api/v1/upload\", {\n    method: \"POST\",\n    body: t\n  })).json()).data.url.replace(\n    \"tmpfiles.org/\",\n    \"tmpfiles.org/dl/\"\n  );\n};\n\n//# sourceMappingURL=blocknote.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@blocknote/core/dist/blocknote.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@blocknote/react/dist/blocknote-react.js":
/*!***************************************************************!*\
  !*** ./node_modules/@blocknote/react/dist/blocknote-react.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AddBlockButton: () => (/* binding */ wn),\n/* harmony export */   BlockColorsButton: () => (/* binding */ En),\n/* harmony export */   BlockNoteView: () => (/* binding */ eo),\n/* harmony export */   BlockTypeDropdown: () => (/* binding */ on),\n/* harmony export */   ColorStyleButton: () => (/* binding */ un),\n/* harmony export */   CreateLinkButton: () => (/* binding */ vn),\n/* harmony export */   DefaultDragHandleMenu: () => (/* binding */ zn),\n/* harmony export */   DefaultFormattingToolbar: () => (/* binding */ mn),\n/* harmony export */   DefaultImageToolbar: () => (/* binding */ Et),\n/* harmony export */   DefaultSideMenu: () => (/* binding */ In),\n/* harmony export */   DefaultSlashMenu: () => (/* binding */ Fn),\n/* harmony export */   DragHandle: () => (/* binding */ Hn),\n/* harmony export */   DragHandleMenu: () => (/* binding */ Mn),\n/* harmony export */   DragHandleMenuItem: () => (/* binding */ Ht),\n/* harmony export */   FormattingToolbarPositioner: () => (/* binding */ kn),\n/* harmony export */   HyperlinkToolbarPositioner: () => (/* binding */ Cn),\n/* harmony export */   ImageToolbarPositioner: () => (/* binding */ Ln),\n/* harmony export */   InlineContent: () => (/* binding */ no),\n/* harmony export */   NestBlockButton: () => (/* binding */ gn),\n/* harmony export */   RemoveBlockButton: () => (/* binding */ Rn),\n/* harmony export */   SideMenu: () => (/* binding */ jn),\n/* harmony export */   SideMenuButton: () => (/* binding */ zt),\n/* harmony export */   SideMenuPositioner: () => (/* binding */ Bn),\n/* harmony export */   SlashMenuItem: () => (/* binding */ On),\n/* harmony export */   SlashMenuPositioner: () => (/* binding */ An),\n/* harmony export */   TextAlignButton: () => (/* binding */ Se),\n/* harmony export */   ToggledStyleButton: () => (/* binding */ he),\n/* harmony export */   Toolbar: () => (/* binding */ _e),\n/* harmony export */   ToolbarButton: () => (/* binding */ P),\n/* harmony export */   ToolbarDropdown: () => (/* binding */ en),\n/* harmony export */   UnnestBlockButton: () => (/* binding */ fn),\n/* harmony export */   blockNoteToMantineTheme: () => (/* binding */ fe),\n/* harmony export */   createReactBlockSpec: () => (/* binding */ oo),\n/* harmony export */   darkDefaultTheme: () => (/* binding */ dt),\n/* harmony export */   defaultBlockTypeDropdownItems: () => (/* binding */ nn),\n/* harmony export */   defaultColorScheme: () => (/* binding */ k),\n/* harmony export */   getDefaultReactSlashMenuItems: () => (/* binding */ Nn),\n/* harmony export */   lightDefaultTheme: () => (/* binding */ ve),\n/* harmony export */   useBlockNote: () => (/* binding */ to),\n/* harmony export */   useEditorChange: () => (/* binding */ q),\n/* harmony export */   useEditorContentChange: () => (/* binding */ tn),\n/* harmony export */   useEditorForceUpdate: () => (/* binding */ ro),\n/* harmony export */   useEditorSelectionChange: () => (/* binding */ rn),\n/* harmony export */   useSelectedBlocks: () => (/* binding */ G)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _blocknote_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @blocknote/core */ \"(ssr)/./node_modules/@blocknote/core/dist/blocknote.js\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/cjs/index.js\");\n/* harmony import */ var _tiptap_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tiptap/react */ \"(ssr)/./node_modules/@tiptap/react/dist/index.js\");\n/* harmony import */ var use_prefers_color_scheme__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! use-prefers-color-scheme */ \"(ssr)/./node_modules/use-prefers-color-scheme/dist/index.cjs.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\");\n/* harmony import */ var _tippyjs_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tippyjs/react */ \"(ssr)/./node_modules/@tippyjs/react/dist/tippy-react.umd.js\");\n/* harmony import */ var tippy_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tippy.js */ \"(ssr)/./node_modules/tippy.js/dist/tippy.cjs.js\");\n\n\n\n\n\n\n\n\n\nvar Me = { exports: {} }, re = {};\n/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar at;\nfunction Hr() {\n  if (at)\n    return re;\n  at = 1;\n  var e = react__WEBPACK_IMPORTED_MODULE_0__, n = Symbol.for(\"react.element\"), o = Symbol.for(\"react.fragment\"), i = Object.prototype.hasOwnProperty, s = e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, c = { key: !0, ref: !0, __self: !0, __source: !0 };\n  function u(g, a, y) {\n    var h, p = {}, S = null, T = null;\n    y !== void 0 && (S = \"\" + y), a.key !== void 0 && (S = \"\" + a.key), a.ref !== void 0 && (T = a.ref);\n    for (h in a)\n      i.call(a, h) && !c.hasOwnProperty(h) && (p[h] = a[h]);\n    if (g && g.defaultProps)\n      for (h in a = g.defaultProps, a)\n        p[h] === void 0 && (p[h] = a[h]);\n    return { $$typeof: n, type: g, key: S, ref: T, props: p, _owner: s.current };\n  }\n  return re.Fragment = o, re.jsx = u, re.jsxs = u, re;\n}\nvar ne = {};\n/**\n * @license React\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar lt;\nfunction Ir() {\n  return lt || (lt = 1,  true && function() {\n    var e = react__WEBPACK_IMPORTED_MODULE_0__, n = Symbol.for(\"react.element\"), o = Symbol.for(\"react.portal\"), i = Symbol.for(\"react.fragment\"), s = Symbol.for(\"react.strict_mode\"), c = Symbol.for(\"react.profiler\"), u = Symbol.for(\"react.provider\"), g = Symbol.for(\"react.context\"), a = Symbol.for(\"react.forward_ref\"), y = Symbol.for(\"react.suspense\"), h = Symbol.for(\"react.suspense_list\"), p = Symbol.for(\"react.memo\"), S = Symbol.for(\"react.lazy\"), T = Symbol.for(\"react.offscreen\"), D = Symbol.iterator, le = \"@@iterator\";\n    function Bt(t) {\n      if (t === null || typeof t != \"object\")\n        return null;\n      var l = D && t[D] || t[le];\n      return typeof l == \"function\" ? l : null;\n    }\n    var J = e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n    function H(t) {\n      {\n        for (var l = arguments.length, d = new Array(l > 1 ? l - 1 : 0), f = 1; f < l; f++)\n          d[f - 1] = arguments[f];\n        _t(\"error\", t, d);\n      }\n    }\n    function _t(t, l, d) {\n      {\n        var f = J.ReactDebugCurrentFrame, m = f.getStackAddendum();\n        m !== \"\" && (l += \"%s\", d = d.concat([m]));\n        var C = d.map(function(b) {\n          return String(b);\n        });\n        C.unshift(\"Warning: \" + l), Function.prototype.apply.call(console[t], console, C);\n      }\n    }\n    var Dt = !1, Pt = !1, Ot = !1, Ft = !1, At = !1, De;\n    De = Symbol.for(\"react.module.reference\");\n    function Lt(t) {\n      return !!(typeof t == \"string\" || typeof t == \"function\" || t === i || t === c || At || t === s || t === y || t === h || Ft || t === T || Dt || Pt || Ot || typeof t == \"object\" && t !== null && (t.$$typeof === S || t.$$typeof === p || t.$$typeof === u || t.$$typeof === g || t.$$typeof === a || // This needs to include all possible module reference object\n      // types supported by any Flight configuration anywhere since\n      // we don't know which Flight build this will end up being used\n      // with.\n      t.$$typeof === De || t.getModuleId !== void 0));\n    }\n    function Vt(t, l, d) {\n      var f = t.displayName;\n      if (f)\n        return f;\n      var m = l.displayName || l.name || \"\";\n      return m !== \"\" ? d + \"(\" + m + \")\" : d;\n    }\n    function Pe(t) {\n      return t.displayName || \"Context\";\n    }\n    function V(t) {\n      if (t == null)\n        return null;\n      if (typeof t.tag == \"number\" && H(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"), typeof t == \"function\")\n        return t.displayName || t.name || null;\n      if (typeof t == \"string\")\n        return t;\n      switch (t) {\n        case i:\n          return \"Fragment\";\n        case o:\n          return \"Portal\";\n        case c:\n          return \"Profiler\";\n        case s:\n          return \"StrictMode\";\n        case y:\n          return \"Suspense\";\n        case h:\n          return \"SuspenseList\";\n      }\n      if (typeof t == \"object\")\n        switch (t.$$typeof) {\n          case g:\n            var l = t;\n            return Pe(l) + \".Consumer\";\n          case u:\n            var d = t;\n            return Pe(d._context) + \".Provider\";\n          case a:\n            return Vt(t, t.render, \"ForwardRef\");\n          case p:\n            var f = t.displayName || null;\n            return f !== null ? f : V(t.type) || \"Memo\";\n          case S: {\n            var m = t, C = m._payload, b = m._init;\n            try {\n              return V(b(C));\n            } catch {\n              return null;\n            }\n          }\n        }\n      return null;\n    }\n    var K = Object.assign, ee = 0, Oe, Fe, Ae, Le, Ve, Ue, Ne;\n    function $e() {\n    }\n    $e.__reactDisabledLog = !0;\n    function Ut() {\n      {\n        if (ee === 0) {\n          Oe = console.log, Fe = console.info, Ae = console.warn, Le = console.error, Ve = console.group, Ue = console.groupCollapsed, Ne = console.groupEnd;\n          var t = {\n            configurable: !0,\n            enumerable: !0,\n            value: $e,\n            writable: !0\n          };\n          Object.defineProperties(console, {\n            info: t,\n            log: t,\n            warn: t,\n            error: t,\n            group: t,\n            groupCollapsed: t,\n            groupEnd: t\n          });\n        }\n        ee++;\n      }\n    }\n    function Nt() {\n      {\n        if (ee--, ee === 0) {\n          var t = {\n            configurable: !0,\n            enumerable: !0,\n            writable: !0\n          };\n          Object.defineProperties(console, {\n            log: K({}, t, {\n              value: Oe\n            }),\n            info: K({}, t, {\n              value: Fe\n            }),\n            warn: K({}, t, {\n              value: Ae\n            }),\n            error: K({}, t, {\n              value: Le\n            }),\n            group: K({}, t, {\n              value: Ve\n            }),\n            groupCollapsed: K({}, t, {\n              value: Ue\n            }),\n            groupEnd: K({}, t, {\n              value: Ne\n            })\n          });\n        }\n        ee < 0 && H(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\");\n      }\n    }\n    var me = J.ReactCurrentDispatcher, ke;\n    function ce(t, l, d) {\n      {\n        if (ke === void 0)\n          try {\n            throw Error();\n          } catch (m) {\n            var f = m.stack.trim().match(/\\n( *(at )?)/);\n            ke = f && f[1] || \"\";\n          }\n        return `\n` + ke + t;\n      }\n    }\n    var ye = !1, se;\n    {\n      var $t = typeof WeakMap == \"function\" ? WeakMap : Map;\n      se = new $t();\n    }\n    function We(t, l) {\n      if (!t || ye)\n        return \"\";\n      {\n        var d = se.get(t);\n        if (d !== void 0)\n          return d;\n      }\n      var f;\n      ye = !0;\n      var m = Error.prepareStackTrace;\n      Error.prepareStackTrace = void 0;\n      var C;\n      C = me.current, me.current = null, Ut();\n      try {\n        if (l) {\n          var b = function() {\n            throw Error();\n          };\n          if (Object.defineProperty(b.prototype, \"props\", {\n            set: function() {\n              throw Error();\n            }\n          }), typeof Reflect == \"object\" && Reflect.construct) {\n            try {\n              Reflect.construct(b, []);\n            } catch (U) {\n              f = U;\n            }\n            Reflect.construct(t, [], b);\n          } else {\n            try {\n              b.call();\n            } catch (U) {\n              f = U;\n            }\n            t.call(b.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (U) {\n            f = U;\n          }\n          t();\n        }\n      } catch (U) {\n        if (U && f && typeof U.stack == \"string\") {\n          for (var v = U.stack.split(`\n`), I = f.stack.split(`\n`), M = v.length - 1, E = I.length - 1; M >= 1 && E >= 0 && v[M] !== I[E]; )\n            E--;\n          for (; M >= 1 && E >= 0; M--, E--)\n            if (v[M] !== I[E]) {\n              if (M !== 1 || E !== 1)\n                do\n                  if (M--, E--, E < 0 || v[M] !== I[E]) {\n                    var _ = `\n` + v[M].replace(\" at new \", \" at \");\n                    return t.displayName && _.includes(\"<anonymous>\") && (_ = _.replace(\"<anonymous>\", t.displayName)), typeof t == \"function\" && se.set(t, _), _;\n                  }\n                while (M >= 1 && E >= 0);\n              break;\n            }\n        }\n      } finally {\n        ye = !1, me.current = C, Nt(), Error.prepareStackTrace = m;\n      }\n      var Z = t ? t.displayName || t.name : \"\", ot = Z ? ce(Z) : \"\";\n      return typeof t == \"function\" && se.set(t, ot), ot;\n    }\n    function Wt(t, l, d) {\n      return We(t, !1);\n    }\n    function Yt(t) {\n      var l = t.prototype;\n      return !!(l && l.isReactComponent);\n    }\n    function de(t, l, d) {\n      if (t == null)\n        return \"\";\n      if (typeof t == \"function\")\n        return We(t, Yt(t));\n      if (typeof t == \"string\")\n        return ce(t);\n      switch (t) {\n        case y:\n          return ce(\"Suspense\");\n        case h:\n          return ce(\"SuspenseList\");\n      }\n      if (typeof t == \"object\")\n        switch (t.$$typeof) {\n          case a:\n            return Wt(t.render);\n          case p:\n            return de(t.type, l, d);\n          case S: {\n            var f = t, m = f._payload, C = f._init;\n            try {\n              return de(C(m), l, d);\n            } catch {\n            }\n          }\n        }\n      return \"\";\n    }\n    var ue = Object.prototype.hasOwnProperty, Ye = {}, qe = J.ReactDebugCurrentFrame;\n    function ge(t) {\n      if (t) {\n        var l = t._owner, d = de(t.type, t._source, l ? l.type : null);\n        qe.setExtraStackFrame(d);\n      } else\n        qe.setExtraStackFrame(null);\n    }\n    function qt(t, l, d, f, m) {\n      {\n        var C = Function.call.bind(ue);\n        for (var b in t)\n          if (C(t, b)) {\n            var v = void 0;\n            try {\n              if (typeof t[b] != \"function\") {\n                var I = Error((f || \"React class\") + \": \" + d + \" type `\" + b + \"` is invalid; it must be a function, usually from the `prop-types` package, but received `\" + typeof t[b] + \"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                throw I.name = \"Invariant Violation\", I;\n              }\n              v = t[b](l, b, f, d, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n            } catch (M) {\n              v = M;\n            }\n            v && !(v instanceof Error) && (ge(m), H(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\", f || \"React class\", d, b, typeof v), ge(null)), v instanceof Error && !(v.message in Ye) && (Ye[v.message] = !0, ge(m), H(\"Failed %s type: %s\", d, v.message), ge(null));\n          }\n      }\n    }\n    var Kt = Array.isArray;\n    function pe(t) {\n      return Kt(t);\n    }\n    function Gt(t) {\n      {\n        var l = typeof Symbol == \"function\" && Symbol.toStringTag, d = l && t[Symbol.toStringTag] || t.constructor.name || \"Object\";\n        return d;\n      }\n    }\n    function Jt(t) {\n      try {\n        return Ke(t), !1;\n      } catch {\n        return !0;\n      }\n    }\n    function Ke(t) {\n      return \"\" + t;\n    }\n    function Ge(t) {\n      if (Jt(t))\n        return H(\"The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.\", Gt(t)), Ke(t);\n    }\n    var te = J.ReactCurrentOwner, Xt = {\n      key: !0,\n      ref: !0,\n      __self: !0,\n      __source: !0\n    }, Je, Xe, Ce;\n    Ce = {};\n    function Zt(t) {\n      if (ue.call(t, \"ref\")) {\n        var l = Object.getOwnPropertyDescriptor(t, \"ref\").get;\n        if (l && l.isReactWarning)\n          return !1;\n      }\n      return t.ref !== void 0;\n    }\n    function Qt(t) {\n      if (ue.call(t, \"key\")) {\n        var l = Object.getOwnPropertyDescriptor(t, \"key\").get;\n        if (l && l.isReactWarning)\n          return !1;\n      }\n      return t.key !== void 0;\n    }\n    function er(t, l) {\n      if (typeof t.ref == \"string\" && te.current && l && te.current.stateNode !== l) {\n        var d = V(te.current.type);\n        Ce[d] || (H('Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', V(te.current.type), t.ref), Ce[d] = !0);\n      }\n    }\n    function tr(t, l) {\n      {\n        var d = function() {\n          Je || (Je = !0, H(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", l));\n        };\n        d.isReactWarning = !0, Object.defineProperty(t, \"key\", {\n          get: d,\n          configurable: !0\n        });\n      }\n    }\n    function rr(t, l) {\n      {\n        var d = function() {\n          Xe || (Xe = !0, H(\"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", l));\n        };\n        d.isReactWarning = !0, Object.defineProperty(t, \"ref\", {\n          get: d,\n          configurable: !0\n        });\n      }\n    }\n    var nr = function(t, l, d, f, m, C, b) {\n      var v = {\n        // This tag allows us to uniquely identify this as a React Element\n        $$typeof: n,\n        // Built-in properties that belong on the element\n        type: t,\n        key: l,\n        ref: d,\n        props: b,\n        // Record the component responsible for creating this element.\n        _owner: C\n      };\n      return v._store = {}, Object.defineProperty(v._store, \"validated\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: !1\n      }), Object.defineProperty(v, \"_self\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !1,\n        value: f\n      }), Object.defineProperty(v, \"_source\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !1,\n        value: m\n      }), Object.freeze && (Object.freeze(v.props), Object.freeze(v)), v;\n    };\n    function or(t, l, d, f, m) {\n      {\n        var C, b = {}, v = null, I = null;\n        d !== void 0 && (Ge(d), v = \"\" + d), Qt(l) && (Ge(l.key), v = \"\" + l.key), Zt(l) && (I = l.ref, er(l, m));\n        for (C in l)\n          ue.call(l, C) && !Xt.hasOwnProperty(C) && (b[C] = l[C]);\n        if (t && t.defaultProps) {\n          var M = t.defaultProps;\n          for (C in M)\n            b[C] === void 0 && (b[C] = M[C]);\n        }\n        if (v || I) {\n          var E = typeof t == \"function\" ? t.displayName || t.name || \"Unknown\" : t;\n          v && tr(b, E), I && rr(b, E);\n        }\n        return nr(t, v, I, m, f, te.current, b);\n      }\n    }\n    var je = J.ReactCurrentOwner, Ze = J.ReactDebugCurrentFrame;\n    function X(t) {\n      if (t) {\n        var l = t._owner, d = de(t.type, t._source, l ? l.type : null);\n        Ze.setExtraStackFrame(d);\n      } else\n        Ze.setExtraStackFrame(null);\n    }\n    var Te;\n    Te = !1;\n    function we(t) {\n      return typeof t == \"object\" && t !== null && t.$$typeof === n;\n    }\n    function Qe() {\n      {\n        if (je.current) {\n          var t = V(je.current.type);\n          if (t)\n            return `\n\nCheck the render method of \\`` + t + \"`.\";\n        }\n        return \"\";\n      }\n    }\n    function ir(t) {\n      {\n        if (t !== void 0) {\n          var l = t.fileName.replace(/^.*[\\\\\\/]/, \"\"), d = t.lineNumber;\n          return `\n\nCheck your code at ` + l + \":\" + d + \".\";\n        }\n        return \"\";\n      }\n    }\n    var et = {};\n    function ar(t) {\n      {\n        var l = Qe();\n        if (!l) {\n          var d = typeof t == \"string\" ? t : t.displayName || t.name;\n          d && (l = `\n\nCheck the top-level render call using <` + d + \">.\");\n        }\n        return l;\n      }\n    }\n    function tt(t, l) {\n      {\n        if (!t._store || t._store.validated || t.key != null)\n          return;\n        t._store.validated = !0;\n        var d = ar(l);\n        if (et[d])\n          return;\n        et[d] = !0;\n        var f = \"\";\n        t && t._owner && t._owner !== je.current && (f = \" It was passed a child from \" + V(t._owner.type) + \".\"), X(t), H('Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', d, f), X(null);\n      }\n    }\n    function rt(t, l) {\n      {\n        if (typeof t != \"object\")\n          return;\n        if (pe(t))\n          for (var d = 0; d < t.length; d++) {\n            var f = t[d];\n            we(f) && tt(f, l);\n          }\n        else if (we(t))\n          t._store && (t._store.validated = !0);\n        else if (t) {\n          var m = Bt(t);\n          if (typeof m == \"function\" && m !== t.entries)\n            for (var C = m.call(t), b; !(b = C.next()).done; )\n              we(b.value) && tt(b.value, l);\n        }\n      }\n    }\n    function lr(t) {\n      {\n        var l = t.type;\n        if (l == null || typeof l == \"string\")\n          return;\n        var d;\n        if (typeof l == \"function\")\n          d = l.propTypes;\n        else if (typeof l == \"object\" && (l.$$typeof === a || // Note: Memo only checks outer props here.\n        // Inner props are checked in the reconciler.\n        l.$$typeof === p))\n          d = l.propTypes;\n        else\n          return;\n        if (d) {\n          var f = V(l);\n          qt(d, t.props, \"prop\", f, t);\n        } else if (l.PropTypes !== void 0 && !Te) {\n          Te = !0;\n          var m = V(l);\n          H(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", m || \"Unknown\");\n        }\n        typeof l.getDefaultProps == \"function\" && !l.getDefaultProps.isReactClassApproved && H(\"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\");\n      }\n    }\n    function cr(t) {\n      {\n        for (var l = Object.keys(t.props), d = 0; d < l.length; d++) {\n          var f = l[d];\n          if (f !== \"children\" && f !== \"key\") {\n            X(t), H(\"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\", f), X(null);\n            break;\n          }\n        }\n        t.ref !== null && (X(t), H(\"Invalid attribute `ref` supplied to `React.Fragment`.\"), X(null));\n      }\n    }\n    function nt(t, l, d, f, m, C) {\n      {\n        var b = Lt(t);\n        if (!b) {\n          var v = \"\";\n          (t === void 0 || typeof t == \"object\" && t !== null && Object.keys(t).length === 0) && (v += \" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");\n          var I = ir(m);\n          I ? v += I : v += Qe();\n          var M;\n          t === null ? M = \"null\" : pe(t) ? M = \"array\" : t !== void 0 && t.$$typeof === n ? (M = \"<\" + (V(t.type) || \"Unknown\") + \" />\", v = \" Did you accidentally export a JSX literal instead of a component?\") : M = typeof t, H(\"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\", M, v);\n        }\n        var E = or(t, l, d, m, C);\n        if (E == null)\n          return E;\n        if (b) {\n          var _ = l.children;\n          if (_ !== void 0)\n            if (f)\n              if (pe(_)) {\n                for (var Z = 0; Z < _.length; Z++)\n                  rt(_[Z], t);\n                Object.freeze && Object.freeze(_);\n              } else\n                H(\"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\");\n            else\n              rt(_, t);\n        }\n        return t === i ? cr(E) : lr(E), E;\n      }\n    }\n    function sr(t, l, d) {\n      return nt(t, l, d, !0);\n    }\n    function dr(t, l, d) {\n      return nt(t, l, d, !1);\n    }\n    var ur = dr, gr = sr;\n    ne.Fragment = i, ne.jsx = ur, ne.jsxs = gr;\n  }()), ne;\n}\n false ? 0 : Me.exports = Ir();\nvar r = Me.exports;\nconst fe = (e) => {\n  const n = `0 4px 12px ${e.colors.shadow}`, o = `1px solid ${e.colors.border}`, i = {\n    default: e.colors.editor.text,\n    gray: e.colors.highlightColors.gray.text,\n    brown: e.colors.highlightColors.brown.text,\n    red: e.colors.highlightColors.red.text,\n    orange: e.colors.highlightColors.orange.text,\n    yellow: e.colors.highlightColors.yellow.text,\n    green: e.colors.highlightColors.green.text,\n    blue: e.colors.highlightColors.blue.text,\n    purple: e.colors.highlightColors.purple.text,\n    pink: e.colors.highlightColors.pink.text\n  }, s = {\n    default: e.colors.editor.background,\n    gray: e.colors.highlightColors.gray.background,\n    brown: e.colors.highlightColors.brown.background,\n    red: e.colors.highlightColors.red.background,\n    orange: e.colors.highlightColors.orange.background,\n    yellow: e.colors.highlightColors.yellow.background,\n    green: e.colors.highlightColors.green.background,\n    blue: e.colors.highlightColors.blue.background,\n    purple: e.colors.highlightColors.purple.background,\n    pink: e.colors.highlightColors.pink.background\n  }, c = `${Math.max(e.borderRadius + 2, 1)}px`, u = `${e.borderRadius}px`, g = `${Math.max(e.borderRadius - 2, 1)}px`;\n  return {\n    activeStyles: {\n      // Removes button press effect.\n      transform: \"none\"\n    },\n    components: {\n      // Slash Menu, Formatting Toolbar dropdown, color picker dropdown\n      Menu: {\n        styles: () => {\n          var a;\n          return {\n            dropdown: lodash__WEBPACK_IMPORTED_MODULE_3__.merge(\n              {\n                backgroundColor: e.colors.menu.background,\n                border: o,\n                borderRadius: u,\n                boxShadow: n,\n                color: e.colors.menu.text,\n                padding: \"2px\",\n                overflowY: \"scroll\",\n                \".mantine-Menu-label\": {\n                  backgroundColor: e.colors.menu.background,\n                  color: e.colors.menu.text\n                },\n                \".mantine-Menu-item\": {\n                  backgroundColor: e.colors.menu.background,\n                  border: \"none\",\n                  borderRadius: g,\n                  color: e.colors.menu.text\n                },\n                \".mantine-Menu-item[data-hovered]\": {\n                  backgroundColor: e.colors.hovered.background,\n                  border: \"none\",\n                  color: e.colors.hovered.text\n                }\n              },\n              ((a = e.componentStyles) == null ? void 0 : a.call(e, e).Menu) || {}\n            )\n          };\n        }\n      },\n      Tabs: {\n        styles: () => {\n          var a;\n          return {\n            root: lodash__WEBPACK_IMPORTED_MODULE_3__.merge(\n              {\n                width: \"100%\",\n                backgroundColor: e.colors.menu.background\n              },\n              ((a = e.componentStyles) == null ? void 0 : a.call(e, e).Tabs) || {}\n            ),\n            tabsList: {\n              borderColor: e.colors.hovered.background\n            },\n            tab: {\n              color: e.colors.menu.text,\n              borderColor: e.colors.hovered.background,\n              \"&:hover\": {\n                color: e.colors.hovered.text,\n                backgroundColor: e.colors.hovered.background,\n                borderColor: e.colors.hovered.background\n              },\n              \"&[data-active], &[data-active]&:hover\": {\n                color: e.colors.menu.text,\n                borderColor: e.colors.menu.text\n              }\n            },\n            panel: {\n              padding: \"8px\",\n              \".mantine-UnstyledButton-root\": {\n                width: \"60%\",\n                border: `solid ${e.colors.border} 1px`,\n                borderRadius: \"4px\",\n                height: \"32px\"\n              },\n              \".mantine-UnstyledButton-root:hover\": {\n                color: e.colors.hovered.text,\n                backgroundColor: e.colors.hovered.background\n              }\n            }\n          };\n        }\n      },\n      FileInput: {\n        styles: () => {\n          var a;\n          return {\n            root: ((a = e.componentStyles) == null ? void 0 : a.call(e, e).FileInput) || {},\n            input: {\n              color: e.colors.menu.text,\n              backgroundColor: e.colors.menu.background,\n              display: \"flex\",\n              flexDirection: \"row\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              border: \"none\",\n              borderRadius: \"4px\",\n              \"&:hover\": {\n                backgroundColor: e.colors.hovered.background\n              }\n            },\n            wrapper: {\n              border: `solid ${e.colors.border} 1px`,\n              borderRadius: \"4px\"\n            },\n            placeholder: {\n              color: `${e.colors.menu.text} !important`,\n              fontWeight: 600\n            }\n          };\n        }\n      },\n      TextInput: {\n        styles: () => {\n          var a;\n          return {\n            root: ((a = e.componentStyles) == null ? void 0 : a.call(e, e).TextInput) || {},\n            input: {\n              color: e.colors.menu.text,\n              backgroundColor: e.colors.menu.background,\n              border: `solid ${e.colors.border} 1px`,\n              borderRadius: \"4px\",\n              height: \"32px\"\n            }\n          };\n        }\n      },\n      ColorIcon: {\n        styles: () => {\n          var a;\n          return {\n            root: lodash__WEBPACK_IMPORTED_MODULE_3__.merge(\n              {\n                border: o,\n                borderRadius: g\n              },\n              ((a = e.componentStyles) == null ? void 0 : a.call(e, e).ColorIcon) || {}\n            )\n          };\n        }\n      },\n      DragHandleMenu: {\n        styles: () => {\n          var a;\n          return {\n            root: lodash__WEBPACK_IMPORTED_MODULE_3__.merge(\n              {\n                \".mantine-Menu-item\": {\n                  fontSize: \"12px\",\n                  height: \"30px\"\n                }\n              },\n              ((a = e.componentStyles) == null ? void 0 : a.call(e, e).DragHandleMenu) || {}\n            )\n          };\n        }\n      },\n      Editor: {\n        styles: () => {\n          var a;\n          return {\n            root: lodash__WEBPACK_IMPORTED_MODULE_3__.merge(\n              {\n                \".ProseMirror\": {\n                  backgroundColor: e.colors.editor.background,\n                  borderRadius: c,\n                  color: e.colors.editor.text,\n                  fontFamily: e.fontFamily\n                },\n                // Placeholders\n                [`.${_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.blockStyles.isEmpty} .${_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.blockStyles.inlineContent}:before, .${_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.blockStyles.isFilter} .${_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.blockStyles.inlineContent}:before`]: {\n                  color: e.colors.sideMenu\n                },\n                // Indent lines\n                [`.${_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.blockStyles.blockGroup}`]: {\n                  [`.${_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.blockStyles.blockGroup}`]: {\n                    [`.${_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.blockStyles.blockOuter}:not([data-prev-depth-changed])::before`]: {\n                      borderLeft: `1px solid ${e.colors.sideMenu}`\n                    }\n                  }\n                },\n                // Highlight text colors\n                ...Object.fromEntries(\n                  Object.entries(i).map(([y, h]) => [\n                    `[data-text-color=\"${y}\"]`,\n                    { color: h }\n                  ])\n                ),\n                // Highlight background colors\n                ...Object.fromEntries(\n                  Object.entries(s).map(([y, h]) => [\n                    `[data-background-color=\"${y}\"]`,\n                    { backgroundColor: h }\n                  ])\n                )\n              },\n              ((a = e.componentStyles) == null ? void 0 : a.call(e, e).Editor) || {}\n            )\n          };\n        }\n      },\n      Toolbar: {\n        styles: () => {\n          var a;\n          return {\n            root: lodash__WEBPACK_IMPORTED_MODULE_3__.merge(\n              {\n                backgroundColor: e.colors.menu.background,\n                boxShadow: n,\n                border: o,\n                borderRadius: u,\n                flexWrap: \"nowrap\",\n                gap: \"2px\",\n                padding: \"2px\",\n                width: \"fit-content\",\n                // Button (including dropdown target)\n                \".mantine-Button-root, .mantine-ActionIcon-root\": {\n                  backgroundColor: e.colors.menu.background,\n                  border: \"none\",\n                  borderRadius: g,\n                  color: e.colors.menu.text\n                },\n                // Hovered button\n                \".mantine-Button-root:hover, .mantine-ActionIcon-root:hover\": {\n                  backgroundColor: e.colors.hovered.background,\n                  border: \"none\",\n                  color: e.colors.hovered.text\n                },\n                // Selected button\n                \".mantine-Button-root[data-selected], .mantine-ActionIcon-root[data-selected]\": {\n                  backgroundColor: e.colors.selected.background,\n                  border: \"none\",\n                  color: e.colors.selected.text\n                },\n                // Disabled button\n                \".mantine-Button-root[data-disabled], .mantine-ActionIcon-root[data-disabled]\": {\n                  backgroundColor: e.colors.disabled.background,\n                  border: \"none\",\n                  color: e.colors.disabled.text\n                },\n                // Dropdown\n                \".mantine-Menu-dropdown\": {\n                  // Dropdown item\n                  \".mantine-Menu-item\": {\n                    fontSize: \"12px\",\n                    height: \"30px\",\n                    \".mantine-Menu-itemRightSection\": {\n                      paddingLeft: \"5px\"\n                    }\n                  },\n                  \".mantine-Menu-item:hover\": {\n                    backgroundColor: e.colors.hovered.background\n                  }\n                }\n              },\n              ((a = e.componentStyles) == null ? void 0 : a.call(e, e).Toolbar) || {}\n            )\n          };\n        }\n      },\n      ToolbarInputDropdown: {\n        styles: () => {\n          var a;\n          return {\n            root: lodash__WEBPACK_IMPORTED_MODULE_3__.merge(\n              {\n                backgroundColor: e.colors.menu.background,\n                border: o,\n                borderRadius: u,\n                boxShadow: n,\n                color: e.colors.menu.text,\n                gap: \"4px\",\n                minWidth: \"145px\",\n                padding: \"2px\",\n                // Row\n                \".mantine-Group-root\": {\n                  flexWrap: \"nowrap\",\n                  // Row input field\n                  \".mantine-TextInput-root, .mantine-FileInput-root\": {\n                    width: \"300px\",\n                    \".mantine-TextInput-wrapper:hover\": {\n                      backgroundColor: e.colors.hovered.background\n                    },\n                    \".mantine-TextInput-wrapper, .mantine-FileInput-wrapper\": {\n                      padding: 0,\n                      borderRadius: \"4px\",\n                      \".mantine-FileInput-icon\": {\n                        color: e.colors.menu.text\n                      },\n                      \".mantine-TextInput-input, .mantine-FileInput-input\": {\n                        border: \"none\",\n                        fontSize: \"12px\",\n                        \".mantine-FileInput-placeholder\": {\n                          color: e.colors.menu.text\n                        }\n                      },\n                      \".mantine-FileInput-input:hover\": {\n                        backgroundColor: e.colors.hovered.background\n                      }\n                    }\n                  }\n                }\n              },\n              ((a = e.componentStyles) == null ? void 0 : a.call(e, e).EditHyperlinkMenu) || {}\n            )\n          };\n        }\n      },\n      Tooltip: {\n        styles: () => {\n          var a;\n          return {\n            root: lodash__WEBPACK_IMPORTED_MODULE_3__.merge(\n              {\n                backgroundColor: e.colors.tooltip.background,\n                border: o,\n                borderRadius: u,\n                boxShadow: n,\n                color: e.colors.tooltip.text,\n                padding: \"4px 10px\",\n                textAlign: \"center\",\n                \"div ~ div\": {\n                  color: e.colors.tooltip.text\n                }\n              },\n              ((a = e.componentStyles) == null ? void 0 : a.call(e, e).Tooltip) || {}\n            )\n          };\n        }\n      },\n      SlashMenu: {\n        styles: () => {\n          var a;\n          return {\n            root: lodash__WEBPACK_IMPORTED_MODULE_3__.merge(\n              {\n                position: \"relative\",\n                \".mantine-Menu-item\": {\n                  // Icon\n                  \".mantine-Menu-itemIcon\": {\n                    backgroundColor: e.colors.tooltip.background,\n                    borderRadius: g,\n                    color: e.colors.tooltip.text,\n                    padding: \"8px\"\n                  },\n                  // Text\n                  \".mantine-Menu-itemLabel\": {\n                    paddingRight: \"16px\",\n                    \".mantine-Stack-root\": {\n                      gap: \"0\"\n                    }\n                  },\n                  // Badge (keyboard shortcut)\n                  \".mantine-Menu-itemRightSection\": {\n                    \".mantine-Badge-root\": {\n                      backgroundColor: e.colors.tooltip.background,\n                      color: e.colors.tooltip.text\n                    }\n                  }\n                }\n              },\n              ((a = e.componentStyles) == null ? void 0 : a.call(e, e).SlashMenu) || {}\n            )\n          };\n        }\n      },\n      SideMenu: {\n        styles: () => {\n          var a;\n          return {\n            root: lodash__WEBPACK_IMPORTED_MODULE_3__.merge(\n              {\n                backgroundColor: \"transparent\",\n                \".mantine-UnstyledButton-root\": {\n                  backgroundColor: \"transparent\",\n                  color: e.colors.sideMenu\n                },\n                \".mantine-UnstyledButton-root:hover\": {\n                  backgroundColor: e.colors.hovered.background\n                }\n              },\n              ((a = e.componentStyles) == null ? void 0 : a.call(e, e).SideMenu) || {}\n            )\n          };\n        }\n      }\n    },\n    fontFamily: e.fontFamily,\n    other: {\n      textColors: i,\n      backgroundColors: s\n    }\n  };\n}, _e = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((e, n) => {\n  const { classes: o } = (0,_mantine_core__WEBPACK_IMPORTED_MODULE_4__.createStyles)({ root: {} })(void 0, {\n    name: \"Toolbar\"\n  });\n  return /* @__PURE__ */ r.jsx(\n    _mantine_core__WEBPACK_IMPORTED_MODULE_4__.Group,\n    {\n      className: e.className ? `${o.root} ${e.className}` : o.root,\n      ref: n,\n      ...e,\n      children: e.children\n    }\n  );\n});\nvar xt = {\n  color: void 0,\n  size: void 0,\n  className: void 0,\n  style: void 0,\n  attr: void 0\n}, ct = react__WEBPACK_IMPORTED_MODULE_0__.createContext && react__WEBPACK_IMPORTED_MODULE_0__.createContext(xt), W = globalThis && globalThis.__assign || function() {\n  return W = Object.assign || function(e) {\n    for (var n, o = 1, i = arguments.length; o < i; o++) {\n      n = arguments[o];\n      for (var s in n)\n        Object.prototype.hasOwnProperty.call(n, s) && (e[s] = n[s]);\n    }\n    return e;\n  }, W.apply(this, arguments);\n}, Br = globalThis && globalThis.__rest || function(e, n) {\n  var o = {};\n  for (var i in e)\n    Object.prototype.hasOwnProperty.call(e, i) && n.indexOf(i) < 0 && (o[i] = e[i]);\n  if (e != null && typeof Object.getOwnPropertySymbols == \"function\")\n    for (var s = 0, i = Object.getOwnPropertySymbols(e); s < i.length; s++)\n      n.indexOf(i[s]) < 0 && Object.prototype.propertyIsEnumerable.call(e, i[s]) && (o[i[s]] = e[i[s]]);\n  return o;\n};\nfunction mt(e) {\n  return e && e.map(function(n, o) {\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(n.tag, W({\n      key: o\n    }, n.attr), mt(n.child));\n  });\n}\nfunction j(e) {\n  return function(n) {\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_r, W({\n      attr: W({}, e.attr)\n    }, n), mt(e.child));\n  };\n}\nfunction _r(e) {\n  var n = function(o) {\n    var i = e.attr, s = e.size, c = e.title, u = Br(e, [\"attr\", \"size\", \"title\"]), g = s || o.size || \"1em\", a;\n    return o.className && (a = o.className), e.className && (a = (a ? a + \" \" : \"\") + e.className), react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", W({\n      stroke: \"currentColor\",\n      fill: \"currentColor\",\n      strokeWidth: \"0\"\n    }, o.attr, i, u, {\n      className: a,\n      style: W(W({\n        color: e.color || o.color\n      }, o.style), e.style),\n      height: g,\n      width: g,\n      xmlns: \"http://www.w3.org/2000/svg\"\n    }), c && react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"title\", null, c), e.children);\n  };\n  return ct !== void 0 ? react__WEBPACK_IMPORTED_MODULE_0__.createElement(ct.Consumer, null, function(o) {\n    return n(o);\n  }) : n(xt);\n}\nfunction Dr(e) {\n  return j({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"g\", attr: {}, child: [{ tag: \"path\", attr: { fill: \"none\", d: \"M0 0h24v24H0z\" } }, { tag: \"path\", attr: { d: \"M23 12l-7.071 7.071-1.414-1.414L20.172 12l-5.657-5.657 1.414-1.414L23 12zM3.828 12l5.657 5.657-1.414 1.414L1 12l7.071-7.071 1.414 1.414L3.828 12z\" } }] }] })(e);\n}\nfunction Pr(e) {\n  return j({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"g\", attr: {}, child: [{ tag: \"path\", attr: { fill: \"none\", d: \"M0 0h24v24H0z\" } }, { tag: \"path\", attr: { d: \"M3 4h18v2H3V4zm2 15h14v2H5v-2zm-2-5h18v2H3v-2zm2-5h14v2H5V9z\" } }] }] })(e);\n}\nfunction Or(e) {\n  return j({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"g\", attr: {}, child: [{ tag: \"path\", attr: { fill: \"none\", d: \"M0 0h24v24H0z\" } }, { tag: \"path\", attr: { d: \"M3 4h18v2H3V4zm0 15h18v2H3v-2zm0-5h18v2H3v-2zm0-5h18v2H3V9z\" } }] }] })(e);\n}\nfunction Fr(e) {\n  return j({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"g\", attr: {}, child: [{ tag: \"path\", attr: { fill: \"none\", d: \"M0 0h24v24H0z\" } }, { tag: \"path\", attr: { d: \"M3 4h18v2H3V4zm0 15h14v2H3v-2zm0-5h18v2H3v-2zm0-5h14v2H3V9z\" } }] }] })(e);\n}\nfunction Ar(e) {\n  return j({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"g\", attr: {}, child: [{ tag: \"path\", attr: { fill: \"none\", d: \"M0 0h24v24H0z\" } }, { tag: \"path\", attr: { d: \"M3 4h18v2H3V4zm4 15h14v2H7v-2zm-4-5h18v2H3v-2zm4-5h14v2H7V9z\" } }] }] })(e);\n}\nfunction Lr(e) {\n  return j({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"g\", attr: {}, child: [{ tag: \"path\", attr: { fill: \"none\", d: \"M0 0h24v24H0z\" } }, { tag: \"path\", attr: { d: \"M8 11h4.5a2.5 2.5 0 1 0 0-5H8v5zm10 4.5a4.5 4.5 0 0 1-4.5 4.5H6V4h6.5a4.5 4.5 0 0 1 3.256 7.606A4.498 4.498 0 0 1 18 15.5zM8 13v5h5.5a2.5 2.5 0 1 0 0-5H8z\" } }] }] })(e);\n}\nfunction kt(e) {\n  return j({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"g\", attr: {}, child: [{ tag: \"path\", attr: { fill: \"none\", d: \"M0 0H24V24H0z\" } }, { tag: \"path\", attr: { d: \"M13 20h-2v-7H4v7H2V4h2v7h7V4h2v16zm8-12v12h-2v-9.796l-2 .536V8.67L19.5 8H21z\" } }] }] })(e);\n}\nfunction yt(e) {\n  return j({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"g\", attr: {}, child: [{ tag: \"path\", attr: { fill: \"none\", d: \"M0 0H24V24H0z\" } }, { tag: \"path\", attr: { d: \"M4 4v7h7V4h2v16h-2v-7H4v7H2V4h2zm14.5 4c2.071 0 3.75 1.679 3.75 3.75 0 .857-.288 1.648-.772 2.28l-.148.18L18.034 18H22v2h-7v-1.556l4.82-5.546c.268-.307.43-.709.43-1.148 0-.966-.784-1.75-1.75-1.75-.918 0-1.671.707-1.744 1.606l-.006.144h-2C14.75 9.679 16.429 8 18.5 8z\" } }] }] })(e);\n}\nfunction pt(e) {\n  return j({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"g\", attr: {}, child: [{ tag: \"path\", attr: { fill: \"none\", d: \"M0 0H24V24H0z\" } }, { tag: \"path\", attr: { d: \"M22 8l-.002 2-2.505 2.883c1.59.435 2.757 1.89 2.757 3.617 0 2.071-1.679 3.75-3.75 3.75-1.826 0-3.347-1.305-3.682-3.033l1.964-.382c.156.806.866 1.415 1.718 1.415.966 0 1.75-.784 1.75-1.75s-.784-1.75-1.75-1.75c-.286 0-.556.069-.794.19l-1.307-1.547L19.35 10H15V8h7zM4 4v7h7V4h2v16h-2v-7H4v7H2V4h2z\" } }] }] })(e);\n}\nfunction Vr(e) {\n  return j({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"g\", attr: {}, child: [{ tag: \"path\", attr: { fill: \"none\", d: \"M0 0h24v24H0z\" } }, { tag: \"path\", attr: { d: \"M3 4h18v2H3V4zm0 15h18v2H3v-2zm8-5h10v2H11v-2zm0-5h10v2H11V9zm-8 3.5L7 9v7l-4-3.5z\" } }] }] })(e);\n}\nfunction Ur(e) {\n  return j({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"g\", attr: {}, child: [{ tag: \"path\", attr: { fill: \"none\", d: \"M0 0h24v24H0z\" } }, { tag: \"path\", attr: { d: \"M3 4h18v2H3V4zm0 15h18v2H3v-2zm8-5h10v2H11v-2zm0-5h10v2H11V9zm-4 3.5L3 16V9l4 3.5z\" } }] }] })(e);\n}\nfunction Nr(e) {\n  return j({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"g\", attr: {}, child: [{ tag: \"path\", attr: { fill: \"none\", d: \"M0 0h24v24H0z\" } }, { tag: \"path\", attr: { d: \"M15 20H7v-2h2.927l2.116-12H9V4h8v2h-2.927l-2.116 12H15z\" } }] }] })(e);\n}\nfunction $r(e) {\n  return j({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"g\", attr: {}, child: [{ tag: \"path\", attr: { fill: \"none\", d: \"M0 0h24v24H0z\" } }, { tag: \"path\", attr: { d: \"M17 17h5v2h-3v3h-2v-5zM7 7H2V5h3V2h2v5zm11.364 8.536L16.95 14.12l1.414-1.414a5 5 0 1 0-7.071-7.071L9.879 7.05 8.464 5.636 9.88 4.222a7 7 0 0 1 9.9 9.9l-1.415 1.414zm-2.828 2.828l-1.415 1.414a7 7 0 0 1-9.9-9.9l1.415-1.414L7.05 9.88l-1.414 1.414a5 5 0 1 0 7.071 7.071l1.414-1.414 1.415 1.414zm-.708-10.607l1.415 1.415-7.071 7.07-1.415-1.414 7.071-7.07z\" } }] }] })(e);\n}\nfunction Ct(e) {\n  return j({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"g\", attr: {}, child: [{ tag: \"path\", attr: { fill: \"none\", d: \"M0 0h24v24H0z\" } }, { tag: \"path\", attr: { d: \"M18.364 15.536L16.95 14.12l1.414-1.414a5 5 0 1 0-7.071-7.071L9.879 7.05 8.464 5.636 9.88 4.222a7 7 0 0 1 9.9 9.9l-1.415 1.414zm-2.828 2.828l-1.415 1.414a7 7 0 0 1-9.9-9.9l1.415-1.414L7.05 9.88l-1.414 1.414a5 5 0 1 0 7.071 7.071l1.414-1.414 1.415 1.414zm-.708-10.607l1.415 1.415-7.071 7.07-1.415-1.414 7.071-7.07z\" } }] }] })(e);\n}\nfunction jt(e) {\n  return j({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"g\", attr: {}, child: [{ tag: \"path\", attr: { fill: \"none\", d: \"M0 0h24v24H0z\" } }, { tag: \"path\", attr: { d: \"M8 4h13v2H8V4zM5 3v3h1v1H3V6h1V4H3V3h2zM3 14v-2.5h2V11H3v-1h3v2.5H4v.5h2v1H3zm2 5.5H3v-1h2V18H3v-1h3v4H3v-1h2v-.5zM8 11h13v2H8v-2zm0 7h13v2H8v-2z\" } }] }] })(e);\n}\nfunction Tt(e) {\n  return j({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"g\", attr: {}, child: [{ tag: \"path\", attr: { fill: \"none\", d: \"M0 0h24v24H0z\" } }, { tag: \"path\", attr: { d: \"M8 4h13v2H8V4zM4.5 6.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm0 7a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm0 6.9a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zM8 11h13v2H8v-2zm0 7h13v2H8v-2z\" } }] }] })(e);\n}\nfunction Wr(e) {\n  return j({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"g\", attr: {}, child: [{ tag: \"path\", attr: { fill: \"none\", d: \"M0 0h24v24H0z\" } }, { tag: \"path\", attr: { d: \"M17.154 14c.23.516.346 1.09.346 1.72 0 1.342-.524 2.392-1.571 3.147C14.88 19.622 13.433 20 11.586 20c-1.64 0-3.263-.381-4.87-1.144V16.6c1.52.877 3.075 1.316 4.666 1.316 2.551 0 3.83-.732 3.839-2.197a2.21 2.21 0 0 0-.648-1.603l-.12-.117H3v-2h18v2h-3.846zm-4.078-3H7.629a4.086 4.086 0 0 1-.481-.522C6.716 9.92 6.5 9.246 6.5 8.452c0-1.236.466-2.287 1.397-3.153C8.83 4.433 10.271 4 12.222 4c1.471 0 2.879.328 4.222.984v2.152c-1.2-.687-2.515-1.03-3.946-1.03-2.48 0-3.719.782-3.719 2.346 0 .42.218.786.654 1.099.436.313.974.562 1.613.75.62.18 1.297.414 2.03.699z\" } }] }] })(e);\n}\nfunction ie(e) {\n  return j({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"g\", attr: {}, child: [{ tag: \"path\", attr: { fill: \"none\", d: \"M0 0h24v24H0z\" } }, { tag: \"path\", attr: { d: \"M13 6v15h-2V6H5V4h14v2z\" } }] }] })(e);\n}\nfunction Yr(e) {\n  return j({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"g\", attr: {}, child: [{ tag: \"path\", attr: { fill: \"none\", d: \"M0 0h24v24H0z\" } }, { tag: \"path\", attr: { d: \"M8 3v9a4 4 0 1 0 8 0V3h2v9a6 6 0 1 1-12 0V3h2zM4 20h16v2H4v-2z\" } }] }] })(e);\n}\nfunction qr(e) {\n  return j({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"g\", attr: {}, child: [{ tag: \"path\", attr: { fill: \"none\", d: \"M0 0h24v24H0z\" } }, { tag: \"path\", attr: { d: \"M5 11.1l2-2 5.5 5.5 3.5-3.5 3 3V5H5v6.1zM4 3h16a1 1 0 0 1 1 1v16a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1zm11.5 7a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z\" } }] }] })(e);\n}\nfunction Kr(e) {\n  return j({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"g\", attr: {}, child: [{ tag: \"path\", attr: { fill: \"none\", d: \"M0 0H24V24H0z\" } }, { tag: \"path\", attr: { d: \"M20 3c.552 0 1 .448 1 1v1.757l-2 2V5H5v8.1l4-4 4.328 4.329-1.327 1.327-.006 4.239 4.246.006 1.33-1.33L18.899 19H19v-2.758l2-2V20c0 .552-.448 1-1 1H4c-.552 0-1-.448-1-1V4c0-.552.448-1 1-1h16zm1.778 4.808l1.414 1.414L15.414 17l-1.416-.002.002-1.412 7.778-7.778zM15.5 7c.828 0 1.5.672 1.5 1.5s-.672 1.5-1.5 1.5S14 9.328 14 8.5 14.672 7 15.5 7z\" } }] }] })(e);\n}\nfunction Gr(e) {\n  return j({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"g\", attr: {}, child: [{ tag: \"path\", attr: { fill: \"none\", d: \"M0 0h24v24H0z\" } }, { tag: \"path\", attr: { d: \"M10 6v2H5v11h11v-5h2v6a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h6zm11-3v9l-3.794-3.793-5.999 6-1.414-1.414 5.999-6L12 3h9z\" } }] }] })(e);\n}\nfunction Re(e) {\n  return j({ tag: \"svg\", attr: { version: \"1.2\", baseProfile: \"tiny\", viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { d: \"M16.972 6.251c-.967-.538-2.185-.188-2.72.777l-3.713 6.682-2.125-2.125c-.781-.781-2.047-.781-2.828 0-.781.781-.781 2.047 0 2.828l4 4c.378.379.888.587 1.414.587l.277-.02c.621-.087 1.166-.46 1.471-1.009l5-9c.537-.966.189-2.183-.776-2.72z\" } }] })(e);\n}\nfunction Jr(e) {\n  const n = e.icon;\n  return /* @__PURE__ */ r.jsx(\n    _mantine_core__WEBPACK_IMPORTED_MODULE_4__.Menu.Item,\n    {\n      onClick: e.onClick,\n      icon: n && /* @__PURE__ */ r.jsx(n, { size: 16 }),\n      rightSection: e.isSelected ? /* @__PURE__ */ r.jsx(Re, { size: 16 }) : (\n        // Ensures space for tick even if item isn't currently selected.\n        /* @__PURE__ */ r.jsx(\"div\", { style: { width: \"16px\", padding: \"0\" } })\n      ),\n      disabled: e.isDisabled,\n      children: e.text\n    },\n    e.text\n  );\n}\nfunction Xr(e) {\n  return j({ tag: \"svg\", attr: { viewBox: \"0 0 20 20\", fill: \"currentColor\", \"aria-hidden\": \"true\" }, child: [{ tag: \"path\", attr: { fillRule: \"evenodd\", d: \"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\", clipRule: \"evenodd\" } }] })(e);\n}\nfunction Zr(e) {\n  return j({ tag: \"svg\", attr: { viewBox: \"0 0 20 20\", fill: \"currentColor\", \"aria-hidden\": \"true\" }, child: [{ tag: \"path\", attr: { fillRule: \"evenodd\", d: \"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\", clipRule: \"evenodd\" } }] })(e);\n}\nconst Qr = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((e, n) => {\n  const o = e.icon;\n  return /* @__PURE__ */ r.jsx(\n    _mantine_core__WEBPACK_IMPORTED_MODULE_4__.Button,\n    {\n      leftIcon: o && /* @__PURE__ */ r.jsx(o, { size: 16 }),\n      rightIcon: /* @__PURE__ */ r.jsx(Xr, {}),\n      size: \"xs\",\n      variant: \"subtle\",\n      disabled: e.isDisabled,\n      onClick: e.onClick,\n      ref: n,\n      children: e.text\n    }\n  );\n});\nfunction xe() {\n  const e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  return {\n    ref: e,\n    updateMaxHeight: () => {\n      setTimeout(() => {\n        if (e.current && e.current.childElementCount > 0) {\n          e.current.firstElementChild.style.maxHeight = \"none\";\n          const n = e.current.firstElementChild.getBoundingClientRect();\n          e.current.firstElementChild.style.maxHeight = `${Math.min(\n            n.top >= 0 ? window.innerHeight - n.top - 20 : n.bottom - 20\n          )}px`;\n        }\n      }, 10);\n    }\n  };\n}\nfunction en(e) {\n  const n = e.items.filter((s) => s.isSelected)[0], { ref: o, updateMaxHeight: i } = xe();\n  return n ? /* @__PURE__ */ r.jsxs(\n    _mantine_core__WEBPACK_IMPORTED_MODULE_4__.Menu,\n    {\n      exitTransitionDuration: 0,\n      disabled: e.isDisabled,\n      onOpen: i,\n      children: [\n        /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Menu.Target, { children: /* @__PURE__ */ r.jsx(\n          Qr,\n          {\n            text: n.text,\n            icon: n.icon,\n            isDisabled: n.isDisabled\n          }\n        ) }),\n        /* @__PURE__ */ r.jsx(\"div\", { ref: o, children: /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Menu.Dropdown, { children: e.items.map((s) => /* @__PURE__ */ r.jsx(Jr, { ...s }, s.text)) }) })\n      ]\n    }\n  ) : null;\n}\nfunction tn(e, n) {\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => (e._tiptapEditor.on(\"update\", n), () => {\n    e._tiptapEditor.off(\"update\", n);\n  }), [n, e._tiptapEditor]);\n}\nfunction rn(e, n) {\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => (e._tiptapEditor.on(\"selectionUpdate\", n), () => {\n    e._tiptapEditor.off(\"selectionUpdate\", n);\n  }), [n, e._tiptapEditor]);\n}\nfunction q(e, n) {\n  tn(e, n), rn(e, n);\n}\nfunction G(e) {\n  const [n, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    () => {\n      var i;\n      return ((i = e.getSelection()) == null ? void 0 : i.blocks) || [e.getTextCursorPosition().block];\n    }\n  );\n  return q(\n    e,\n    () => {\n      var i;\n      return o(\n        ((i = e.getSelection()) == null ? void 0 : i.blocks) || [e.getTextCursorPosition().block]\n      );\n    }\n  ), n;\n}\nconst nn = [\n  {\n    name: \"Paragraph\",\n    type: \"paragraph\",\n    icon: ie,\n    isSelected: (e) => e.type === \"paragraph\"\n  },\n  {\n    name: \"Heading 1\",\n    type: \"heading\",\n    props: { level: 1 },\n    icon: kt,\n    isSelected: (e) => e.type === \"heading\" && \"level\" in e.props && e.props.level === 1\n  },\n  {\n    name: \"Heading 2\",\n    type: \"heading\",\n    props: { level: 2 },\n    icon: yt,\n    isSelected: (e) => e.type === \"heading\" && \"level\" in e.props && e.props.level === 2\n  },\n  {\n    name: \"Heading 3\",\n    type: \"heading\",\n    props: { level: 3 },\n    icon: pt,\n    isSelected: (e) => e.type === \"heading\" && \"level\" in e.props && e.props.level === 3\n  },\n  {\n    name: \"Bullet List\",\n    type: \"bulletListItem\",\n    icon: Tt,\n    isSelected: (e) => e.type === \"bulletListItem\"\n  },\n  {\n    name: \"Numbered List\",\n    type: \"numberedListItem\",\n    icon: jt,\n    isSelected: (e) => e.type === \"numberedListItem\"\n  }\n], on = (e) => {\n  const n = G(e.editor), [o, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    e.editor.getTextCursorPosition().block\n  ), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => (e.items || nn).filter((g) => {\n    if (!(g.type in e.editor.schema))\n      return !1;\n    for (const [a, y] of Object.entries(g.props || {})) {\n      const h = e.editor.schema[g.type].propSchema;\n      if (!(a in h) || h[a].values !== void 0 && !h[a].values.includes(y))\n        return !1;\n    }\n    return !0;\n  }), [e.editor, e.items]), c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(\n    () => s.find((g) => g.type === o.type) !== void 0,\n    [o.type, s]\n  ), u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const g = (a) => {\n      e.editor.focus();\n      for (const y of n)\n        e.editor.updateBlock(y, {\n          type: a.type,\n          props: a.props\n        });\n    };\n    return s.map((a) => ({\n      text: a.name,\n      icon: a.icon,\n      onClick: () => g(a),\n      isSelected: a.isSelected(o)\n    }));\n  }, [o, s, e.editor, n]);\n  return q(e.editor, () => {\n    i(e.editor.getTextCursorPosition().block);\n  }), c ? /* @__PURE__ */ r.jsx(en, { items: u }) : null;\n}, an = (e) => {\n  const { classes: n } = (0,_mantine_core__WEBPACK_IMPORTED_MODULE_4__.createStyles)({ root: {} })(void 0, {\n    name: \"Tooltip\"\n  });\n  return /* @__PURE__ */ r.jsxs(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Stack, { spacing: 0, className: n.root, children: [\n    /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Text, { size: \"sm\", children: e.mainTooltip }),\n    e.secondaryTooltip && /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Text, { size: \"xs\", children: e.secondaryTooltip })\n  ] });\n}, P = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(\n  (e, n) => {\n    const o = e.icon;\n    return /* @__PURE__ */ r.jsx(\n      _tippyjs_react__WEBPACK_IMPORTED_MODULE_5__,\n      {\n        content: /* @__PURE__ */ r.jsx(\n          an,\n          {\n            mainTooltip: e.mainTooltip,\n            secondaryTooltip: e.secondaryTooltip\n          }\n        ),\n        trigger: \"mouseenter\",\n        children: e.children ? /* @__PURE__ */ r.jsxs(\n          _mantine_core__WEBPACK_IMPORTED_MODULE_4__.Button,\n          {\n            onClick: e.onClick,\n            \"data-selected\": e.isSelected ? \"true\" : void 0,\n            \"data-test\": e.mainTooltip.slice(0, 1).toLowerCase() + e.mainTooltip.replace(/\\s+/g, \"\").slice(1),\n            size: \"xs\",\n            disabled: e.isDisabled || !1,\n            ref: n,\n            children: [\n              o && /* @__PURE__ */ r.jsx(o, {}),\n              e.children\n            ]\n          }\n        ) : /* @__PURE__ */ r.jsx(\n          _mantine_core__WEBPACK_IMPORTED_MODULE_4__.ActionIcon,\n          {\n            onClick: e.onClick,\n            \"data-selected\": e.isSelected ? \"true\" : void 0,\n            \"data-test\": e.mainTooltip.slice(0, 1).toLowerCase() + e.mainTooltip.replace(/\\s+/g, \"\").slice(1),\n            size: 30,\n            disabled: e.isDisabled || !1,\n            ref: n,\n            children: o && /* @__PURE__ */ r.jsx(o, {})\n          }\n        )\n      }\n    );\n  }\n), ln = () => typeof navigator < \"u\" && (/Mac/.test(navigator.platform) || /AppleWebKit/.test(navigator.userAgent) && /Mobile\\/\\w+/.test(navigator.userAgent));\nfunction A(e) {\n  return ln() ? e.replace(\"Mod\", \"⌘\") : e.replace(\"Mod\", \"Ctrl\");\n}\nconst cn = {\n  bold: \"Mod+B\",\n  italic: \"Mod+I\",\n  underline: \"Mod+U\",\n  strike: \"Mod+Shift+X\",\n  code: \"\"\n}, sn = {\n  bold: Lr,\n  italic: Nr,\n  underline: Yr,\n  strike: Wr,\n  code: Dr\n}, he = (e) => {\n  const n = G(e.editor), [o, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    e.toggledStyle in e.editor.getActiveStyles()\n  );\n  q(e.editor, () => {\n    i(e.toggledStyle in e.editor.getActiveStyles());\n  });\n  const s = (u) => {\n    e.editor.focus(), e.editor.toggleStyles({ [u]: !0 });\n  };\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => !!n.find((u) => u.content !== void 0), [n]) ? /* @__PURE__ */ r.jsx(\n    P,\n    {\n      onClick: () => s(e.toggledStyle),\n      isSelected: o,\n      mainTooltip: e.toggledStyle.slice(0, 1).toUpperCase() + e.toggledStyle.slice(1),\n      secondaryTooltip: A(cn[e.toggledStyle]),\n      icon: sn[e.toggledStyle]\n    }\n  ) : null;\n}, dn = {\n  left: Fr,\n  center: Pr,\n  right: Ar,\n  justify: Or\n}, Se = (e) => {\n  const n = G(e.editor), o = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const c = n[0];\n    if (\"textAlignment\" in c.props)\n      return c.props.textAlignment;\n  }, [n]), i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (c) => {\n      e.editor.focus();\n      for (const u of n)\n        e.editor.updateBlock(u, {\n          props: { textAlignment: c }\n        });\n    },\n    [e.editor, n]\n  );\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => !!n.find((c) => \"textAlignment\" in c.props), [n]) ? /* @__PURE__ */ r.jsx(\n    P,\n    {\n      onClick: () => i(e.textAlignment),\n      isSelected: o === e.textAlignment,\n      mainTooltip: e.textAlignment === \"justify\" ? \"Justify Text\" : \"Align Text \" + e.textAlignment.slice(0, 1).toUpperCase() + e.textAlignment.slice(1),\n      icon: dn[e.textAlignment]\n    }\n  ) : null;\n}, Ee = (e) => {\n  const { classes: n } = (0,_mantine_core__WEBPACK_IMPORTED_MODULE_4__.createStyles)({ root: {} })(void 0, {\n    name: \"ColorIcon\"\n  }), o = e.textColor || \"default\", i = e.backgroundColor || \"default\", s = e.size || 16;\n  return /* @__PURE__ */ r.jsx(\n    _mantine_core__WEBPACK_IMPORTED_MODULE_4__.Box,\n    {\n      className: n.root,\n      sx: (c) => ({\n        pointerEvents: \"none\",\n        backgroundColor: c.other.backgroundColors[i],\n        color: c.other.textColors[o],\n        fontSize: (s * 0.75).toString() + \"px\",\n        height: s.toString() + \"px\",\n        lineHeight: s.toString() + \"px\",\n        textAlign: \"center\",\n        width: s.toString() + \"px\"\n      }),\n      children: \"A\"\n    }\n  );\n}, wt = (e) => {\n  const n = () => e.text ? /* @__PURE__ */ r.jsxs(r.Fragment, { children: [\n    /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Menu.Label, { children: \"Text\" }),\n    [\n      \"default\",\n      \"gray\",\n      \"brown\",\n      \"red\",\n      \"orange\",\n      \"yellow\",\n      \"green\",\n      \"blue\",\n      \"purple\",\n      \"pink\"\n    ].map((i) => /* @__PURE__ */ r.jsx(\n      _mantine_core__WEBPACK_IMPORTED_MODULE_4__.Menu.Item,\n      {\n        onClick: () => {\n          e.onClick && e.onClick(), e.text.setColor(i);\n        },\n        component: \"div\",\n        \"data-test\": \"text-color-\" + i,\n        icon: /* @__PURE__ */ r.jsx(Ee, { textColor: i, size: e.iconSize }),\n        rightSection: e.text.color === i ? /* @__PURE__ */ r.jsx(Re, { size: 16, style: { paddingLeft: \"8px\" } }) : /* @__PURE__ */ r.jsx(\"div\", { style: { width: \"24px\", padding: \"0\" } }),\n        children: i.charAt(0).toUpperCase() + i.slice(1)\n      },\n      \"text-color-\" + i\n    ))\n  ] }) : null, o = () => e.background ? /* @__PURE__ */ r.jsxs(r.Fragment, { children: [\n    /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Menu.Label, { children: \"Background\" }),\n    [\n      \"default\",\n      \"gray\",\n      \"brown\",\n      \"red\",\n      \"orange\",\n      \"yellow\",\n      \"green\",\n      \"blue\",\n      \"purple\",\n      \"pink\"\n    ].map((i) => /* @__PURE__ */ r.jsx(\n      _mantine_core__WEBPACK_IMPORTED_MODULE_4__.Menu.Item,\n      {\n        onClick: () => {\n          e.onClick && e.onClick(), e.background.setColor(i);\n        },\n        component: \"div\",\n        \"data-test\": \"background-color-\" + i,\n        icon: /* @__PURE__ */ r.jsx(Ee, { backgroundColor: i, size: e.iconSize }),\n        rightSection: e.background.color === i ? /* @__PURE__ */ r.jsx(Re, { size: 16, style: { paddingLeft: \"8px\" } }) : /* @__PURE__ */ r.jsx(\"div\", { style: { width: \"24px\", padding: \"0\" } }),\n        children: i.charAt(0).toUpperCase() + i.slice(1)\n      },\n      \"background-color-\" + i\n    ))\n  ] }) : null;\n  return /* @__PURE__ */ r.jsxs(r.Fragment, { children: [\n    /* @__PURE__ */ r.jsx(n, {}),\n    /* @__PURE__ */ r.jsx(o, {})\n  ] });\n}, un = (e) => {\n  const n = G(e.editor), [o, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    e.editor.getActiveStyles().textColor || \"default\"\n  ), [s, c] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    e.editor.getActiveStyles().backgroundColor || \"default\"\n  );\n  q(e.editor, () => {\n    i(e.editor.getActiveStyles().textColor || \"default\"), c(\n      e.editor.getActiveStyles().backgroundColor || \"default\"\n    );\n  });\n  const { ref: u, updateMaxHeight: g } = xe(), a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (p) => {\n      e.editor.focus(), p === \"default\" ? e.editor.removeStyles({ textColor: p }) : e.editor.addStyles({ textColor: p });\n    },\n    [e.editor]\n  ), y = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (p) => {\n      e.editor.focus(), p === \"default\" ? e.editor.removeStyles({ backgroundColor: p }) : e.editor.addStyles({ backgroundColor: p });\n    },\n    [e.editor]\n  );\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    for (const p of n)\n      if (p.content !== void 0)\n        return !0;\n    return !1;\n  }, [n]) ? /* @__PURE__ */ r.jsxs(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Menu, { onOpen: g, children: [\n    /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Menu.Target, { children: /* @__PURE__ */ r.jsx(\n      P,\n      {\n        mainTooltip: \"Colors\",\n        icon: () => /* @__PURE__ */ r.jsx(\n          Ee,\n          {\n            textColor: o,\n            backgroundColor: s,\n            size: 20\n          }\n        )\n      }\n    ) }),\n    /* @__PURE__ */ r.jsx(\"div\", { ref: u, children: /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Menu.Dropdown, { children: /* @__PURE__ */ r.jsx(\n      wt,\n      {\n        text: {\n          color: o,\n          setColor: a\n        },\n        background: {\n          color: s,\n          setColor: y\n        }\n      }\n    ) }) })\n  ] }) : null;\n}, gn = (e) => {\n  const [n, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n  q(e.editor, () => {\n    o(e.editor.canNestBlock());\n  });\n  const i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    e.editor.focus(), e.editor.nestBlock();\n  }, [e.editor]);\n  return /* @__PURE__ */ r.jsx(\n    P,\n    {\n      onClick: i,\n      isDisabled: !n,\n      mainTooltip: \"Nest Block\",\n      secondaryTooltip: A(\"Tab\"),\n      icon: Ur\n    }\n  );\n}, fn = (e) => {\n  const [n, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n  q(e.editor, () => {\n    o(e.editor.canUnnestBlock());\n  });\n  const i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    e.editor.focus(), e.editor.unnestBlock();\n  }, [e]);\n  return /* @__PURE__ */ r.jsx(\n    P,\n    {\n      onClick: i,\n      isDisabled: !n,\n      mainTooltip: \"Unnest Block\",\n      secondaryTooltip: A(\"Shift+Tab\"),\n      icon: Vr\n    }\n  );\n}, St = (e) => {\n  const [n, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    o(!1);\n  }, []), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    o(!0);\n  }, []);\n  return /* @__PURE__ */ r.jsx(\n    _tippyjs_react__WEBPACK_IMPORTED_MODULE_5__,\n    {\n      onShow: (c) => {\n        var u;\n        s(), (u = e.onShow) == null || u.call(e, c);\n      },\n      onHidden: (c) => {\n        var u;\n        i(), (u = e.onShow) == null || u.call(e, c);\n      },\n      content: n ? e.children[1] : null,\n      trigger: e.visible === void 0 ? \"click\" : void 0,\n      interactive: !0,\n      maxWidth: 500,\n      zIndex: 9e3,\n      ...e,\n      children: e.children[0]\n    }\n  );\n}, Mt = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ className: e, ...n }, o) => {\n  const { classes: i } = (0,_mantine_core__WEBPACK_IMPORTED_MODULE_4__.createStyles)({ root: {} })(void 0, {\n    name: \"ToolbarInputDropdown\"\n  });\n  return /* @__PURE__ */ r.jsx(\n    _mantine_core__WEBPACK_IMPORTED_MODULE_4__.Stack,\n    {\n      ...n,\n      className: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.mergeCSSClasses)(i.root, e || \"\"),\n      ref: o,\n      children: n.children\n    }\n  );\n}), hn = {\n  text: _mantine_core__WEBPACK_IMPORTED_MODULE_4__.TextInput,\n  file: _mantine_core__WEBPACK_IMPORTED_MODULE_4__.FileInput\n}, ze = (e) => {\n  const n = e.icon, o = hn[e.type];\n  return /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Group, { children: /* @__PURE__ */ r.jsx(o, { size: \"xs\", icon: /* @__PURE__ */ r.jsx(n, {}), ...e.inputProps }) });\n}, Rt = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ url: e, text: n, update: o, ...i }, s) => {\n  const [c, u] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(e), [g, a] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(n);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    u(e), a(n);\n  }, [n, e]);\n  const y = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (T) => {\n      T.key === \"Enter\" && (T.preventDefault(), o(c, g));\n    },\n    [o, c, g]\n  ), h = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (T) => u(T.currentTarget.value),\n    []\n  ), p = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (T) => a(T.currentTarget.value),\n    []\n  ), S = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    () => o(c, g),\n    [o, c, g]\n  );\n  return /* @__PURE__ */ r.jsxs(Mt, { ...i, ref: s, children: [\n    /* @__PURE__ */ r.jsx(\n      ze,\n      {\n        type: \"text\",\n        icon: Ct,\n        inputProps: {\n          autoFocus: !0,\n          placeholder: \"Edit URL\",\n          value: c,\n          onKeyDown: y,\n          onChange: h,\n          onSubmit: S\n        }\n      }\n    ),\n    /* @__PURE__ */ r.jsx(\n      ze,\n      {\n        type: \"text\",\n        icon: ie,\n        inputProps: {\n          placeholder: \"Edit Title\",\n          value: g,\n          onKeyDown: y,\n          onChange: p,\n          onSubmit: S\n        }\n      }\n    )\n  ] });\n}), vn = (e) => {\n  const n = G(e.editor), [o, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    e.editor.getSelectedLinkUrl() || \"\"\n  ), [s, c] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(e.editor.getSelectedText());\n  q(e.editor, () => {\n    c(e.editor.getSelectedText() || \"\"), i(e.editor.getSelectedLinkUrl() || \"\");\n  });\n  const u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (a, y) => {\n      e.editor.createLink(a, y), e.editor.focus();\n    },\n    [e.editor]\n  );\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    for (const a of n)\n      if (a.content === void 0)\n        return !1;\n    return !0;\n  }, [n]) ? /* @__PURE__ */ r.jsxs(St, { children: [\n    /* @__PURE__ */ r.jsx(\n      P,\n      {\n        mainTooltip: \"Create Link\",\n        secondaryTooltip: A(\"Mod+K\"),\n        icon: Ct\n      }\n    ),\n    /* @__PURE__ */ r.jsx(Rt, { url: o, text: s, update: u })\n  ] }) : null;\n}, Et = (e) => {\n  const [n, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    e.editor.uploadFile !== void 0 ? \"upload\" : \"embed\"\n  ), [i, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [c, u] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    c && setTimeout(() => {\n      u(!1);\n    }, 3e3);\n  }, [c]);\n  const g = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    async (T) => {\n      if (s(!0), e.editor.uploadFile !== void 0)\n        try {\n          const D = await e.editor.uploadFile(T);\n          e.editor.updateBlock(e.block, {\n            type: \"image\",\n            props: {\n              url: D\n            }\n          });\n        } catch {\n          u(!0);\n        } finally {\n          s(!1);\n        }\n    },\n    [e.block, e.editor]\n  ), [a, y] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), h = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (T) => {\n      y(T.currentTarget.value);\n    },\n    []\n  ), p = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (T) => {\n      T.key === \"Enter\" && (T.preventDefault(), e.editor.updateBlock(e.block, {\n        type: \"image\",\n        props: {\n          url: a\n        }\n      }));\n    },\n    [a, e.block, e.editor]\n  ), S = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    e.editor.updateBlock(e.block, {\n      type: \"image\",\n      props: {\n        url: a\n      }\n    });\n  }, [a, e.block, e.editor]);\n  return /* @__PURE__ */ r.jsx(\n    _e,\n    {\n      style: {\n        width: \"500px\"\n      },\n      children: /* @__PURE__ */ r.jsxs(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Tabs, { value: n, onTabChange: o, children: [\n        i && /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.LoadingOverlay, { visible: i }),\n        /* @__PURE__ */ r.jsxs(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Tabs.List, { children: [\n          e.editor.uploadFile !== void 0 && /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Tabs.Tab, { value: \"upload\", \"data-test\": \"upload-tab\", children: \"Upload\" }),\n          /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Tabs.Tab, { value: \"embed\", \"data-test\": \"embed-tab\", children: \"Embed\" })\n        ] }),\n        e.editor.uploadFile !== void 0 && /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Tabs.Panel, { value: \"upload\", children: /* @__PURE__ */ r.jsxs(\n          \"div\",\n          {\n            style: {\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"stretch\",\n              gap: \"8px\"\n            },\n            children: [\n              /* @__PURE__ */ r.jsx(\n                _mantine_core__WEBPACK_IMPORTED_MODULE_4__.FileInput,\n                {\n                  placeholder: \"Upload Image\",\n                  size: \"xs\",\n                  value: null,\n                  onChange: g,\n                  \"data-test\": \"upload-input\"\n                }\n              ),\n              c && /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Text, { color: \"red\", size: 12, style: { textAlign: \"center\" }, children: \"Error: Upload failed\" })\n            ]\n          }\n        ) }),\n        /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Tabs.Panel, { value: \"embed\", children: /* @__PURE__ */ r.jsxs(\n          \"div\",\n          {\n            style: {\n              width: \"100%\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n              gap: \"8px\"\n            },\n            children: [\n              /* @__PURE__ */ r.jsx(\n                _mantine_core__WEBPACK_IMPORTED_MODULE_4__.TextInput,\n                {\n                  size: \"xs\",\n                  placeholder: \"Enter URL\",\n                  value: a,\n                  onChange: h,\n                  onKeyDown: p,\n                  style: { width: \"100%\" },\n                  \"data-test\": \"embed-input\"\n                }\n              ),\n              /* @__PURE__ */ r.jsx(\n                _mantine_core__WEBPACK_IMPORTED_MODULE_4__.Button,\n                {\n                  onClick: S,\n                  size: \"xs\",\n                  \"data-test\": \"embed-input-button\",\n                  children: \"Embed Image\"\n                }\n              )\n            ]\n          }\n        ) })\n      ] })\n    }\n  );\n}, bn = (e) => {\n  const n = G(e.editor), [o, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    i(!1);\n  }, [n]), // Checks if only one block is selected.\n  n.length === 1 && // Checks if the selected block is an image.\n  n[0].type === \"image\" ? /* @__PURE__ */ r.jsx(\n    _tippyjs_react__WEBPACK_IMPORTED_MODULE_5__,\n    {\n      visible: o,\n      interactive: !0,\n      content: /* @__PURE__ */ r.jsx(\n        Et,\n        {\n          block: n[0],\n          editor: e.editor\n        }\n      ),\n      children: /* @__PURE__ */ r.jsx(\n        P,\n        {\n          onClick: () => i(!o),\n          isSelected: o,\n          mainTooltip: \"Replace Image\",\n          icon: Kr\n        }\n      )\n    }\n  ) : null;\n}, xn = (e) => {\n  const n = G(e.editor), o = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(\n    () => (\n      // Checks if only one block is selected.\n      n.length === 1 && // Checks if the selected block is an image.\n      n[0].type === \"image\" && // Checks if the block has a `caption` prop which can take any string\n      // value.\n      \"caption\" in e.editor.schema.image.propSchema && typeof e.editor.schema.image.propSchema.caption.default == \"string\" && e.editor.schema.image.propSchema.caption.values === void 0 && // Checks if the block has a `src` prop which can take any string value.\n      \"src\" in e.editor.schema.image.propSchema && typeof e.editor.schema.image.propSchema.src.default == \"string\" && e.editor.schema.image.propSchema.src.values === void 0 && // Checks if the `src` prop is not set to an empty string.\n      n[0].props.src !== \"\"\n    ),\n    [e.editor.schema, n]\n  ), [i, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    o ? n[0].props.caption : \"\"\n  );\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(\n    () => s(\n      o ? n[0].props.caption : \"\"\n    ),\n    [n, o]\n  );\n  const c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (g) => {\n      g.key === \"Enter\" && (g.preventDefault(), e.editor.updateBlock(n[0], {\n        type: \"image\",\n        props: {\n          caption: i\n        }\n      }));\n    },\n    [i, e.editor, n]\n  ), u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (g) => s(g.currentTarget.value),\n    []\n  );\n  return o ? /* @__PURE__ */ r.jsxs(St, { children: [\n    /* @__PURE__ */ r.jsx(\n      P,\n      {\n        mainTooltip: \"Edit Caption\",\n        icon: ie,\n        isSelected: n[0].props.caption !== \"\"\n      }\n    ),\n    /* @__PURE__ */ r.jsx(Mt, { children: /* @__PURE__ */ r.jsx(\n      ze,\n      {\n        type: \"text\",\n        icon: ie,\n        inputProps: {\n          autoFocus: !0,\n          placeholder: \"Edit Caption\",\n          value: i,\n          onKeyDown: c,\n          onChange: u\n        }\n      }\n    ) })\n  ] }) : null;\n}, mn = (e) => /* @__PURE__ */ r.jsxs(_e, { children: [\n  /* @__PURE__ */ r.jsx(on, { ...e, items: e.blockTypeDropdownItems }),\n  /* @__PURE__ */ r.jsx(xn, { editor: e.editor }),\n  /* @__PURE__ */ r.jsx(bn, { editor: e.editor }),\n  /* @__PURE__ */ r.jsx(he, { editor: e.editor, toggledStyle: \"bold\" }),\n  /* @__PURE__ */ r.jsx(he, { editor: e.editor, toggledStyle: \"italic\" }),\n  /* @__PURE__ */ r.jsx(he, { editor: e.editor, toggledStyle: \"underline\" }),\n  /* @__PURE__ */ r.jsx(he, { editor: e.editor, toggledStyle: \"strike\" }),\n  /* @__PURE__ */ r.jsx(Se, { editor: e.editor, textAlignment: \"left\" }),\n  /* @__PURE__ */ r.jsx(Se, { editor: e.editor, textAlignment: \"center\" }),\n  /* @__PURE__ */ r.jsx(Se, { editor: e.editor, textAlignment: \"right\" }),\n  /* @__PURE__ */ r.jsx(un, { editor: e.editor }),\n  /* @__PURE__ */ r.jsx(gn, { editor: e.editor }),\n  /* @__PURE__ */ r.jsx(fn, { editor: e.editor }),\n  /* @__PURE__ */ r.jsx(vn, { editor: e.editor })\n] }), st = (e) => {\n  switch (e) {\n    case \"left\":\n      return \"top-start\";\n    case \"center\":\n      return \"top\";\n    case \"right\":\n      return \"top-end\";\n    default:\n      return \"top-start\";\n  }\n}, kn = (e) => {\n  const [n, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [i, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    () => {\n      const a = e.editor.getTextCursorPosition().block;\n      return \"textAlignment\" in a.props ? st(\n        a.props.textAlignment\n      ) : \"top-start\";\n    }\n  ), c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => (_tippyjs_react__WEBPACK_IMPORTED_MODULE_5__.tippy.setDefaultProps({ maxWidth: \"\" }), e.editor.formattingToolbar.onUpdate((a) => {\n    o(a.show), c.current = a.referencePos;\n  })), [e.editor]), q(e.editor, () => {\n    const a = e.editor.getTextCursorPosition().block;\n    \"textAlignment\" in a.props ? s(\n      st(\n        a.props.textAlignment\n      )\n    ) : s(\"top-start\");\n  });\n  const u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(\n    () => {\n      if (c)\n        return () => c.current;\n    },\n    [c.current]\n    // eslint-disable-line\n  ), g = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const a = e.formattingToolbar || mn;\n    return /* @__PURE__ */ r.jsx(a, { editor: e.editor });\n  }, [e.editor, e.formattingToolbar]);\n  return /* @__PURE__ */ r.jsx(\n    _tippyjs_react__WEBPACK_IMPORTED_MODULE_5__,\n    {\n      appendTo: e.editor.domElement.parentElement,\n      content: g,\n      getReferenceClientRect: u,\n      interactive: !0,\n      visible: n,\n      animation: \"fade\",\n      placement: i,\n      sticky: !0,\n      plugins: yn,\n      zIndex: 3e3\n    }\n  );\n}, yn = [tippy_js__WEBPACK_IMPORTED_MODULE_6__.sticky], pn = (e) => {\n  const [n, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  return n ? /* @__PURE__ */ r.jsx(\n    Rt,\n    {\n      url: e.url,\n      text: e.text,\n      update: e.editHyperlink,\n      onBlur: (s) => setTimeout(() => {\n        var c;\n        (c = i.current) != null && c.contains(s.relatedTarget) || o(!1);\n      }, 500),\n      ref: i\n    }\n  ) : /* @__PURE__ */ r.jsxs(\n    _e,\n    {\n      onMouseEnter: e.stopHideTimer,\n      onMouseLeave: e.startHideTimer,\n      children: [\n        /* @__PURE__ */ r.jsx(\n          P,\n          {\n            mainTooltip: \"Edit\",\n            isSelected: !1,\n            onClick: () => o(!0),\n            children: \"Edit Link\"\n          }\n        ),\n        /* @__PURE__ */ r.jsx(\n          P,\n          {\n            mainTooltip: \"Open in new tab\",\n            isSelected: !1,\n            onClick: () => {\n              window.open(e.url, \"_blank\");\n            },\n            icon: Gr\n          }\n        ),\n        /* @__PURE__ */ r.jsx(\n          P,\n          {\n            mainTooltip: \"Remove link\",\n            isSelected: !1,\n            onClick: e.deleteHyperlink,\n            icon: $r\n          }\n        )\n      ]\n    }\n  );\n}, Cn = (e) => {\n  const [n, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [i, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), [c, u] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), g = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => e.editor.hyperlinkToolbar.on(\n    \"update\",\n    (h) => {\n      o(h.show), s(h.url), u(h.text), g.current = h.referencePos;\n    }\n  ), [e.editor]);\n  const a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(\n    () => {\n      if (g.current)\n        return () => g.current;\n    },\n    [g.current]\n    // eslint-disable-line\n  ), y = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    if (!i || !c)\n      return null;\n    const h = e.hyperlinkToolbar || pn;\n    return /* @__PURE__ */ r.jsx(\n      h,\n      {\n        url: i,\n        text: c,\n        editHyperlink: e.editor.hyperlinkToolbar.editHyperlink,\n        deleteHyperlink: e.editor.hyperlinkToolbar.deleteHyperlink,\n        startHideTimer: e.editor.hyperlinkToolbar.startHideTimer,\n        stopHideTimer: e.editor.hyperlinkToolbar.stopHideTimer\n      }\n    );\n  }, [e.hyperlinkToolbar, e.editor, c, i]);\n  return /* @__PURE__ */ r.jsx(\n    _tippyjs_react__WEBPACK_IMPORTED_MODULE_5__,\n    {\n      appendTo: e.editor.domElement.parentElement,\n      content: y,\n      getReferenceClientRect: a,\n      interactive: !0,\n      visible: n,\n      animation: \"fade\",\n      placement: \"top-start\",\n      zIndex: 4e3\n    }\n  );\n}, jn = (e) => {\n  const { classes: n } = (0,_mantine_core__WEBPACK_IMPORTED_MODULE_4__.createStyles)({ root: {} })(void 0, {\n    name: \"SideMenu\"\n  });\n  return /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Group, { className: n.root, spacing: 0, children: e.children });\n};\nfunction Tn(e) {\n  return j({ tag: \"svg\", attr: { t: \"1551322312294\", style: \"\", viewBox: \"0 0 1024 1024\", version: \"1.1\" }, child: [{ tag: \"defs\", attr: {}, child: [] }, { tag: \"path\", attr: { d: \"M474 152m8 0l60 0q8 0 8 8l0 704q0 8-8 8l-60 0q-8 0-8-8l0-704q0-8 8-8Z\" } }, { tag: \"path\", attr: { d: \"M168 474m8 0l672 0q8 0 8 8l0 60q0 8-8 8l-672 0q-8 0-8-8l0-60q0-8 8-8Z\" } }] })(e);\n}\nconst zt = (e) => /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.ActionIcon, { size: 24, children: e.children }), wn = (e) => /* @__PURE__ */ r.jsx(zt, { children: /* @__PURE__ */ r.jsx(\n  Tn,\n  {\n    size: 24,\n    onClick: e.addBlock,\n    \"data-test\": \"dragHandleAdd\"\n  }\n) });\nfunction Sn(e) {\n  return j({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { fill: \"none\", d: \"M0 0h24v24H0V0z\" } }, { tag: \"path\", attr: { d: \"M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\" } }] })(e);\n}\nconst Mn = (e) => {\n  const { classes: n } = (0,_mantine_core__WEBPACK_IMPORTED_MODULE_4__.createStyles)({ root: {} })(void 0, {\n    name: \"DragHandleMenu\"\n  });\n  return /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Menu.Dropdown, { className: n.root, style: { overflow: \"visible\" }, children: e.children });\n}, Ht = (e) => {\n  const { children: n, ...o } = e;\n  return /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Menu.Item, { ...o, children: n });\n}, Rn = (e) => /* @__PURE__ */ r.jsx(\n  Ht,\n  {\n    onClick: () => e.editor.removeBlocks([e.block]),\n    children: e.children\n  }\n), En = (e) => {\n  const [n, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), { ref: i, updateMaxHeight: s } = xe(), c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    c.current && clearTimeout(c.current), c.current = setTimeout(() => {\n      o(!1);\n    }, 250);\n  }, []), g = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    c.current && clearTimeout(c.current), n || s(), o(!0);\n  }, [n, s]);\n  return !(\"textColor\" in e.block.props) && !(\"backgroundColor\" in e.block.props) ? null : /* @__PURE__ */ r.jsx(\n    Ht,\n    {\n      onMouseLeave: u,\n      onMouseOver: g,\n      children: /* @__PURE__ */ r.jsxs(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Menu, { opened: n, position: \"right\", children: [\n        /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Menu.Target, { children: /* @__PURE__ */ r.jsxs(\"div\", { style: { display: \"flex\", alignItems: \"center\" }, children: [\n          /* @__PURE__ */ r.jsx(\"div\", { style: { flex: 1 }, children: e.children }),\n          /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Box, { style: { display: \"flex\", alignItems: \"center\" }, children: /* @__PURE__ */ r.jsx(Zr, { size: 15 }) })\n        ] }) }),\n        /* @__PURE__ */ r.jsx(\"div\", { ref: i, children: /* @__PURE__ */ r.jsx(\n          _mantine_core__WEBPACK_IMPORTED_MODULE_4__.Menu.Dropdown,\n          {\n            onMouseLeave: u,\n            onMouseOver: g,\n            style: { marginLeft: \"5px\" },\n            children: /* @__PURE__ */ r.jsx(\n              wt,\n              {\n                iconSize: 18,\n                text: \"textColor\" in e.block.props && typeof e.block.props.textColor == \"string\" ? {\n                  color: e.block.props.textColor,\n                  setColor: (a) => e.editor.updateBlock(e.block, {\n                    props: { textColor: a }\n                  })\n                } : void 0,\n                background: \"backgroundColor\" in e.block.props && typeof e.block.props.backgroundColor == \"string\" ? {\n                  color: e.block.props.backgroundColor,\n                  setColor: (a) => e.editor.updateBlock(e.block, {\n                    props: { backgroundColor: a }\n                  })\n                } : void 0\n              }\n            )\n          }\n        ) })\n      ] })\n    }\n  );\n}, zn = (e) => /* @__PURE__ */ r.jsxs(Mn, { children: [\n  /* @__PURE__ */ r.jsx(Rn, { ...e, children: \"Delete\" }),\n  /* @__PURE__ */ r.jsx(En, { ...e, children: \"Colors\" })\n] }), Hn = (e) => {\n  const n = e.dragHandleMenu || zn;\n  return /* @__PURE__ */ r.jsxs(\n    _mantine_core__WEBPACK_IMPORTED_MODULE_4__.Menu,\n    {\n      trigger: \"click\",\n      onOpen: e.freezeMenu,\n      onClose: e.unfreezeMenu,\n      width: 100,\n      position: \"left\",\n      children: [\n        /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Menu.Target, { children: /* @__PURE__ */ r.jsx(\n          \"div\",\n          {\n            draggable: \"true\",\n            onDragStart: e.blockDragStart,\n            onDragEnd: e.blockDragEnd,\n            children: /* @__PURE__ */ r.jsx(zt, { children: /* @__PURE__ */ r.jsx(Sn, { size: 24, \"data-test\": \"dragHandle\" }) })\n          }\n        ) }),\n        /* @__PURE__ */ r.jsx(n, { editor: e.editor, block: e.block })\n      ]\n    }\n  );\n}, In = (e) => /* @__PURE__ */ r.jsxs(jn, { children: [\n  /* @__PURE__ */ r.jsx(wn, { ...e }),\n  /* @__PURE__ */ r.jsx(Hn, { ...e })\n] }), Bn = (e) => {\n  const [n, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [i, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => e.editor.sideMenu.onUpdate((a) => {\n    o(a.show), s(a.block), c.current = a.referencePos;\n  }), [e.editor]);\n  const u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(\n    () => {\n      if (c.current)\n        return () => c.current;\n    },\n    [c.current]\n    // eslint-disable-line\n  ), g = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    if (!i)\n      return null;\n    const a = e.sideMenu || In;\n    return /* @__PURE__ */ r.jsx(\n      a,\n      {\n        block: i,\n        editor: e.editor,\n        blockDragStart: e.editor.sideMenu.blockDragStart,\n        blockDragEnd: e.editor.sideMenu.blockDragEnd,\n        addBlock: e.editor.sideMenu.addBlock,\n        freezeMenu: e.editor.sideMenu.freezeMenu,\n        unfreezeMenu: e.editor.sideMenu.unfreezeMenu\n      }\n    );\n  }, [i, e.editor, e.sideMenu]);\n  return /* @__PURE__ */ r.jsx(\n    _tippyjs_react__WEBPACK_IMPORTED_MODULE_5__,\n    {\n      appendTo: e.editor.domElement.parentElement,\n      content: g,\n      getReferenceClientRect: u,\n      interactive: !0,\n      visible: n,\n      animation: \"fade\",\n      offset: _n,\n      placement: \"left\",\n      popperOptions: Dn,\n      zIndex: 1e3\n    }\n  );\n}, _n = [0, 0], Dn = {\n  modifiers: [\n    {\n      name: \"flip\",\n      options: {\n        fallbackPlacements: []\n      }\n    },\n    {\n      name: \"preventOverflow\",\n      options: {\n        mainAxis: !1,\n        altAxis: !1\n      }\n    }\n  ]\n}, Pn = 5;\nfunction On(e) {\n  const n = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), { classes: o } = (0,_mantine_core__WEBPACK_IMPORTED_MODULE_4__.createStyles)({ root: {} })(void 0, {\n    name: \"SuggestionListItem\"\n  });\n  function i() {\n    var g;\n    const c = e.isSelected, u = (g = n.current) == null ? void 0 : g.matches(\":hover\");\n    return c || u;\n  }\n  function s() {\n    var c, u;\n    i() ? (c = n.current) == null || c.setAttribute(\"data-hovered\", \"true\") : (u = n.current) == null || u.removeAttribute(\"data-hovered\");\n  }\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    s(), i() && n.current && n.current.getBoundingClientRect().left > Pn && n.current.scrollIntoView({\n      behavior: \"smooth\",\n      block: \"nearest\"\n    });\n  }), /* @__PURE__ */ r.jsx(\n    _mantine_core__WEBPACK_IMPORTED_MODULE_4__.Menu.Item,\n    {\n      className: o.root,\n      icon: e.icon,\n      onClick: e.set,\n      closeMenuOnClick: !1,\n      onMouseLeave: () => {\n        setTimeout(() => {\n          s();\n        }, 1);\n      },\n      ref: n,\n      rightSection: e.shortcut && /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Badge, { size: \"xs\", children: e.shortcut }),\n      children: /* @__PURE__ */ r.jsxs(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Stack, { children: [\n        /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Text, { size: 14, weight: 500, children: e.name }),\n        /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Text, { size: 10, children: e.hint })\n      ] })\n    }\n  );\n}\nfunction Fn(e) {\n  const { classes: n } = (0,_mantine_core__WEBPACK_IMPORTED_MODULE_4__.createStyles)({ root: {} })(void 0, {\n    name: \"SlashMenu\"\n  }), o = [];\n  let i = 0;\n  const s = lodash__WEBPACK_IMPORTED_MODULE_3__.groupBy(e.filteredItems, (c) => c.group);\n  return lodash__WEBPACK_IMPORTED_MODULE_3__.forEach(s, (c) => {\n    o.push(\n      /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Menu.Label, { children: c[0].group }, c[0].group)\n    );\n    for (const u of c)\n      o.push(\n        /* @__PURE__ */ r.jsx(\n          On,\n          {\n            name: u.name,\n            icon: u.icon,\n            hint: u.hint,\n            shortcut: u.shortcut,\n            isSelected: e.keyboardHoveredItemIndex === i,\n            set: () => e.itemCallback(u)\n          },\n          u.name\n        )\n      ), i++;\n  }), /* @__PURE__ */ r.jsx(\n    _mantine_core__WEBPACK_IMPORTED_MODULE_4__.Menu,\n    {\n      defaultOpened: !0,\n      trigger: \"hover\",\n      closeDelay: 1e7,\n      children: /* @__PURE__ */ r.jsx(\n        _mantine_core__WEBPACK_IMPORTED_MODULE_4__.Menu.Dropdown,\n        {\n          onMouseDown: (c) => c.preventDefault(),\n          className: n.root,\n          children: o.length > 0 ? o : /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.Menu.Item, { children: \"No match found\" })\n        }\n      )\n    }\n  );\n}\nconst An = (e) => {\n  const [n, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [i, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), [c, u] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), g = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => e.editor.slashMenu.onUpdate((S) => {\n    o(S.show), s(S.filteredItems), u(S.keyboardHoveredItemIndex), g.current = S.referencePos;\n  }), [e.editor]);\n  const a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(\n    () => {\n      if (g.current)\n        return () => g.current;\n    },\n    [g.current]\n    // eslint-disable-line\n  ), { ref: y, updateMaxHeight: h } = xe(), p = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    if (!i || c === void 0)\n      return null;\n    const S = e.slashMenu || Fn;\n    return /* @__PURE__ */ r.jsx(\"div\", { ref: y, children: /* @__PURE__ */ r.jsx(\n      S,\n      {\n        filteredItems: i,\n        itemCallback: (T) => e.editor.slashMenu.itemCallback(T),\n        keyboardHoveredItemIndex: c\n      }\n    ) });\n  }, [\n    i,\n    c,\n    e.editor.slashMenu,\n    e.slashMenu,\n    y\n  ]);\n  return /* @__PURE__ */ r.jsx(\n    _tippyjs_react__WEBPACK_IMPORTED_MODULE_5__,\n    {\n      onShow: h,\n      appendTo: e.editor.domElement.parentElement,\n      content: p,\n      getReferenceClientRect: a,\n      interactive: !0,\n      visible: n,\n      animation: \"fade\",\n      placement: \"bottom-start\",\n      zIndex: 2e3\n    }\n  );\n}, k = [\n  \"#FFFFFF\",\n  \"#EFEFEF\",\n  \"#CFCFCF\",\n  \"#AFAFAF\",\n  \"#7F7F7F\",\n  \"#3F3F3F\",\n  \"#1F1F1F\",\n  \"#161616\",\n  \"#0F0F0F\",\n  \"#000000\"\n], ve = {\n  colors: {\n    editor: {\n      text: k[5],\n      background: k[0]\n    },\n    menu: {\n      text: k[5],\n      background: k[0]\n    },\n    tooltip: {\n      text: k[5],\n      background: k[1]\n    },\n    hovered: {\n      text: k[5],\n      background: k[1]\n    },\n    selected: {\n      text: k[0],\n      background: k[5]\n    },\n    disabled: {\n      text: k[3],\n      background: k[1]\n    },\n    shadow: k[2],\n    border: k[1],\n    sideMenu: k[2],\n    highlightColors: {\n      gray: {\n        text: \"#9b9a97\",\n        background: \"#ebeced\"\n      },\n      brown: {\n        text: \"#64473a\",\n        background: \"#e9e5e3\"\n      },\n      red: {\n        text: \"#e03e3e\",\n        background: \"#fbe4e4\"\n      },\n      orange: {\n        text: \"#d9730d\",\n        background: \"#f6e9d9\"\n      },\n      yellow: {\n        text: \"#dfab01\",\n        background: \"#fbf3db\"\n      },\n      green: {\n        text: \"#4d6461\",\n        background: \"#ddedea\"\n      },\n      blue: {\n        text: \"#0b6e99\",\n        background: \"#ddebf1\"\n      },\n      purple: {\n        text: \"#6940a5\",\n        background: \"#eae4f2\"\n      },\n      pink: {\n        text: \"#ad1a72\",\n        background: \"#f4dfeb\"\n      }\n    }\n  },\n  borderRadius: 6,\n  fontFamily: '\"Inter\", \"SF Pro Display\", -apple-system, BlinkMacSystemFont, \"Open Sans\", \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif'\n}, dt = {\n  colors: {\n    editor: {\n      text: k[2],\n      background: k[6]\n    },\n    menu: {\n      text: k[2],\n      background: k[6]\n    },\n    tooltip: {\n      text: k[2],\n      background: k[7]\n    },\n    hovered: {\n      text: k[2],\n      background: k[7]\n    },\n    selected: {\n      text: k[2],\n      background: k[8]\n    },\n    disabled: {\n      text: k[5],\n      background: k[7]\n    },\n    shadow: k[8],\n    border: k[7],\n    sideMenu: k[4],\n    highlightColors: {\n      gray: {\n        text: \"#bebdb8\",\n        background: \"#9b9a97\"\n      },\n      brown: {\n        text: \"#8e6552\",\n        background: \"#64473a\"\n      },\n      red: {\n        text: \"#ec4040\",\n        background: \"#be3434\"\n      },\n      orange: {\n        text: \"#e3790d\",\n        background: \"#b7600a\"\n      },\n      yellow: {\n        text: \"#dfab01\",\n        background: \"#b58b00\"\n      },\n      green: {\n        text: \"#6b8b87\",\n        background: \"#4d6461\"\n      },\n      blue: {\n        text: \"#0e87bc\",\n        background: \"#0b6e99\"\n      },\n      purple: {\n        text: \"#8552d7\",\n        background: \"#6940a5\"\n      },\n      pink: {\n        text: \"#da208f\",\n        background: \"#ad1a72\"\n      }\n    }\n  },\n  borderRadius: ve.borderRadius,\n  fontFamily: ve.fontFamily\n}, Ln = (e) => {\n  const [n, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [i, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => (_tippyjs_react__WEBPACK_IMPORTED_MODULE_5__.tippy.setDefaultProps({ maxWidth: \"\" }), e.editor.imageToolbar.onUpdate((a) => {\n    o(a.show), s(a.block), c.current = a.referencePos;\n  })), [e.editor]);\n  const u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(\n    () => {\n      if (c)\n        return () => c.current;\n    },\n    [c.current]\n    // eslint-disable-line\n  ), g = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const a = e.imageToolbar || Et;\n    return /* @__PURE__ */ r.jsx(a, { editor: e.editor, block: i });\n  }, [i, e.editor, e.imageToolbar]);\n  return /* @__PURE__ */ r.jsx(\n    _tippyjs_react__WEBPACK_IMPORTED_MODULE_5__,\n    {\n      appendTo: e.editor.domElement.parentElement,\n      content: g,\n      getReferenceClientRect: u,\n      interactive: !0,\n      visible: n,\n      animation: \"fade\",\n      placement: \"bottom\",\n      zIndex: 5e3\n    }\n  );\n};\nfunction Vn(e) {\n  var u;\n  const { classes: n } = (0,_mantine_core__WEBPACK_IMPORTED_MODULE_4__.createStyles)({ root: {} })(void 0, {\n    name: \"Editor\"\n  }), { editor: o, children: i, className: s, ...c } = e;\n  return /* @__PURE__ */ r.jsx(\n    _tiptap_react__WEBPACK_IMPORTED_MODULE_7__.EditorContent,\n    {\n      editor: (u = e.editor) == null ? void 0 : u._tiptapEditor,\n      className: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.mergeCSSClasses)(n.root, e.className || \"\"),\n      ...c,\n      children: e.children || /* @__PURE__ */ r.jsxs(r.Fragment, { children: [\n        /* @__PURE__ */ r.jsx(kn, { editor: e.editor }),\n        /* @__PURE__ */ r.jsx(Cn, { editor: e.editor }),\n        /* @__PURE__ */ r.jsx(An, { editor: e.editor }),\n        /* @__PURE__ */ r.jsx(Bn, { editor: e.editor }),\n        /* @__PURE__ */ r.jsx(Ln, { editor: e.editor })\n      ] })\n    }\n  );\n}\nfunction eo(e) {\n  const {\n    theme: n = { light: ve, dark: dt },\n    ...o\n  } = e, i = use_prefers_color_scheme__WEBPACK_IMPORTED_MODULE_2__(), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => n === \"light\" ? fe(ve) : n === \"dark\" ? fe(dt) : \"light\" in n && \"dark\" in n ? fe(\n    n[i === \"dark\" ? \"dark\" : \"light\"]\n  ) : fe(n), [i, n]);\n  return /* @__PURE__ */ r.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_4__.MantineProvider, { theme: s, children: /* @__PURE__ */ r.jsx(Vn, { ...o }) });\n}\nconst Un = {\n  Heading: {\n    group: \"Headings\",\n    icon: /* @__PURE__ */ r.jsx(kt, { size: 18 }),\n    hint: \"Used for a top-level heading\",\n    shortcut: A(\"Mod-Alt-1\")\n  },\n  \"Heading 2\": {\n    group: \"Headings\",\n    icon: /* @__PURE__ */ r.jsx(yt, { size: 18 }),\n    hint: \"Used for key sections\",\n    shortcut: A(\"Mod-Alt-2\")\n  },\n  \"Heading 3\": {\n    group: \"Headings\",\n    icon: /* @__PURE__ */ r.jsx(pt, { size: 18 }),\n    hint: \"Used for subsections and group headings\",\n    shortcut: A(\"Mod-Alt-3\")\n  },\n  \"Numbered List\": {\n    group: \"Basic blocks\",\n    icon: /* @__PURE__ */ r.jsx(jt, { size: 18 }),\n    hint: \"Used to display a numbered list\",\n    shortcut: A(\"Mod-Alt-7\")\n  },\n  \"Bullet List\": {\n    group: \"Basic blocks\",\n    icon: /* @__PURE__ */ r.jsx(Tt, { size: 18 }),\n    hint: \"Used to display an unordered list\",\n    shortcut: A(\"Mod-Alt-9\")\n  },\n  Paragraph: {\n    group: \"Basic blocks\",\n    icon: /* @__PURE__ */ r.jsx(ie, { size: 18 }),\n    hint: \"Used for the body of your document\",\n    shortcut: A(\"Mod-Alt-0\")\n  },\n  Image: {\n    group: \"Media\",\n    icon: /* @__PURE__ */ r.jsx(qr, {}),\n    hint: \"Insert an image\"\n  }\n};\nfunction Nn(e = _blocknote_core__WEBPACK_IMPORTED_MODULE_1__.defaultBlockSchema) {\n  return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.getDefaultSlashMenuItems)(e).map((o) => ({\n    ...o,\n    ...Un[o.name]\n  }));\n}\nconst $n = (e) => new _blocknote_core__WEBPACK_IMPORTED_MODULE_1__.BlockNoteEditor({\n  slashMenuItems: Nn(\n    e.blockSchema || _blocknote_core__WEBPACK_IMPORTED_MODULE_1__.defaultBlockSchema\n  ),\n  ...e\n}), to = (e = {}, n = []) => {\n  const o = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => (o.current && o.current._tiptapEditor.destroy(), o.current = $n(e), o.current), n);\n};\nfunction Wn() {\n  const [, e] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n  return () => e((n) => n + 1);\n}\nconst ro = (e) => {\n  const n = Wn();\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const o = () => {\n      requestAnimationFrame(() => {\n        requestAnimationFrame(() => {\n          n();\n        });\n      });\n    };\n    return e.on(\"transaction\", o), () => {\n      e.off(\"transaction\", o);\n    };\n  }, [e]);\n}, It = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({}), no = (e) => {\n  const n = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(It).inlineContent || {}, o = (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.mergeCSSClasses)(\n    e.className || \"\",\n    _blocknote_core__WEBPACK_IMPORTED_MODULE_1__.blockStyles.inlineContent,\n    n.class\n  );\n  return /* @__PURE__ */ r.jsx(\n    _tiptap_react__WEBPACK_IMPORTED_MODULE_7__.NodeViewContent,\n    {\n      ...Object.fromEntries(\n        Object.entries(n).filter(\n          ([i]) => i !== \"class\"\n        )\n      ),\n      ...e,\n      className: o\n    }\n  );\n};\nfunction oo(e) {\n  return {\n    node: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.createTipTapBlock)({\n      name: e.type,\n      content: e.containsInlineContent ? \"inline*\" : \"\",\n      selectable: !0,\n      addAttributes() {\n        return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.propsToAttributes)(e);\n      },\n      parseHTML() {\n        return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.parse)(e);\n      },\n      renderHTML({ HTMLAttributes: o }) {\n        return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.render)(e, o);\n      },\n      addNodeView() {\n        return (0,_tiptap_react__WEBPACK_IMPORTED_MODULE_7__.ReactNodeViewRenderer)((i) => {\n          var T;\n          const s = e.render, c = ((T = this.options.domAttributes) == null ? void 0 : T.blockContent) || {}, u = {};\n          for (const [D, le] of Object.entries(i.node.attrs))\n            D in e.propSchema && le !== e.propSchema[D].default && (u[(0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.camelToDataKebab)(D)] = le);\n          const g = this.options.editor, a = typeof i.getPos == \"function\" ? i.getPos() : void 0, p = g._tiptapEditor.state.doc.resolve(a).node().attrs.id, S = g.getBlock(p);\n          if (S.type !== e.type)\n            throw new Error(\"Block type does not match\");\n          return /* @__PURE__ */ r.jsx(\n            _tiptap_react__WEBPACK_IMPORTED_MODULE_7__.NodeViewWrapper,\n            {\n              ...Object.fromEntries(\n                Object.entries(c).filter(\n                  ([D]) => D !== \"class\"\n                )\n              ),\n              className: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.mergeCSSClasses)(\n                _blocknote_core__WEBPACK_IMPORTED_MODULE_1__.blockStyles.blockContent,\n                c.class\n              ),\n              \"data-content-type\": e.type,\n              ...u,\n              children: /* @__PURE__ */ r.jsx(\n                It.Provider,\n                {\n                  value: this.options.domAttributes || {},\n                  children: /* @__PURE__ */ r.jsx(s, { block: S, editor: g })\n                }\n              )\n            }\n          );\n        }, {\n          className: _blocknote_core__WEBPACK_IMPORTED_MODULE_1__.blockStyles.reactNodeViewRenderer\n        });\n      }\n    }),\n    propSchema: e.propSchema\n  };\n}\n\n//# sourceMappingURL=blocknote-react.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@blocknote/react/dist/blocknote-react.js\n");

/***/ })

};
;