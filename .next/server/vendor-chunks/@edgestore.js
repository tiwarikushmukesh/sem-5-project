"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@edgestore";
exports.ids = ["vendor-chunks/@edgestore"];
exports.modules = {

/***/ "(rsc)/./node_modules/@edgestore/server/node_modules/uuid/dist/esm-node/native.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@edgestore/server/node_modules/uuid/dist/esm-node/native.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    randomUUID: (crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID)\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVkZ2VzdG9yZS9zZXJ2ZXIvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9uYXRpdmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTRCO0FBQzVCLGlFQUFlO0lBQ2JDLFlBQVlELDBEQUFpQjtBQUMvQixDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yOF9ub3Rpb24tY2xvbmUvLi9ub2RlX21vZHVsZXMvQGVkZ2VzdG9yZS9zZXJ2ZXIvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9uYXRpdmUuanM/NDEwNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIHJhbmRvbVVVSUQ6IGNyeXB0by5yYW5kb21VVUlEXG59OyJdLCJuYW1lcyI6WyJjcnlwdG8iLCJyYW5kb21VVUlEIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@edgestore/server/node_modules/uuid/dist/esm-node/native.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@edgestore/server/node_modules/uuid/dist/esm-node/regex.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@edgestore/server/node_modules/uuid/dist/esm-node/regex.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVkZ2VzdG9yZS9zZXJ2ZXIvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9yZWdleC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUscUhBQXFILEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yOF9ub3Rpb24tY2xvbmUvLi9ub2RlX21vZHVsZXMvQGVkZ2VzdG9yZS9zZXJ2ZXIvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9yZWdleC5qcz9iZjNmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IC9eKD86WzAtOWEtZl17OH0tWzAtOWEtZl17NH0tWzEtNV1bMC05YS1mXXszfS1bODlhYl1bMC05YS1mXXszfS1bMC05YS1mXXsxMn18MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwKSQvaTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@edgestore/server/node_modules/uuid/dist/esm-node/regex.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@edgestore/server/node_modules/uuid/dist/esm-node/rng.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@edgestore/server/node_modules/uuid/dist/esm-node/rng.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rng)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\nlet poolPtr = rnds8Pool.length;\nfunction rng() {\n    if (poolPtr > rnds8Pool.length - 16) {\n        crypto__WEBPACK_IMPORTED_MODULE_0___default().randomFillSync(rnds8Pool);\n        poolPtr = 0;\n    }\n    return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVkZ2VzdG9yZS9zZXJ2ZXIvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9ybmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTRCO0FBQzVCLE1BQU1DLFlBQVksSUFBSUMsV0FBVyxNQUFNLHFDQUFxQztBQUU1RSxJQUFJQyxVQUFVRixVQUFVRyxNQUFNO0FBQ2YsU0FBU0M7SUFDdEIsSUFBSUYsVUFBVUYsVUFBVUcsTUFBTSxHQUFHLElBQUk7UUFDbkNKLDREQUFxQixDQUFDQztRQUN0QkUsVUFBVTtJQUNaO0lBRUEsT0FBT0YsVUFBVU0sS0FBSyxDQUFDSixTQUFTQSxXQUFXO0FBQzdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjhfbm90aW9uLWNsb25lLy4vbm9kZV9tb2R1bGVzL0BlZGdlc3RvcmUvc2VydmVyL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcm5nLmpzP2U0M2EiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuY29uc3Qgcm5kczhQb29sID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTsgLy8gIyBvZiByYW5kb20gdmFsdWVzIHRvIHByZS1hbGxvY2F0ZVxuXG5sZXQgcG9vbFB0ciA9IHJuZHM4UG9vbC5sZW5ndGg7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBybmcoKSB7XG4gIGlmIChwb29sUHRyID4gcm5kczhQb29sLmxlbmd0aCAtIDE2KSB7XG4gICAgY3J5cHRvLnJhbmRvbUZpbGxTeW5jKHJuZHM4UG9vbCk7XG4gICAgcG9vbFB0ciA9IDA7XG4gIH1cblxuICByZXR1cm4gcm5kczhQb29sLnNsaWNlKHBvb2xQdHIsIHBvb2xQdHIgKz0gMTYpO1xufSJdLCJuYW1lcyI6WyJjcnlwdG8iLCJybmRzOFBvb2wiLCJVaW50OEFycmF5IiwicG9vbFB0ciIsImxlbmd0aCIsInJuZyIsInJhbmRvbUZpbGxTeW5jIiwic2xpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@edgestore/server/node_modules/uuid/dist/esm-node/rng.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@edgestore/server/node_modules/uuid/dist/esm-node/stringify.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@edgestore/server/node_modules/uuid/dist/esm-node/stringify.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   unsafeStringify: () => (/* binding */ unsafeStringify)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(rsc)/./node_modules/@edgestore/server/node_modules/uuid/dist/esm-node/validate.js\");\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */ const byteToHex = [];\nfor(let i = 0; i < 256; ++i){\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nfunction unsafeStringify(arr, offset = 0) {\n    // Note: Be careful editing this code!  It's been tuned for performance\n    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n    return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + \"-\" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + \"-\" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + \"-\" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + \"-\" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n    // of the following:\n    // - One or more input array values don't map to a hex octet (leading to\n    // \"undefined\" in the uuid)\n    // - Invalid input values for the RFC `version` or `variant` fields\n    if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n        throw TypeError(\"Stringified UUID is invalid\");\n    }\n    return uuid;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringify);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVkZ2VzdG9yZS9zZXJ2ZXIvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9zdHJpbmdpZnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFDO0FBQ3JDOzs7Q0FHQyxHQUVELE1BQU1DLFlBQVksRUFBRTtBQUVwQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSSxLQUFLLEVBQUVBLEVBQUc7SUFDNUJELFVBQVVFLElBQUksQ0FBQyxDQUFDRCxJQUFJLEtBQUksRUFBR0UsUUFBUSxDQUFDLElBQUlDLEtBQUssQ0FBQztBQUNoRDtBQUVPLFNBQVNDLGdCQUFnQkMsR0FBRyxFQUFFQyxTQUFTLENBQUM7SUFDN0MsdUVBQXVFO0lBQ3ZFLG9GQUFvRjtJQUNwRixPQUFPUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxFQUFFLENBQUMsR0FBR1AsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsRUFBRSxDQUFDLEdBQUdQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEVBQUUsQ0FBQyxHQUFHUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxFQUFFLENBQUMsR0FBRyxNQUFNUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxFQUFFLENBQUMsR0FBR1AsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsRUFBRSxDQUFDLEdBQUcsTUFBTVAsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsRUFBRSxDQUFDLEdBQUdQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEVBQUUsQ0FBQyxHQUFHLE1BQU1QLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEVBQUUsQ0FBQyxHQUFHUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxFQUFFLENBQUMsR0FBRyxNQUFNUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxHQUFHLENBQUMsR0FBR1AsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsR0FBRyxDQUFDLEdBQUdQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEdBQUcsQ0FBQyxHQUFHUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxHQUFHLENBQUMsR0FBR1AsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsR0FBRyxDQUFDLEdBQUdQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEdBQUcsQ0FBQztBQUNwZjtBQUVBLFNBQVNDLFVBQVVGLEdBQUcsRUFBRUMsU0FBUyxDQUFDO0lBQ2hDLE1BQU1FLE9BQU9KLGdCQUFnQkMsS0FBS0MsU0FBUyw0RUFBNEU7SUFDdkgsb0JBQW9CO0lBQ3BCLHdFQUF3RTtJQUN4RSwyQkFBMkI7SUFDM0IsbUVBQW1FO0lBRW5FLElBQUksQ0FBQ1Isd0RBQVFBLENBQUNVLE9BQU87UUFDbkIsTUFBTUMsVUFBVTtJQUNsQjtJQUVBLE9BQU9EO0FBQ1Q7QUFFQSxpRUFBZUQsU0FBU0EsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLzI4X25vdGlvbi1jbG9uZS8uL25vZGVfbW9kdWxlcy9AZWRnZXN0b3JlL3NlcnZlci9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3N0cmluZ2lmeS5qcz9lYzI3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcbi8qKlxuICogQ29udmVydCBhcnJheSBvZiAxNiBieXRlIHZhbHVlcyB0byBVVUlEIHN0cmluZyBmb3JtYXQgb2YgdGhlIGZvcm06XG4gKiBYWFhYWFhYWC1YWFhYLVhYWFgtWFhYWC1YWFhYWFhYWFhYWFhcbiAqL1xuXG5jb25zdCBieXRlVG9IZXggPSBbXTtcblxuZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICBieXRlVG9IZXgucHVzaCgoaSArIDB4MTAwKS50b1N0cmluZygxNikuc2xpY2UoMSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5zYWZlU3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xuICAvLyBOb3RlOiBCZSBjYXJlZnVsIGVkaXRpbmcgdGhpcyBjb2RlISAgSXQncyBiZWVuIHR1bmVkIGZvciBwZXJmb3JtYW5jZVxuICAvLyBhbmQgd29ya3MgaW4gd2F5cyB5b3UgbWF5IG5vdCBleHBlY3QuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQvcHVsbC80MzRcbiAgcmV0dXJuIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgM11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDVdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA3XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDhdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxM11dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNV1dO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnkoYXJyLCBvZmZzZXQgPSAwKSB7XG4gIGNvbnN0IHV1aWQgPSB1bnNhZmVTdHJpbmdpZnkoYXJyLCBvZmZzZXQpOyAvLyBDb25zaXN0ZW5jeSBjaGVjayBmb3IgdmFsaWQgVVVJRC4gIElmIHRoaXMgdGhyb3dzLCBpdCdzIGxpa2VseSBkdWUgdG8gb25lXG4gIC8vIG9mIHRoZSBmb2xsb3dpbmc6XG4gIC8vIC0gT25lIG9yIG1vcmUgaW5wdXQgYXJyYXkgdmFsdWVzIGRvbid0IG1hcCB0byBhIGhleCBvY3RldCAobGVhZGluZyB0b1xuICAvLyBcInVuZGVmaW5lZFwiIGluIHRoZSB1dWlkKVxuICAvLyAtIEludmFsaWQgaW5wdXQgdmFsdWVzIGZvciB0aGUgUkZDIGB2ZXJzaW9uYCBvciBgdmFyaWFudGAgZmllbGRzXG5cbiAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignU3RyaW5naWZpZWQgVVVJRCBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICByZXR1cm4gdXVpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RyaW5naWZ5OyJdLCJuYW1lcyI6WyJ2YWxpZGF0ZSIsImJ5dGVUb0hleCIsImkiLCJwdXNoIiwidG9TdHJpbmciLCJzbGljZSIsInVuc2FmZVN0cmluZ2lmeSIsImFyciIsIm9mZnNldCIsInN0cmluZ2lmeSIsInV1aWQiLCJUeXBlRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@edgestore/server/node_modules/uuid/dist/esm-node/stringify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@edgestore/server/node_modules/uuid/dist/esm-node/v4.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@edgestore/server/node_modules/uuid/dist/esm-node/v4.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _native_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./native.js */ \"(rsc)/./node_modules/@edgestore/server/node_modules/uuid/dist/esm-node/native.js\");\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rng.js */ \"(rsc)/./node_modules/@edgestore/server/node_modules/uuid/dist/esm-node/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/@edgestore/server/node_modules/uuid/dist/esm-node/stringify.js\");\n\n\n\nfunction v4(options, buf, offset) {\n    if (_native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID && !buf && !options) {\n        return _native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n    rnds[6] = rnds[6] & 0x0f | 0x40;\n    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n    if (buf) {\n        offset = offset || 0;\n        for(let i = 0; i < 16; ++i){\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_2__.unsafeStringify)(rnds);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v4);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVkZ2VzdG9yZS9zZXJ2ZXIvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS92NC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWlDO0FBQ047QUFDc0I7QUFFakQsU0FBU0csR0FBR0MsT0FBTyxFQUFFQyxHQUFHLEVBQUVDLE1BQU07SUFDOUIsSUFBSU4sa0RBQU1BLENBQUNPLFVBQVUsSUFBSSxDQUFDRixPQUFPLENBQUNELFNBQVM7UUFDekMsT0FBT0osa0RBQU1BLENBQUNPLFVBQVU7SUFDMUI7SUFFQUgsVUFBVUEsV0FBVyxDQUFDO0lBQ3RCLE1BQU1JLE9BQU9KLFFBQVFLLE1BQU0sSUFBSSxDQUFDTCxRQUFRSCxHQUFHLElBQUlBLCtDQUFFLEtBQU0sZ0VBQWdFO0lBRXZITyxJQUFJLENBQUMsRUFBRSxHQUFHQSxJQUFJLENBQUMsRUFBRSxHQUFHLE9BQU87SUFDM0JBLElBQUksQ0FBQyxFQUFFLEdBQUdBLElBQUksQ0FBQyxFQUFFLEdBQUcsT0FBTyxNQUFNLG9DQUFvQztJQUVyRSxJQUFJSCxLQUFLO1FBQ1BDLFNBQVNBLFVBQVU7UUFFbkIsSUFBSyxJQUFJSSxJQUFJLEdBQUdBLElBQUksSUFBSSxFQUFFQSxFQUFHO1lBQzNCTCxHQUFHLENBQUNDLFNBQVNJLEVBQUUsR0FBR0YsSUFBSSxDQUFDRSxFQUFFO1FBQzNCO1FBRUEsT0FBT0w7SUFDVDtJQUVBLE9BQU9ILDhEQUFlQSxDQUFDTTtBQUN6QjtBQUVBLGlFQUFlTCxFQUFFQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjhfbm90aW9uLWNsb25lLy4vbm9kZV9tb2R1bGVzL0BlZGdlc3RvcmUvc2VydmVyL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjQuanM/YmU2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbmF0aXZlIGZyb20gJy4vbmF0aXZlLmpzJztcbmltcG9ydCBybmcgZnJvbSAnLi9ybmcuanMnO1xuaW1wb3J0IHsgdW5zYWZlU3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuXG5mdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICBpZiAobmF0aXZlLnJhbmRvbVVVSUQgJiYgIWJ1ZiAmJiAhb3B0aW9ucykge1xuICAgIHJldHVybiBuYXRpdmUucmFuZG9tVVVJRCgpO1xuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGNvbnN0IHJuZHMgPSBvcHRpb25zLnJhbmRvbSB8fCAob3B0aW9ucy5ybmcgfHwgcm5nKSgpOyAvLyBQZXIgNC40LCBzZXQgYml0cyBmb3IgdmVyc2lvbiBhbmQgYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgXG5cbiAgcm5kc1s2XSA9IHJuZHNbNl0gJiAweDBmIHwgMHg0MDtcbiAgcm5kc1s4XSA9IHJuZHNbOF0gJiAweDNmIHwgMHg4MDsgLy8gQ29weSBieXRlcyB0byBidWZmZXIsIGlmIHByb3ZpZGVkXG5cbiAgaWYgKGJ1Zikge1xuICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICBidWZbb2Zmc2V0ICsgaV0gPSBybmRzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBidWY7XG4gIH1cblxuICByZXR1cm4gdW5zYWZlU3RyaW5naWZ5KHJuZHMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2NDsiXSwibmFtZXMiOlsibmF0aXZlIiwicm5nIiwidW5zYWZlU3RyaW5naWZ5IiwidjQiLCJvcHRpb25zIiwiYnVmIiwib2Zmc2V0IiwicmFuZG9tVVVJRCIsInJuZHMiLCJyYW5kb20iLCJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@edgestore/server/node_modules/uuid/dist/esm-node/v4.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@edgestore/server/node_modules/uuid/dist/esm-node/validate.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@edgestore/server/node_modules/uuid/dist/esm-node/validate.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ \"(rsc)/./node_modules/@edgestore/server/node_modules/uuid/dist/esm-node/regex.js\");\n\nfunction validate(uuid) {\n    return typeof uuid === \"string\" && _regex_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].test(uuid);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validate);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVkZ2VzdG9yZS9zZXJ2ZXIvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS92YWxpZGF0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUErQjtBQUUvQixTQUFTQyxTQUFTQyxJQUFJO0lBQ3BCLE9BQU8sT0FBT0EsU0FBUyxZQUFZRixpREFBS0EsQ0FBQ0csSUFBSSxDQUFDRDtBQUNoRDtBQUVBLGlFQUFlRCxRQUFRQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjhfbm90aW9uLWNsb25lLy4vbm9kZV9tb2R1bGVzL0BlZGdlc3RvcmUvc2VydmVyL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdmFsaWRhdGUuanM/N2E0NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUkVHRVggZnJvbSAnLi9yZWdleC5qcyc7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlKHV1aWQpIHtcbiAgcmV0dXJuIHR5cGVvZiB1dWlkID09PSAnc3RyaW5nJyAmJiBSRUdFWC50ZXN0KHV1aWQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2YWxpZGF0ZTsiXSwibmFtZXMiOlsiUkVHRVgiLCJ2YWxpZGF0ZSIsInV1aWQiLCJ0ZXN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@edgestore/server/node_modules/uuid/dist/esm-node/validate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@edgestore/react/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@edgestore/react/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEdgeStoreProvider: () => (/* binding */ createEdgeStoreProvider)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _edgestore_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @edgestore/shared */ \"(ssr)/./node_modules/@edgestore/shared/dist/index.mjs\");\n\n\n\nclass EdgeStoreClientError extends Error {\n    constructor(message){\n        super(message);\n        this.name = 'EdgeStoreError';\n    }\n}\n\nasync function handleError(res) {\n    let json = {};\n    try {\n        json = await res.json();\n    } catch (err) {\n        throw new EdgeStoreClientError(`Failed to parse response. Make sure the api is correctly configured at ${res.url}`);\n    }\n    throw new _edgestore_shared__WEBPACK_IMPORTED_MODULE_1__.EdgeStoreApiClientError({\n        response: json\n    });\n}\n\nfunction createNextProxy({ apiPath, uploadingCountRef, maxConcurrentUploads = 5 }) {\n    return new Proxy({}, {\n        get (_, prop) {\n            const bucketName = prop;\n            const bucketFunctions = {\n                upload: async (params)=>{\n                    try {\n                        params.onProgressChange?.(0);\n                        while(uploadingCountRef.current >= maxConcurrentUploads && uploadingCountRef.current > 0){\n                            await new Promise((resolve)=>setTimeout(resolve, 300));\n                        }\n                        uploadingCountRef.current++;\n                        const test = await uploadFile(params, {\n                            bucketName: bucketName,\n                            apiPath\n                        });\n                        return test;\n                    } finally{\n                        uploadingCountRef.current--;\n                    }\n                },\n                confirmUpload: async (params)=>{\n                    const { success } = await confirmUpload(params, {\n                        bucketName: bucketName,\n                        apiPath\n                    });\n                    if (!success) {\n                        throw new EdgeStoreClientError('Failed to confirm upload');\n                    }\n                },\n                delete: async (params)=>{\n                    const { success } = await deleteFile(params, {\n                        bucketName: bucketName,\n                        apiPath\n                    });\n                    if (!success) {\n                        throw new EdgeStoreClientError('Failed to delete file');\n                    }\n                }\n            };\n            return bucketFunctions;\n        }\n    });\n}\nasync function uploadFile({ file, input, onProgressChange, options }, { apiPath, bucketName }) {\n    try {\n        onProgressChange?.(0);\n        const res = await fetch(`${apiPath}/request-upload`, {\n            method: 'POST',\n            credentials: 'include',\n            body: JSON.stringify({\n                bucketName,\n                input,\n                fileInfo: {\n                    extension: file.name.split('.').pop(),\n                    type: file.type,\n                    size: file.size,\n                    fileName: options?.manualFileName,\n                    replaceTargetUrl: options?.replaceTargetUrl,\n                    temporary: options?.temporary\n                }\n            }),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n        if (!res.ok) {\n            await handleError(res);\n        }\n        const json = await res.json();\n        if ('multipart' in json) {\n            await multipartUpload({\n                bucketName,\n                multipartInfo: json.multipart,\n                onProgressChange,\n                file,\n                apiPath\n            });\n        } else if ('uploadUrl' in json) {\n            // Single part upload\n            // Upload the file to the signed URL and get the progress\n            await uploadFileInner(file, json.uploadUrl, onProgressChange);\n        } else {\n            throw new EdgeStoreClientError('An error occurred');\n        }\n        return {\n            url: getUrl(json.accessUrl, apiPath),\n            thumbnailUrl: json.thumbnailUrl ? getUrl(json.thumbnailUrl, apiPath) : null,\n            size: json.size,\n            uploadedAt: new Date(json.uploadedAt),\n            path: json.path,\n            pathOrder: json.pathOrder,\n            metadata: json.metadata\n        };\n    } catch (e) {\n        onProgressChange?.(0);\n        throw e;\n    }\n}\n/**\n * Protected files need third-party cookies to work.\n * Since third party cookies doesn't work on localhost,\n * we need to proxy the file through the server.\n */ function getUrl(url, apiPath) {\n    const mode = typeof process !== 'undefined' ? \"development\" :  false ? 0 : 'production';\n    if (mode === 'development' && !url.includes('/_public/')) {\n        const proxyUrl = new URL(window.location.origin);\n        proxyUrl.pathname = `${apiPath}/proxy-file`;\n        proxyUrl.search = new URLSearchParams({\n            url\n        }).toString();\n        return proxyUrl.toString();\n    }\n    return url;\n}\nconst uploadFileInner = async (file, uploadUrl, onProgressChange)=>{\n    const promise = new Promise((resolve, reject)=>{\n        const request = new XMLHttpRequest();\n        request.open('PUT', uploadUrl);\n        // This is for Azure provider. Specifies the blob type\n        request.setRequestHeader('x-ms-blob-type', 'BlockBlob');\n        request.addEventListener('loadstart', ()=>{\n            onProgressChange?.(0);\n        });\n        request.upload.addEventListener('progress', (e)=>{\n            if (e.lengthComputable) {\n                // 2 decimal progress\n                const progress = Math.round(e.loaded / e.total * 10000) / 100;\n                onProgressChange?.(progress);\n            }\n        });\n        request.addEventListener('error', ()=>{\n            reject(new Error('Error uploading file'));\n        });\n        request.addEventListener('abort', ()=>{\n            reject(new Error('File upload aborted'));\n        });\n        request.addEventListener('loadend', ()=>{\n            // Return the ETag header (needed to complete multipart upload)\n            resolve(request.getResponseHeader('ETag'));\n        });\n        request.send(file);\n    });\n    return promise;\n};\nasync function multipartUpload(params) {\n    const { bucketName, multipartInfo, onProgressChange, file, apiPath } = params;\n    const { partSize, parts, totalParts, uploadId, key } = multipartInfo;\n    const uploadingParts = [];\n    const uploadPart = async (params)=>{\n        const { part, chunk } = params;\n        const { uploadUrl } = part;\n        const eTag = await uploadFileInner(chunk, uploadUrl, (progress)=>{\n            const uploadingPart = uploadingParts.find((p)=>p.partNumber === part.partNumber);\n            if (uploadingPart) {\n                uploadingPart.progress = progress;\n            } else {\n                uploadingParts.push({\n                    partNumber: part.partNumber,\n                    progress\n                });\n            }\n            const totalProgress = Math.round(uploadingParts.reduce((acc, p)=>acc + p.progress * 100, 0) / totalParts) / 100;\n            onProgressChange?.(totalProgress);\n        });\n        if (!eTag) {\n            throw new EdgeStoreClientError('Could not get ETag from multipart response');\n        }\n        return {\n            partNumber: part.partNumber,\n            eTag\n        };\n    };\n    // Upload the parts in parallel\n    const completedParts = await queuedPromises({\n        items: parts.map((part)=>({\n                part,\n                chunk: file.slice((part.partNumber - 1) * partSize, part.partNumber * partSize)\n            })),\n        fn: uploadPart,\n        maxParallel: 5,\n        maxRetries: 10\n    });\n    // Complete multipart upload\n    const res = await fetch(`${apiPath}/complete-multipart-upload`, {\n        method: 'POST',\n        credentials: 'include',\n        body: JSON.stringify({\n            bucketName,\n            uploadId,\n            key,\n            parts: completedParts\n        }),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n    if (!res.ok) {\n        await handleError(res);\n    }\n}\nasync function confirmUpload({ url }, { apiPath, bucketName }) {\n    const res = await fetch(`${apiPath}/confirm-upload`, {\n        method: 'POST',\n        credentials: 'include',\n        body: JSON.stringify({\n            url,\n            bucketName\n        }),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n    if (!res.ok) {\n        await handleError(res);\n    }\n    return res.json();\n}\nasync function deleteFile({ url }, { apiPath, bucketName }) {\n    const res = await fetch(`${apiPath}/delete-file`, {\n        method: 'POST',\n        credentials: 'include',\n        body: JSON.stringify({\n            url,\n            bucketName\n        }),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n    if (!res.ok) {\n        await handleError(res);\n    }\n    return res.json();\n}\nasync function queuedPromises({ items, fn, maxParallel, maxRetries = 0 }) {\n    const results = new Array(items.length);\n    const executeWithRetry = async (func, retries)=>{\n        try {\n            return await func();\n        } catch (error) {\n            if (retries > 0) {\n                await new Promise((resolve)=>setTimeout(resolve, 5000));\n                return executeWithRetry(func, retries - 1);\n            } else {\n                throw error;\n            }\n        }\n    };\n    const semaphore = {\n        count: maxParallel,\n        async wait () {\n            // If we've reached our maximum concurrency or it's the last item, wait\n            while(this.count <= 0)await new Promise((resolve)=>setTimeout(resolve, 500));\n            this.count--;\n        },\n        signal () {\n            this.count++;\n        }\n    };\n    const tasks = items.map((item, i)=>(async ()=>{\n            await semaphore.wait();\n            try {\n                const result = await executeWithRetry(()=>fn(item), maxRetries);\n                results[i] = result;\n            } finally{\n                semaphore.signal();\n            }\n        })());\n    await Promise.all(tasks);\n    return results;\n}\n\nconst DEFAULT_BASE_URL = (typeof process !== 'undefined' ? process.env.NEXT_PUBLIC_EDGE_STORE_BASE_URL :  undefined) ?? 'https://files.edgestore.dev';\nfunction createEdgeStoreProvider(opts) {\n    const EdgeStoreContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(undefined);\n    const EdgeStoreProvider = ({ children, basePath })=>{\n        return EdgeStoreProviderInner({\n            children,\n            context: EdgeStoreContext,\n            basePath,\n            maxConcurrentUploads: opts?.maxConcurrentUploads\n        });\n    };\n    function useEdgeStore() {\n        if (!EdgeStoreContext) {\n            throw new Error('React Context is unavailable in Server Components');\n        }\n        // @ts-expect-error - We know that the context value should not be undefined\n        const value = react__WEBPACK_IMPORTED_MODULE_0__.useContext(EdgeStoreContext);\n        if (!value && \"development\" !== 'production') {\n            throw new Error('[edgestore]: `useEdgeStore` must be wrapped in a <EdgeStoreProvider />');\n        }\n        return value;\n    }\n    return {\n        EdgeStoreProvider,\n        useEdgeStore\n    };\n}\nfunction EdgeStoreProviderInner({ children, context, basePath, maxConcurrentUploads }) {\n    const apiPath = basePath ? `${basePath}` : '/api/edgestore';\n    const [state, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        loading: true,\n        initialized: false,\n        error: false\n    });\n    const uploadingCountRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n    const initExecuted = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false); // to make sure we don't run init twice\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!initExecuted.current) {\n            void init();\n        }\n        return ()=>{\n            initExecuted.current = true;\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    async function init() {\n        try {\n            setState({\n                loading: true,\n                initialized: false,\n                error: false\n            });\n            const res = await fetch(`${apiPath}/init`, {\n                method: 'POST',\n                credentials: 'include'\n            });\n            if (res.ok) {\n                const json = await res.json();\n                const innerRes = await fetch(`${DEFAULT_BASE_URL}/_init`, {\n                    method: 'GET',\n                    credentials: 'include',\n                    headers: {\n                        'x-edgestore-token': json.token\n                    }\n                });\n                if (innerRes.ok) {\n                    // update state\n                    setState({\n                        loading: false,\n                        initialized: true,\n                        error: false\n                    });\n                } else {\n                    setState({\n                        loading: false,\n                        initialized: false,\n                        error: true\n                    });\n                    throw new EdgeStoreClientError(\"Couldn't initialize Edge Store.\");\n                }\n            } else {\n                setState({\n                    loading: false,\n                    initialized: false,\n                    error: true\n                });\n                await handleError(res);\n            }\n        } catch (err) {\n            setState({\n                loading: false,\n                initialized: false,\n                error: true\n            });\n            throw err;\n        }\n    }\n    async function reset() {\n        await init();\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(context.Provider, {\n        value: {\n            edgestore: createNextProxy({\n                apiPath,\n                uploadingCountRef,\n                maxConcurrentUploads\n            }),\n            reset,\n            state\n        }\n    }, children));\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@edgestore/react/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@edgestore/shared/dist/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@edgestore/shared/dist/index.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EDGE_STORE_ERROR_CODES: () => (/* binding */ EDGE_STORE_ERROR_CODES),\n/* harmony export */   EdgeStoreApiClientError: () => (/* binding */ EdgeStoreApiClientError),\n/* harmony export */   EdgeStoreError: () => (/* binding */ EdgeStoreError),\n/* harmony export */   initEdgeStore: () => (/* binding */ initEdgeStore)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(ssr)/./node_modules/zod/lib/index.mjs\");\n\n\nfunction _define_property$1(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n/* eslint-disable @typescript-eslint/no-non-null-assertion */ const EDGE_STORE_ERROR_CODES = {\n    BAD_REQUEST: 400,\n    FILE_TOO_LARGE: 400,\n    MIME_TYPE_NOT_ALLOWED: 400,\n    UNAUTHORIZED: 401,\n    UPLOAD_NOT_ALLOWED: 403,\n    DELETE_NOT_ALLOWED: 403,\n    CREATE_CONTEXT_ERROR: 500,\n    SERVER_ERROR: 500\n};\nclass EdgeStoreError extends Error {\n    formattedMessage() {\n        return `${this.message}${this.details ? `\\n    Details: ${JSON.stringify(this.details)}` : ''}${this.cause ? `\\n    Caused by: ${this.cause.message}` : ''}`;\n    }\n    formattedJson() {\n        return {\n            message: this.code === 'SERVER_ERROR' ? 'Internal server error' : this.message,\n            code: this.code,\n            details: this.details\n        };\n    }\n    constructor(opts){\n        super(opts.message);\n        _define_property$1(this, \"cause\", void 0);\n        _define_property$1(this, \"code\", void 0);\n        _define_property$1(this, \"level\", void 0);\n        _define_property$1(this, \"details\", void 0);\n        this.name = 'EdgeStoreError';\n        this.code = opts.code;\n        this.cause = opts.cause;\n        this.level = EDGE_STORE_ERROR_CODES[opts.code] >= 500 ? 'error' : 'warn';\n        this.details = 'details' in opts ? opts.details : undefined;\n    }\n}\n\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass EdgeStoreApiClientError extends Error {\n    constructor(opts){\n        super(opts.response.message);\n        _define_property(this, \"data\", void 0);\n        this.name = 'EdgeStoreApiClientError';\n        this.data = opts.response;\n    }\n}\n\n/**\n * Creates a Proxy that prints the path to the property when called.\n *\n * Example:\n *\n * ```ts\n * const pathParamProxy = createPathParamProxy();\n * console.log(pathParamProxy.ctx.user.id());\n * // Logs: \"ctx.user.id\"\n * console.log(pathParamProxy.input.type());\n * // Logs: \"input.type\"\n * ```\n */ function createPathParamProxy() {\n    const getPath = (target, _prop)=>{\n        const proxyFunction = ()=>target;\n        return new Proxy(proxyFunction, {\n            get: (_target, propChild)=>{\n                return getPath(`${target}.${String(propChild)}`);\n            }\n        });\n    };\n    return new Proxy(()=>'', {\n        get: (_target, prop)=>{\n            return getPath(String(prop));\n        }\n    });\n}\n\nconst createNewBuilder = (initDef, newDef)=>{\n    const mergedDef = {\n        ...initDef,\n        ...newDef\n    };\n    return createBuilder({\n        type: mergedDef.type\n    }, mergedDef);\n};\nfunction createBuilder(opts, initDef) {\n    const _def = {\n        type: opts.type,\n        input: zod__WEBPACK_IMPORTED_MODULE_0__.z.never(),\n        path: [],\n        metadata: ()=>({}),\n        ...initDef\n    };\n    return {\n        $config: {\n            ctx: undefined\n        },\n        // @ts-expect-error - I think it would be too much work to make this type correct.\n        _def,\n        input (input) {\n            return createNewBuilder(_def, {\n                input\n            });\n        },\n        path (pathResolver) {\n            // TODO: Should throw a runtime error in the following cases:\n            // 1. in case of multiple keys in one object\n            // 2. in case of duplicate keys\n            const pathParamProxy = createPathParamProxy();\n            const params = pathResolver(pathParamProxy);\n            return createNewBuilder(_def, {\n                path: params\n            });\n        },\n        metadata (metadata) {\n            return createNewBuilder(_def, {\n                metadata\n            });\n        },\n        accessControl (accessControl) {\n            return createNewBuilder(_def, {\n                accessControl: accessControl\n            });\n        },\n        beforeUpload (beforeUpload) {\n            return createNewBuilder(_def, {\n                beforeUpload\n            });\n        },\n        beforeDelete (beforeDelete) {\n            return createNewBuilder(_def, {\n                beforeDelete\n            });\n        }\n    };\n}\nclass EdgeStoreBuilder {\n    context() {\n        return new EdgeStoreBuilder();\n    }\n    create() {\n        return createEdgeStoreInner()();\n    }\n}\nfunction createRouterFactory() {\n    return function createRouterInner(buckets) {\n        return {\n            $config: {\n                ctx: undefined\n            },\n            buckets\n        };\n    };\n}\nfunction initBucket(type, config) {\n    return createBuilder({\n        type\n    }, {\n        bucketConfig: config\n    });\n}\nfunction createEdgeStoreInner() {\n    return function initEdgeStoreInner() {\n        return {\n            /**\n       * Builder object for creating an image bucket\n       */ imageBucket (config) {\n                return initBucket('IMAGE', config);\n            },\n            /**\n       * Builder object for creating a file bucket\n       */ fileBucket (config) {\n                return initBucket('FILE', config);\n            },\n            /**\n       * Create a router\n       */ router: createRouterFactory()\n        };\n    };\n}\n/**\n * Initialize EdgeStore - be done exactly once per backend\n */ const initEdgeStore = new EdgeStoreBuilder(); // ↓↓↓ TYPE TESTS ↓↓↓\n // type Context = {\n //   userId: string;\n //   userRole: 'admin' | 'visitor';\n // };\n // const es = initEdgeStore.context<Context>().create();\n // const imagesBucket = es.imageBucket()\n //   .input(\n //     z.object({\n //       type: z.enum(['profile', 'post']),\n //       extension: z.string().optional(),\n //     }),\n //   )\n //   .path(({ ctx, input }) => [{ author: ctx.userId }, { type: input.type }])\n //   .metadata(({ ctx, input }) => ({\n //     extension: input.extension,\n //     role: ctx.userRole,\n //   }))\n //   .beforeUpload(() => {\n //     return true;\n //   });\n // const a = es.imageBucket()\n //   .input(z.object({ type: z.string(), someMeta: z.string().optional() }))\n //   .path(({ ctx, input }) => [{ author: ctx.userId }, { type: input.type }])\n //   .metadata(({ ctx, input }) => ({\n //     role: ctx.userRole,\n //     someMeta: input.someMeta,\n //   }))\n //   .accessControl({\n //     OR: [\n //       {\n //         userId: { path: 'author' }, // this will check if the userId is the same as the author in the path parameter\n //       },\n //       {\n //         userRole: 'admin', // this is the same as { userRole: { eq: \"admin\" } }\n //       },\n //     ],\n //   })\n //   .beforeUpload(({ ctx, input }) => {\n //     return true;\n //   })\n //   .beforeDelete(({ ctx, file }) => {\n //     return true;\n //   });\n // const b = es.imageBucket().path(({ ctx }) => [{ author: ctx.userId }]);\n // const router = es.router({\n //   original: imagesBucket,\n //   imageBucket: a,\n //   imageBucket2: b,\n // });\n // export { router };\n // type ListFilesResponse<TBucket extends AnyRouter['buckets'][string]> = {\n //   data: {\n //     // url: string;\n //     // size: number;\n //     // uploadedAt: Date;\n //     // metadata: InferMetadataObject<TBucket>;\n //     path: InferBucketPathKeys<TBucket> extends string ? {\n //       [key: string]: string;\n //     } :{\n //       [TKey in InferBucketPathKeys<TBucket>]: string;\n //     };\n //   }[];\n //   pagination: {\n //     currentPage: number;\n //     totalPages: number;\n //     totalCount: number;\n //   };\n // };\n // type TPathKeys = 'author' | 'type';\n // type TPathKeys2 = InferBucketPathKeys<AnyBuilder>;\n // type ObjectWithKeys<TKeys extends string> = {\n //   [TKey in TKeys]: string;\n // };\n // type Test1 = ObjectWithKeys<TPathKeys>;\n // type Test2 = ObjectWithKeys<TPathKeys2>;\n // type PathKeys = InferBucketPathKeys<typeof router.buckets.imageBucket>;\n // type MetadataKeys = InferMetadataObject<typeof router.buckets.imageBucket>;\n // type MyEdgeStoreRouter = typeof router;\n // type MyAccessControl = AccessControlSchema<Context, AnyDef>;\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGVkZ2VzdG9yZS9zaGFyZWQvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBd0I7O0FBRXhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixhQUFhLEVBQUUsaUNBQWlDLDZCQUE2QixPQUFPLEVBQUUsaUNBQWlDLG1CQUFtQixPQUFPO0FBQ25LO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsT0FBTyxHQUFHLGtCQUFrQjtBQUM5RDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxrQ0FBQztBQUNoQjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxlQUFlLFlBQVksUUFBUSxvQkFBb0IsSUFBSSxrQkFBa0I7QUFDN0UsbUJBQW1CLFlBQVk7QUFDL0I7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0Esd0JBQXdCLG1EQUFtRDtBQUMzRSxlQUFlLFlBQVksUUFBUSxvQkFBb0IsSUFBSSxrQkFBa0I7QUFDN0UsbUJBQW1CLFlBQVk7QUFDL0I7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsZ0JBQWdCO0FBQ3RDLFdBQVc7QUFDWDtBQUNBLHdEQUF3RCxZQUFZO0FBQ3BFLFdBQVc7QUFDWDtBQUNBLE9BQU87QUFDUCx1QkFBdUIsWUFBWTtBQUNuQztBQUNBLE9BQU87QUFDUCx1QkFBdUIsV0FBVztBQUNsQztBQUNBLE9BQU87QUFDUCx1Q0FBdUMsS0FBSyxRQUFRLG9CQUFvQjtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTBGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vMjhfbm90aW9uLWNsb25lLy4vbm9kZV9tb2R1bGVzL0BlZGdlc3RvcmUvc2hhcmVkL2Rpc3QvaW5kZXgubWpzPzE5OGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5cbmZ1bmN0aW9uIF9kZWZpbmVfcHJvcGVydHkkMShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5IGluIG9iaikge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufVxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvbiAqLyBjb25zdCBFREdFX1NUT1JFX0VSUk9SX0NPREVTID0ge1xuICAgIEJBRF9SRVFVRVNUOiA0MDAsXG4gICAgRklMRV9UT09fTEFSR0U6IDQwMCxcbiAgICBNSU1FX1RZUEVfTk9UX0FMTE9XRUQ6IDQwMCxcbiAgICBVTkFVVEhPUklaRUQ6IDQwMSxcbiAgICBVUExPQURfTk9UX0FMTE9XRUQ6IDQwMyxcbiAgICBERUxFVEVfTk9UX0FMTE9XRUQ6IDQwMyxcbiAgICBDUkVBVEVfQ09OVEVYVF9FUlJPUjogNTAwLFxuICAgIFNFUlZFUl9FUlJPUjogNTAwXG59O1xuY2xhc3MgRWRnZVN0b3JlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgZm9ybWF0dGVkTWVzc2FnZSgpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMubWVzc2FnZX0ke3RoaXMuZGV0YWlscyA/IGBcXG4gICAgRGV0YWlsczogJHtKU09OLnN0cmluZ2lmeSh0aGlzLmRldGFpbHMpfWAgOiAnJ30ke3RoaXMuY2F1c2UgPyBgXFxuICAgIENhdXNlZCBieTogJHt0aGlzLmNhdXNlLm1lc3NhZ2V9YCA6ICcnfWA7XG4gICAgfVxuICAgIGZvcm1hdHRlZEpzb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtZXNzYWdlOiB0aGlzLmNvZGUgPT09ICdTRVJWRVJfRVJST1InID8gJ0ludGVybmFsIHNlcnZlciBlcnJvcicgOiB0aGlzLm1lc3NhZ2UsXG4gICAgICAgICAgICBjb2RlOiB0aGlzLmNvZGUsXG4gICAgICAgICAgICBkZXRhaWxzOiB0aGlzLmRldGFpbHNcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3RydWN0b3Iob3B0cyl7XG4gICAgICAgIHN1cGVyKG9wdHMubWVzc2FnZSk7XG4gICAgICAgIF9kZWZpbmVfcHJvcGVydHkkMSh0aGlzLCBcImNhdXNlXCIsIHZvaWQgMCk7XG4gICAgICAgIF9kZWZpbmVfcHJvcGVydHkkMSh0aGlzLCBcImNvZGVcIiwgdm9pZCAwKTtcbiAgICAgICAgX2RlZmluZV9wcm9wZXJ0eSQxKHRoaXMsIFwibGV2ZWxcIiwgdm9pZCAwKTtcbiAgICAgICAgX2RlZmluZV9wcm9wZXJ0eSQxKHRoaXMsIFwiZGV0YWlsc1wiLCB2b2lkIDApO1xuICAgICAgICB0aGlzLm5hbWUgPSAnRWRnZVN0b3JlRXJyb3InO1xuICAgICAgICB0aGlzLmNvZGUgPSBvcHRzLmNvZGU7XG4gICAgICAgIHRoaXMuY2F1c2UgPSBvcHRzLmNhdXNlO1xuICAgICAgICB0aGlzLmxldmVsID0gRURHRV9TVE9SRV9FUlJPUl9DT0RFU1tvcHRzLmNvZGVdID49IDUwMCA/ICdlcnJvcicgOiAnd2Fybic7XG4gICAgICAgIHRoaXMuZGV0YWlscyA9ICdkZXRhaWxzJyBpbiBvcHRzID8gb3B0cy5kZXRhaWxzIDogdW5kZWZpbmVkO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gX2RlZmluZV9wcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5IGluIG9iaikge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufVxuY2xhc3MgRWRnZVN0b3JlQXBpQ2xpZW50RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3Iob3B0cyl7XG4gICAgICAgIHN1cGVyKG9wdHMucmVzcG9uc2UubWVzc2FnZSk7XG4gICAgICAgIF9kZWZpbmVfcHJvcGVydHkodGhpcywgXCJkYXRhXCIsIHZvaWQgMCk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdFZGdlU3RvcmVBcGlDbGllbnRFcnJvcic7XG4gICAgICAgIHRoaXMuZGF0YSA9IG9wdHMucmVzcG9uc2U7XG4gICAgfVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBQcm94eSB0aGF0IHByaW50cyB0aGUgcGF0aCB0byB0aGUgcHJvcGVydHkgd2hlbiBjYWxsZWQuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGB0c1xuICogY29uc3QgcGF0aFBhcmFtUHJveHkgPSBjcmVhdGVQYXRoUGFyYW1Qcm94eSgpO1xuICogY29uc29sZS5sb2cocGF0aFBhcmFtUHJveHkuY3R4LnVzZXIuaWQoKSk7XG4gKiAvLyBMb2dzOiBcImN0eC51c2VyLmlkXCJcbiAqIGNvbnNvbGUubG9nKHBhdGhQYXJhbVByb3h5LmlucHV0LnR5cGUoKSk7XG4gKiAvLyBMb2dzOiBcImlucHV0LnR5cGVcIlxuICogYGBgXG4gKi8gZnVuY3Rpb24gY3JlYXRlUGF0aFBhcmFtUHJveHkoKSB7XG4gICAgY29uc3QgZ2V0UGF0aCA9ICh0YXJnZXQsIF9wcm9wKT0+e1xuICAgICAgICBjb25zdCBwcm94eUZ1bmN0aW9uID0gKCk9PnRhcmdldDtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm94eShwcm94eUZ1bmN0aW9uLCB7XG4gICAgICAgICAgICBnZXQ6IChfdGFyZ2V0LCBwcm9wQ2hpbGQpPT57XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldFBhdGgoYCR7dGFyZ2V0fS4ke1N0cmluZyhwcm9wQ2hpbGQpfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBuZXcgUHJveHkoKCk9PicnLCB7XG4gICAgICAgIGdldDogKF90YXJnZXQsIHByb3ApPT57XG4gICAgICAgICAgICByZXR1cm4gZ2V0UGF0aChTdHJpbmcocHJvcCkpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmNvbnN0IGNyZWF0ZU5ld0J1aWxkZXIgPSAoaW5pdERlZiwgbmV3RGVmKT0+e1xuICAgIGNvbnN0IG1lcmdlZERlZiA9IHtcbiAgICAgICAgLi4uaW5pdERlZixcbiAgICAgICAgLi4ubmV3RGVmXG4gICAgfTtcbiAgICByZXR1cm4gY3JlYXRlQnVpbGRlcih7XG4gICAgICAgIHR5cGU6IG1lcmdlZERlZi50eXBlXG4gICAgfSwgbWVyZ2VkRGVmKTtcbn07XG5mdW5jdGlvbiBjcmVhdGVCdWlsZGVyKG9wdHMsIGluaXREZWYpIHtcbiAgICBjb25zdCBfZGVmID0ge1xuICAgICAgICB0eXBlOiBvcHRzLnR5cGUsXG4gICAgICAgIGlucHV0OiB6Lm5ldmVyKCksXG4gICAgICAgIHBhdGg6IFtdLFxuICAgICAgICBtZXRhZGF0YTogKCk9Pih7fSksXG4gICAgICAgIC4uLmluaXREZWZcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgICRjb25maWc6IHtcbiAgICAgICAgICAgIGN0eDogdW5kZWZpbmVkXG4gICAgICAgIH0sXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBJIHRoaW5rIGl0IHdvdWxkIGJlIHRvbyBtdWNoIHdvcmsgdG8gbWFrZSB0aGlzIHR5cGUgY29ycmVjdC5cbiAgICAgICAgX2RlZixcbiAgICAgICAgaW5wdXQgKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlTmV3QnVpbGRlcihfZGVmLCB7XG4gICAgICAgICAgICAgICAgaW5wdXRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwYXRoIChwYXRoUmVzb2x2ZXIpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IFNob3VsZCB0aHJvdyBhIHJ1bnRpbWUgZXJyb3IgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcbiAgICAgICAgICAgIC8vIDEuIGluIGNhc2Ugb2YgbXVsdGlwbGUga2V5cyBpbiBvbmUgb2JqZWN0XG4gICAgICAgICAgICAvLyAyLiBpbiBjYXNlIG9mIGR1cGxpY2F0ZSBrZXlzXG4gICAgICAgICAgICBjb25zdCBwYXRoUGFyYW1Qcm94eSA9IGNyZWF0ZVBhdGhQYXJhbVByb3h5KCk7XG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBwYXRoUmVzb2x2ZXIocGF0aFBhcmFtUHJveHkpO1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZU5ld0J1aWxkZXIoX2RlZiwge1xuICAgICAgICAgICAgICAgIHBhdGg6IHBhcmFtc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG1ldGFkYXRhIChtZXRhZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZU5ld0J1aWxkZXIoX2RlZiwge1xuICAgICAgICAgICAgICAgIG1ldGFkYXRhXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgYWNjZXNzQ29udHJvbCAoYWNjZXNzQ29udHJvbCkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZU5ld0J1aWxkZXIoX2RlZiwge1xuICAgICAgICAgICAgICAgIGFjY2Vzc0NvbnRyb2w6IGFjY2Vzc0NvbnRyb2xcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBiZWZvcmVVcGxvYWQgKGJlZm9yZVVwbG9hZCkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZU5ld0J1aWxkZXIoX2RlZiwge1xuICAgICAgICAgICAgICAgIGJlZm9yZVVwbG9hZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGJlZm9yZURlbGV0ZSAoYmVmb3JlRGVsZXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlTmV3QnVpbGRlcihfZGVmLCB7XG4gICAgICAgICAgICAgICAgYmVmb3JlRGVsZXRlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG59XG5jbGFzcyBFZGdlU3RvcmVCdWlsZGVyIHtcbiAgICBjb250ZXh0KCkge1xuICAgICAgICByZXR1cm4gbmV3IEVkZ2VTdG9yZUJ1aWxkZXIoKTtcbiAgICB9XG4gICAgY3JlYXRlKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRWRnZVN0b3JlSW5uZXIoKSgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlckZhY3RvcnkoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZVJvdXRlcklubmVyKGJ1Y2tldHMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICRjb25maWc6IHtcbiAgICAgICAgICAgICAgICBjdHg6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJ1Y2tldHNcbiAgICAgICAgfTtcbiAgICB9O1xufVxuZnVuY3Rpb24gaW5pdEJ1Y2tldCh0eXBlLCBjb25maWcpIHtcbiAgICByZXR1cm4gY3JlYXRlQnVpbGRlcih7XG4gICAgICAgIHR5cGVcbiAgICB9LCB7XG4gICAgICAgIGJ1Y2tldENvbmZpZzogY29uZmlnXG4gICAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVFZGdlU3RvcmVJbm5lcigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaW5pdEVkZ2VTdG9yZUlubmVyKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgKiBCdWlsZGVyIG9iamVjdCBmb3IgY3JlYXRpbmcgYW4gaW1hZ2UgYnVja2V0XG4gICAgICAgKi8gaW1hZ2VCdWNrZXQgKGNvbmZpZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbml0QnVja2V0KCdJTUFHRScsIGNvbmZpZyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgKiBCdWlsZGVyIG9iamVjdCBmb3IgY3JlYXRpbmcgYSBmaWxlIGJ1Y2tldFxuICAgICAgICovIGZpbGVCdWNrZXQgKGNvbmZpZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbml0QnVja2V0KCdGSUxFJywgY29uZmlnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAqIENyZWF0ZSBhIHJvdXRlclxuICAgICAgICovIHJvdXRlcjogY3JlYXRlUm91dGVyRmFjdG9yeSgpXG4gICAgICAgIH07XG4gICAgfTtcbn1cbi8qKlxuICogSW5pdGlhbGl6ZSBFZGdlU3RvcmUgLSBiZSBkb25lIGV4YWN0bHkgb25jZSBwZXIgYmFja2VuZFxuICovIGNvbnN0IGluaXRFZGdlU3RvcmUgPSBuZXcgRWRnZVN0b3JlQnVpbGRlcigpOyAvLyDihpPihpPihpMgVFlQRSBURVNUUyDihpPihpPihpNcbiAvLyB0eXBlIENvbnRleHQgPSB7XG4gLy8gICB1c2VySWQ6IHN0cmluZztcbiAvLyAgIHVzZXJSb2xlOiAnYWRtaW4nIHwgJ3Zpc2l0b3InO1xuIC8vIH07XG4gLy8gY29uc3QgZXMgPSBpbml0RWRnZVN0b3JlLmNvbnRleHQ8Q29udGV4dD4oKS5jcmVhdGUoKTtcbiAvLyBjb25zdCBpbWFnZXNCdWNrZXQgPSBlcy5pbWFnZUJ1Y2tldCgpXG4gLy8gICAuaW5wdXQoXG4gLy8gICAgIHoub2JqZWN0KHtcbiAvLyAgICAgICB0eXBlOiB6LmVudW0oWydwcm9maWxlJywgJ3Bvc3QnXSksXG4gLy8gICAgICAgZXh0ZW5zaW9uOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gLy8gICAgIH0pLFxuIC8vICAgKVxuIC8vICAgLnBhdGgoKHsgY3R4LCBpbnB1dCB9KSA9PiBbeyBhdXRob3I6IGN0eC51c2VySWQgfSwgeyB0eXBlOiBpbnB1dC50eXBlIH1dKVxuIC8vICAgLm1ldGFkYXRhKCh7IGN0eCwgaW5wdXQgfSkgPT4gKHtcbiAvLyAgICAgZXh0ZW5zaW9uOiBpbnB1dC5leHRlbnNpb24sXG4gLy8gICAgIHJvbGU6IGN0eC51c2VyUm9sZSxcbiAvLyAgIH0pKVxuIC8vICAgLmJlZm9yZVVwbG9hZCgoKSA9PiB7XG4gLy8gICAgIHJldHVybiB0cnVlO1xuIC8vICAgfSk7XG4gLy8gY29uc3QgYSA9IGVzLmltYWdlQnVja2V0KClcbiAvLyAgIC5pbnB1dCh6Lm9iamVjdCh7IHR5cGU6IHouc3RyaW5nKCksIHNvbWVNZXRhOiB6LnN0cmluZygpLm9wdGlvbmFsKCkgfSkpXG4gLy8gICAucGF0aCgoeyBjdHgsIGlucHV0IH0pID0+IFt7IGF1dGhvcjogY3R4LnVzZXJJZCB9LCB7IHR5cGU6IGlucHV0LnR5cGUgfV0pXG4gLy8gICAubWV0YWRhdGEoKHsgY3R4LCBpbnB1dCB9KSA9PiAoe1xuIC8vICAgICByb2xlOiBjdHgudXNlclJvbGUsXG4gLy8gICAgIHNvbWVNZXRhOiBpbnB1dC5zb21lTWV0YSxcbiAvLyAgIH0pKVxuIC8vICAgLmFjY2Vzc0NvbnRyb2woe1xuIC8vICAgICBPUjogW1xuIC8vICAgICAgIHtcbiAvLyAgICAgICAgIHVzZXJJZDogeyBwYXRoOiAnYXV0aG9yJyB9LCAvLyB0aGlzIHdpbGwgY2hlY2sgaWYgdGhlIHVzZXJJZCBpcyB0aGUgc2FtZSBhcyB0aGUgYXV0aG9yIGluIHRoZSBwYXRoIHBhcmFtZXRlclxuIC8vICAgICAgIH0sXG4gLy8gICAgICAge1xuIC8vICAgICAgICAgdXNlclJvbGU6ICdhZG1pbicsIC8vIHRoaXMgaXMgdGhlIHNhbWUgYXMgeyB1c2VyUm9sZTogeyBlcTogXCJhZG1pblwiIH0gfVxuIC8vICAgICAgIH0sXG4gLy8gICAgIF0sXG4gLy8gICB9KVxuIC8vICAgLmJlZm9yZVVwbG9hZCgoeyBjdHgsIGlucHV0IH0pID0+IHtcbiAvLyAgICAgcmV0dXJuIHRydWU7XG4gLy8gICB9KVxuIC8vICAgLmJlZm9yZURlbGV0ZSgoeyBjdHgsIGZpbGUgfSkgPT4ge1xuIC8vICAgICByZXR1cm4gdHJ1ZTtcbiAvLyAgIH0pO1xuIC8vIGNvbnN0IGIgPSBlcy5pbWFnZUJ1Y2tldCgpLnBhdGgoKHsgY3R4IH0pID0+IFt7IGF1dGhvcjogY3R4LnVzZXJJZCB9XSk7XG4gLy8gY29uc3Qgcm91dGVyID0gZXMucm91dGVyKHtcbiAvLyAgIG9yaWdpbmFsOiBpbWFnZXNCdWNrZXQsXG4gLy8gICBpbWFnZUJ1Y2tldDogYSxcbiAvLyAgIGltYWdlQnVja2V0MjogYixcbiAvLyB9KTtcbiAvLyBleHBvcnQgeyByb3V0ZXIgfTtcbiAvLyB0eXBlIExpc3RGaWxlc1Jlc3BvbnNlPFRCdWNrZXQgZXh0ZW5kcyBBbnlSb3V0ZXJbJ2J1Y2tldHMnXVtzdHJpbmddPiA9IHtcbiAvLyAgIGRhdGE6IHtcbiAvLyAgICAgLy8gdXJsOiBzdHJpbmc7XG4gLy8gICAgIC8vIHNpemU6IG51bWJlcjtcbiAvLyAgICAgLy8gdXBsb2FkZWRBdDogRGF0ZTtcbiAvLyAgICAgLy8gbWV0YWRhdGE6IEluZmVyTWV0YWRhdGFPYmplY3Q8VEJ1Y2tldD47XG4gLy8gICAgIHBhdGg6IEluZmVyQnVja2V0UGF0aEtleXM8VEJ1Y2tldD4gZXh0ZW5kcyBzdHJpbmcgPyB7XG4gLy8gICAgICAgW2tleTogc3RyaW5nXTogc3RyaW5nO1xuIC8vICAgICB9IDp7XG4gLy8gICAgICAgW1RLZXkgaW4gSW5mZXJCdWNrZXRQYXRoS2V5czxUQnVja2V0Pl06IHN0cmluZztcbiAvLyAgICAgfTtcbiAvLyAgIH1bXTtcbiAvLyAgIHBhZ2luYXRpb246IHtcbiAvLyAgICAgY3VycmVudFBhZ2U6IG51bWJlcjtcbiAvLyAgICAgdG90YWxQYWdlczogbnVtYmVyO1xuIC8vICAgICB0b3RhbENvdW50OiBudW1iZXI7XG4gLy8gICB9O1xuIC8vIH07XG4gLy8gdHlwZSBUUGF0aEtleXMgPSAnYXV0aG9yJyB8ICd0eXBlJztcbiAvLyB0eXBlIFRQYXRoS2V5czIgPSBJbmZlckJ1Y2tldFBhdGhLZXlzPEFueUJ1aWxkZXI+O1xuIC8vIHR5cGUgT2JqZWN0V2l0aEtleXM8VEtleXMgZXh0ZW5kcyBzdHJpbmc+ID0ge1xuIC8vICAgW1RLZXkgaW4gVEtleXNdOiBzdHJpbmc7XG4gLy8gfTtcbiAvLyB0eXBlIFRlc3QxID0gT2JqZWN0V2l0aEtleXM8VFBhdGhLZXlzPjtcbiAvLyB0eXBlIFRlc3QyID0gT2JqZWN0V2l0aEtleXM8VFBhdGhLZXlzMj47XG4gLy8gdHlwZSBQYXRoS2V5cyA9IEluZmVyQnVja2V0UGF0aEtleXM8dHlwZW9mIHJvdXRlci5idWNrZXRzLmltYWdlQnVja2V0PjtcbiAvLyB0eXBlIE1ldGFkYXRhS2V5cyA9IEluZmVyTWV0YWRhdGFPYmplY3Q8dHlwZW9mIHJvdXRlci5idWNrZXRzLmltYWdlQnVja2V0PjtcbiAvLyB0eXBlIE15RWRnZVN0b3JlUm91dGVyID0gdHlwZW9mIHJvdXRlcjtcbiAvLyB0eXBlIE15QWNjZXNzQ29udHJvbCA9IEFjY2Vzc0NvbnRyb2xTY2hlbWE8Q29udGV4dCwgQW55RGVmPjtcblxuZXhwb3J0IHsgRURHRV9TVE9SRV9FUlJPUl9DT0RFUywgRWRnZVN0b3JlQXBpQ2xpZW50RXJyb3IsIEVkZ2VTdG9yZUVycm9yLCBpbml0RWRnZVN0b3JlIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@edgestore/shared/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@edgestore/server/dist/adapters/next/app/index.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@edgestore/server/dist/adapters/next/app/index.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEdgeStoreNextHandler: () => (/* binding */ createEdgeStoreNextHandler)\n/* harmony export */ });\n/* harmony import */ var _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @edgestore/shared */ \"(rsc)/./node_modules/@edgestore/shared/dist/index.mjs\");\n/* harmony import */ var _logger_09f43a75_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../logger-09f43a75.mjs */ \"(rsc)/./node_modules/@edgestore/server/dist/logger-09f43a75.mjs\");\n/* harmony import */ var _providers_edgestore_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../providers/edgestore/index.mjs */ \"(rsc)/./node_modules/@edgestore/server/dist/providers/edgestore/index.mjs\");\n/* harmony import */ var _shared_039276af_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../shared-039276af.mjs */ \"(rsc)/./node_modules/@edgestore/server/dist/shared-039276af.mjs\");\n/* harmony import */ var _index_28efdacf_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../index-28efdacf.mjs */ \"(rsc)/./node_modules/@edgestore/server/dist/index-28efdacf.mjs\");\n/* harmony import */ var cookie__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cookie */ \"(rsc)/./node_modules/cookie/index.js\");\n\n\n\n\n\n\n\n\n\nfunction createEdgeStoreNextHandler(config) {\n    const { provider = (0,_providers_edgestore_index_mjs__WEBPACK_IMPORTED_MODULE_2__.EdgeStoreProvider)() } = config;\n    const log = new _logger_09f43a75_mjs__WEBPACK_IMPORTED_MODULE_1__.L(config.logLevel);\n    globalThis._EDGE_STORE_LOGGER = log;\n    log.debug(\"Creating Edge Store Next handler (app adapter)\");\n    return async (req)=>{\n        try {\n            if (!(\"nextUrl\" in req)) throw new _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.EdgeStoreError({\n                message: \"Error running the app adapter. Make sure you are importing the correct adapter in your router configuration\",\n                code: \"SERVER_ERROR\"\n            });\n            if (req.nextUrl.pathname.endsWith(\"/health\")) {\n                return new Response(\"OK\", {\n                    status: 200\n                });\n            } else if (req.nextUrl.pathname.endsWith(\"/init\")) {\n                let ctx = {};\n                try {\n                    ctx = \"createContext\" in config ? await config.createContext({\n                        req\n                    }) : {};\n                } catch (err) {\n                    throw new _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.EdgeStoreError({\n                        message: \"Error creating context\",\n                        code: \"CREATE_CONTEXT_ERROR\",\n                        cause: err instanceof Error ? err : undefined\n                    });\n                }\n                const { newCookies, token, baseUrl } = await (0,_shared_039276af_mjs__WEBPACK_IMPORTED_MODULE_3__.i)({\n                    ctx,\n                    provider,\n                    router: config.router\n                });\n                const res = new Response(JSON.stringify({\n                    token,\n                    baseUrl\n                }), {\n                    status: 200,\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                });\n                for (const cookie of newCookies){\n                    res.headers.append(\"Set-Cookie\", cookie);\n                }\n                return res;\n            } else if (req.nextUrl.pathname.endsWith(\"/request-upload\")) {\n                const res = await (0,_shared_039276af_mjs__WEBPACK_IMPORTED_MODULE_3__.r)({\n                    provider,\n                    router: config.router,\n                    body: await req.json(),\n                    ctxToken: req.cookies.get(\"edgestore-ctx\")?.value\n                });\n                return new Response(JSON.stringify(res), {\n                    status: 200,\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                });\n            } else if (req.nextUrl.pathname.endsWith(\"/request-upload-parts\")) {\n                const res = await (0,_shared_039276af_mjs__WEBPACK_IMPORTED_MODULE_3__.a)({\n                    provider,\n                    router: config.router,\n                    body: await req.json(),\n                    ctxToken: req.cookies.get(\"edgestore-ctx\")?.value\n                });\n                return new Response(JSON.stringify(res), {\n                    status: 200,\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                });\n            } else if (req.nextUrl.pathname.endsWith(\"/complete-multipart-upload\")) {\n                await (0,_shared_039276af_mjs__WEBPACK_IMPORTED_MODULE_3__.c)({\n                    provider,\n                    router: config.router,\n                    body: await req.json(),\n                    ctxToken: req.cookies.get(\"edgestore-ctx\")?.value\n                });\n                return new Response(null, {\n                    status: 200\n                });\n            } else if (req.nextUrl.pathname.endsWith(\"/confirm-upload\")) {\n                const res = await (0,_shared_039276af_mjs__WEBPACK_IMPORTED_MODULE_3__.d)({\n                    provider,\n                    router: config.router,\n                    body: await req.json(),\n                    ctxToken: req.cookies.get(\"edgestore-ctx\")?.value\n                });\n                return new Response(JSON.stringify(res), {\n                    status: 200,\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                });\n            } else if (req.nextUrl.pathname.endsWith(\"/delete-file\")) {\n                const res = await (0,_shared_039276af_mjs__WEBPACK_IMPORTED_MODULE_3__.e)({\n                    provider,\n                    router: config.router,\n                    body: await req.json(),\n                    ctxToken: req.cookies.get(\"edgestore-ctx\")?.value\n                });\n                return new Response(JSON.stringify(res), {\n                    status: 200,\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                });\n            } else if (req.nextUrl.pathname.endsWith(\"/proxy-file\")) {\n                const url = req.nextUrl.searchParams.get(\"url\");\n                if (typeof url === \"string\") {\n                    const proxyRes = await fetch(url, {\n                        headers: {\n                            cookie: req.cookies.toString() ?? \"\"\n                        }\n                    });\n                    const data = await proxyRes.arrayBuffer();\n                    return new Response(data, {\n                        status: proxyRes.status,\n                        headers: {\n                            \"Content-Type\": proxyRes.headers.get(\"Content-Type\") ?? \"application/octet-stream\"\n                        }\n                    });\n                } else {\n                    return new Response(null, {\n                        status: 400\n                    });\n                }\n            } else {\n                return new Response(null, {\n                    status: 404\n                });\n            }\n        } catch (err) {\n            if (err instanceof _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.EdgeStoreError) {\n                log[err.level](err.formattedMessage());\n                if (err.cause) log[err.level](err.cause);\n                return new Response(JSON.stringify(err.formattedJson()), {\n                    status: _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.EDGE_STORE_ERROR_CODES[err.code],\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    }\n                });\n            }\n            log.error(err);\n            return new Response(JSON.stringify(new _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.EdgeStoreError({\n                message: \"Internal server error\",\n                code: \"SERVER_ERROR\"\n            }).formattedJson()), {\n                status: 500,\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n        }\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@edgestore/server/dist/adapters/next/app/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@edgestore/server/dist/index-28efdacf.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@edgestore/server/dist/index-28efdacf.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   E: () => (/* binding */ EdgeStoreCredentialsError),\n/* harmony export */   e: () => (/* binding */ edgeStoreRawSdk),\n/* harmony export */   i: () => (/* binding */ initEdgeStoreSdk)\n/* harmony export */ });\n/* harmony import */ var _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @edgestore/shared */ \"(rsc)/./node_modules/@edgestore/shared/dist/index.mjs\");\n\nconst DEFAULT_MESSAGE = `Missing EDGE_STORE_ACCESS_KEY or EDGE_STORE_SECRET_KEY. \nThis can happen if you are trying to import something related to the backend of Edge Store in a client component.`;\nclass EdgeStoreCredentialsError extends Error {\n    constructor(message = DEFAULT_MESSAGE){\n        super(message);\n        this.name = \"EdgeStoreCredentialsError\";\n    }\n}\nconst API_ENDPOINT = process.env.EDGE_STORE_API_ENDPOINT ?? \"https://api.edgestore.dev\";\nasync function makeRequest(params) {\n    const { body, accessKey, secretKey, path } = params;\n    const res = await fetch(`${API_ENDPOINT}${path}`, {\n        method: \"POST\",\n        body: JSON.stringify(body),\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Basic ${Buffer.from(`${accessKey}:${secretKey}`).toString(\"base64\")}`\n        }\n    });\n    if (!res.ok) {\n        throw new Error(`Failed to make request to ${path}: ${await res.text()}`);\n    }\n    return await res.json();\n}\nconst edgeStoreRawSdk = {\n    async getToken (params) {\n        const reqBuckets = Object.entries(params.router.buckets).reduce((acc, [bucketName, bucket])=>{\n            acc[bucketName] = {\n                path: bucket._def.path.map((p)=>{\n                    const paramEntries = Object.entries(p);\n                    if (paramEntries[0] === undefined) {\n                        throw new _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.EdgeStoreError({\n                            message: `Empty path param found in: ${JSON.stringify(bucket._def.path)}`,\n                            code: \"SERVER_ERROR\"\n                        });\n                    }\n                    const [key, value] = paramEntries[0];\n                    return {\n                        key,\n                        value: value()\n                    };\n                }),\n                accessControl: bucket._def.accessControl\n            };\n            return acc;\n        }, {});\n        const { token } = await makeRequest({\n            body: {\n                ctx: params.ctx,\n                buckets: reqBuckets\n            },\n            accessKey: params.accessKey,\n            secretKey: params.secretKey,\n            path: \"/get-token\"\n        });\n        return token;\n    },\n    async getFile ({ accessKey, secretKey, url }) {\n        return await makeRequest({\n            path: \"/get-file\",\n            accessKey,\n            secretKey,\n            body: {\n                url\n            }\n        });\n    },\n    async requestUpload ({ accessKey, secretKey, bucketName, bucketType, fileInfo, multipart }) {\n        const res = await makeRequest({\n            path: \"/request-upload\",\n            accessKey,\n            secretKey,\n            body: {\n                multipart,\n                bucketName,\n                bucketType,\n                isPublic: fileInfo.isPublic,\n                path: fileInfo.path,\n                extension: fileInfo.extension,\n                size: fileInfo.size,\n                mimeType: fileInfo.type,\n                metadata: fileInfo.metadata,\n                fileName: fileInfo.fileName,\n                replaceTargetUrl: fileInfo.replaceTargetUrl,\n                isTemporary: fileInfo.temporary\n            }\n        });\n        return {\n            multipart: res.multipart,\n            signedUrl: res.signedUrl,\n            accessUrl: res.url,\n            path: res.path,\n            thumbnailUrl: res.thumbnailUrl\n        };\n    },\n    async requestUploadParts ({ accessKey, secretKey, key, multipart }) {\n        const res = await makeRequest({\n            path: \"/request-upload-parts\",\n            accessKey,\n            secretKey,\n            body: {\n                multipart,\n                key\n            }\n        });\n        return {\n            multipart: res.multipart\n        };\n    },\n    async completeMultipartUpload ({ accessKey, secretKey, uploadId, key, parts }) {\n        return await makeRequest({\n            path: \"/complete-multipart-upload\",\n            accessKey,\n            secretKey,\n            body: {\n                uploadId,\n                key,\n                parts\n            }\n        });\n    },\n    async confirmUpload ({ accessKey, secretKey, url }) {\n        return await makeRequest({\n            path: \"/confirm-upload\",\n            accessKey,\n            secretKey,\n            body: {\n                url\n            }\n        });\n    },\n    async deleteFile ({ accessKey, secretKey, url }) {\n        return await makeRequest({\n            path: \"/delete-file\",\n            accessKey,\n            secretKey,\n            body: {\n                url\n            }\n        });\n    },\n    async listFiles ({ accessKey, secretKey, bucketName, filter, pagination }) {\n        return await makeRequest({\n            path: \"/list-files\",\n            accessKey,\n            secretKey,\n            body: {\n                bucketName,\n                filter,\n                pagination\n            }\n        });\n    }\n};\nfunction initEdgeStoreSdk(params) {\n    const { accessKey = process.env.EDGE_STORE_ACCESS_KEY, secretKey = process.env.EDGE_STORE_SECRET_KEY } = params ?? {};\n    if (!accessKey || !secretKey) {\n        throw new EdgeStoreCredentialsError();\n    }\n    return {\n        async getToken (params) {\n            return await edgeStoreRawSdk.getToken({\n                accessKey,\n                secretKey,\n                ctx: params.ctx,\n                router: params.router\n            });\n        },\n        async getFile ({ url }) {\n            return await edgeStoreRawSdk.getFile({\n                accessKey,\n                secretKey,\n                url\n            });\n        },\n        async requestUpload ({ bucketName, bucketType, fileInfo, multipart }) {\n            return await edgeStoreRawSdk.requestUpload({\n                accessKey,\n                secretKey,\n                bucketName,\n                bucketType,\n                fileInfo,\n                multipart\n            });\n        },\n        async requestUploadParts ({ key, multipart }) {\n            return await edgeStoreRawSdk.requestUploadParts({\n                accessKey,\n                secretKey,\n                key,\n                multipart\n            });\n        },\n        async completeMultipartUpload ({ uploadId, key, parts }) {\n            return await edgeStoreRawSdk.completeMultipartUpload({\n                accessKey,\n                secretKey,\n                uploadId,\n                key,\n                parts\n            });\n        },\n        async confirmUpload ({ url }) {\n            return await edgeStoreRawSdk.confirmUpload({\n                accessKey,\n                secretKey,\n                url\n            });\n        },\n        async deleteFile ({ url }) {\n            return await edgeStoreRawSdk.deleteFile({\n                accessKey,\n                secretKey,\n                url\n            });\n        },\n        async listFiles (params) {\n            return await edgeStoreRawSdk.listFiles({\n                accessKey,\n                secretKey,\n                ...params\n            });\n        }\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@edgestore/server/dist/index-28efdacf.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@edgestore/server/dist/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@edgestore/server/dist/index.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initEdgeStore: () => (/* reexport safe */ _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.initEdgeStore)\n/* harmony export */ });\n/* harmony import */ var _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @edgestore/shared */ \"(rsc)/./node_modules/@edgestore/shared/dist/index.mjs\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVkZ2VzdG9yZS9zZXJ2ZXIvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yOF9ub3Rpb24tY2xvbmUvLi9ub2RlX21vZHVsZXMvQGVkZ2VzdG9yZS9zZXJ2ZXIvZGlzdC9pbmRleC5tanM/YjZmOSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBpbml0RWRnZVN0b3JlIH0gZnJvbSAnQGVkZ2VzdG9yZS9zaGFyZWQnO1xuIl0sIm5hbWVzIjpbImluaXRFZGdlU3RvcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@edgestore/server/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@edgestore/server/dist/logger-09f43a75.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@edgestore/server/dist/logger-09f43a75.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   L: () => (/* binding */ Logger)\n/* harmony export */ });\n/* eslint-disable no-console */ function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nconst logLevel = [\n    \"debug\",\n    \"info\",\n    \"warn\",\n    \"error\",\n    \"none\"\n];\nclass Logger {\n    shouldLog(level) {\n        return logLevel.indexOf(level) >= logLevel.indexOf(this.logLevel);\n    }\n    debug(message, ...optionalParams) {\n        if (this.shouldLog(\"debug\")) {\n            console.debug(\"[EdgeStoreDebug]\", message, ...optionalParams);\n        }\n    }\n    info(message, ...optionalParams) {\n        if (this.shouldLog(\"info\")) {\n            console.info(\"[EdgeStoreInfo]\", message, ...optionalParams);\n        }\n    }\n    warn(message, ...optionalParams) {\n        if (this.shouldLog(\"warn\")) {\n            console.warn(\"[EdgeStoreWarn]\", message, ...optionalParams);\n        }\n    }\n    error(message, ...optionalParams) {\n        if (this.shouldLog(\"error\")) {\n            console.error(\"[EdgeStoreError]\", message, ...optionalParams);\n        }\n    }\n    constructor(logLevel){\n        _define_property(this, \"logLevel\", void 0);\n        this.logLevel = logLevel ?? ( false ? 0 : \"info\");\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVkZ2VzdG9yZS9zZXJ2ZXIvZGlzdC9sb2dnZXItMDlmNDNhNzUubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSw2QkFBNkIsR0FBRyxTQUFTQSxpQkFBaUJDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxLQUFLO0lBQ3JFLElBQUlELE9BQU9ELEtBQUs7UUFDWkcsT0FBT0MsY0FBYyxDQUFDSixLQUFLQyxLQUFLO1lBQzVCQyxPQUFPQTtZQUNQRyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtRQUNkO0lBQ0osT0FBTztRQUNIUCxHQUFHLENBQUNDLElBQUksR0FBR0M7SUFDZjtJQUNBLE9BQU9GO0FBQ1g7QUFDQSxNQUFNUSxXQUFXO0lBQ2I7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNIO0FBQ0QsTUFBTUM7SUFDRkMsVUFBVUMsS0FBSyxFQUFFO1FBQ2IsT0FBT0gsU0FBU0ksT0FBTyxDQUFDRCxVQUFVSCxTQUFTSSxPQUFPLENBQUMsSUFBSSxDQUFDSixRQUFRO0lBQ3BFO0lBQ0FLLE1BQU1DLE9BQU8sRUFBRSxHQUFHQyxjQUFjLEVBQUU7UUFDOUIsSUFBSSxJQUFJLENBQUNMLFNBQVMsQ0FBQyxVQUFVO1lBQ3pCTSxRQUFRSCxLQUFLLENBQUMsb0JBQW9CQyxZQUFZQztRQUNsRDtJQUNKO0lBQ0FFLEtBQUtILE9BQU8sRUFBRSxHQUFHQyxjQUFjLEVBQUU7UUFDN0IsSUFBSSxJQUFJLENBQUNMLFNBQVMsQ0FBQyxTQUFTO1lBQ3hCTSxRQUFRQyxJQUFJLENBQUMsbUJBQW1CSCxZQUFZQztRQUNoRDtJQUNKO0lBQ0FHLEtBQUtKLE9BQU8sRUFBRSxHQUFHQyxjQUFjLEVBQUU7UUFDN0IsSUFBSSxJQUFJLENBQUNMLFNBQVMsQ0FBQyxTQUFTO1lBQ3hCTSxRQUFRRSxJQUFJLENBQUMsbUJBQW1CSixZQUFZQztRQUNoRDtJQUNKO0lBQ0FJLE1BQU1MLE9BQU8sRUFBRSxHQUFHQyxjQUFjLEVBQUU7UUFDOUIsSUFBSSxJQUFJLENBQUNMLFNBQVMsQ0FBQyxVQUFVO1lBQ3pCTSxRQUFRRyxLQUFLLENBQUMsb0JBQW9CTCxZQUFZQztRQUNsRDtJQUNKO0lBQ0FLLFlBQVlaLFFBQVEsQ0FBQztRQUNqQlQsaUJBQWlCLElBQUksRUFBRSxZQUFZLEtBQUs7UUFDeEMsSUFBSSxDQUFDUyxRQUFRLEdBQUdBLFlBQWFhLENBQUFBLE1BQXlCLEdBQWUsSUFBVSxNQUFLO0lBQ3hGO0FBQ0o7QUFFdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yOF9ub3Rpb24tY2xvbmUvLi9ub2RlX21vZHVsZXMvQGVkZ2VzdG9yZS9zZXJ2ZXIvZGlzdC9sb2dnZXItMDlmNDNhNzUubWpzP2U5M2QiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqLyBmdW5jdGlvbiBfZGVmaW5lX3Byb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG5jb25zdCBsb2dMZXZlbCA9IFtcbiAgICAnZGVidWcnLFxuICAgICdpbmZvJyxcbiAgICAnd2FybicsXG4gICAgJ2Vycm9yJyxcbiAgICAnbm9uZSdcbl07XG5jbGFzcyBMb2dnZXIge1xuICAgIHNob3VsZExvZyhsZXZlbCkge1xuICAgICAgICByZXR1cm4gbG9nTGV2ZWwuaW5kZXhPZihsZXZlbCkgPj0gbG9nTGV2ZWwuaW5kZXhPZih0aGlzLmxvZ0xldmVsKTtcbiAgICB9XG4gICAgZGVidWcobWVzc2FnZSwgLi4ub3B0aW9uYWxQYXJhbXMpIHtcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkTG9nKCdkZWJ1ZycpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKCdbRWRnZVN0b3JlRGVidWddJywgbWVzc2FnZSwgLi4ub3B0aW9uYWxQYXJhbXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGluZm8obWVzc2FnZSwgLi4ub3B0aW9uYWxQYXJhbXMpIHtcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkTG9nKCdpbmZvJykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnW0VkZ2VTdG9yZUluZm9dJywgbWVzc2FnZSwgLi4ub3B0aW9uYWxQYXJhbXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHdhcm4obWVzc2FnZSwgLi4ub3B0aW9uYWxQYXJhbXMpIHtcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkTG9nKCd3YXJuJykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignW0VkZ2VTdG9yZVdhcm5dJywgbWVzc2FnZSwgLi4ub3B0aW9uYWxQYXJhbXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVycm9yKG1lc3NhZ2UsIC4uLm9wdGlvbmFsUGFyYW1zKSB7XG4gICAgICAgIGlmICh0aGlzLnNob3VsZExvZygnZXJyb3InKSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignW0VkZ2VTdG9yZUVycm9yXScsIG1lc3NhZ2UsIC4uLm9wdGlvbmFsUGFyYW1zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihsb2dMZXZlbCl7XG4gICAgICAgIF9kZWZpbmVfcHJvcGVydHkodGhpcywgXCJsb2dMZXZlbFwiLCB2b2lkIDApO1xuICAgICAgICB0aGlzLmxvZ0xldmVsID0gbG9nTGV2ZWwgPz8gKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgPyAnZXJyb3InIDogJ2luZm8nKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IExvZ2dlciBhcyBMIH07XG4iXSwibmFtZXMiOlsiX2RlZmluZV9wcm9wZXJ0eSIsIm9iaiIsImtleSIsInZhbHVlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJsb2dMZXZlbCIsIkxvZ2dlciIsInNob3VsZExvZyIsImxldmVsIiwiaW5kZXhPZiIsImRlYnVnIiwibWVzc2FnZSIsIm9wdGlvbmFsUGFyYW1zIiwiY29uc29sZSIsImluZm8iLCJ3YXJuIiwiZXJyb3IiLCJjb25zdHJ1Y3RvciIsInByb2Nlc3MiLCJMIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@edgestore/server/dist/logger-09f43a75.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@edgestore/server/dist/providers/edgestore/index.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@edgestore/server/dist/providers/edgestore/index.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EdgeStoreProvider: () => (/* binding */ EdgeStoreProvider)\n/* harmony export */ });\n/* harmony import */ var _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @edgestore/shared */ \"(rsc)/./node_modules/@edgestore/shared/dist/index.mjs\");\n/* harmony import */ var _index_28efdacf_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../index-28efdacf.mjs */ \"(rsc)/./node_modules/@edgestore/server/dist/index-28efdacf.mjs\");\n\n\nconst DEFAULT_BASE_URL = \"https://files.edgestore.dev\";\nfunction EdgeStoreProvider(options) {\n    const { accessKey = process.env.EDGE_STORE_ACCESS_KEY, secretKey = process.env.EDGE_STORE_SECRET_KEY } = options ?? {};\n    const baseUrl = process.env.EDGE_STORE_BASE_URL ?? DEFAULT_BASE_URL;\n    if (!accessKey || !secretKey) {\n        throw new _index_28efdacf_mjs__WEBPACK_IMPORTED_MODULE_1__.E();\n    }\n    const edgeStoreSdk = (0,_index_28efdacf_mjs__WEBPACK_IMPORTED_MODULE_1__.i)({\n        accessKey,\n        secretKey\n    });\n    return {\n        init: async ({ ctx, router })=>{\n            const token = await edgeStoreSdk.getToken({\n                ctx,\n                router\n            });\n            return {\n                token\n            };\n        },\n        getBaseUrl () {\n            return baseUrl;\n        },\n        getFile: async ({ url })=>{\n            const { uploadedAt, ...rest } = await edgeStoreSdk.getFile({\n                url\n            });\n            return {\n                uploadedAt: new Date(uploadedAt),\n                ...rest\n            };\n        },\n        async requestUpload ({ bucketName, bucketType, fileInfo }) {\n            // multipart upload if file is bigger than a certain size\n            const MULTIPART_THRESHOLD = 10 * 1024 * 1024; // 10MB\n            let partSize = 5 * 1024 * 1024; // 5MB\n            if (fileInfo.size > MULTIPART_THRESHOLD) {\n                let totalParts = Math.ceil(fileInfo.size / partSize);\n                if (totalParts > 1000) {\n                    // the maximum number of parts is 1000\n                    totalParts = 1000;\n                    partSize = Math.ceil(fileInfo.size / totalParts);\n                }\n                const res = await edgeStoreSdk.requestUpload({\n                    bucketName,\n                    bucketType,\n                    fileInfo,\n                    multipart: {\n                        parts: Array.from({\n                            length: totalParts\n                        }).map((_, index)=>index + 1)\n                    }\n                });\n                const multipart = res.multipart ? {\n                    key: res.multipart.key,\n                    uploadId: res.multipart.uploadId,\n                    parts: res.multipart.parts.map((part)=>({\n                            partNumber: part.partNumber,\n                            uploadUrl: part.signedUrl\n                        })),\n                    partSize,\n                    totalParts\n                } : undefined;\n                if (multipart) {\n                    return {\n                        accessUrl: res.accessUrl,\n                        thumbnailUrl: res.thumbnailUrl,\n                        multipart\n                    };\n                } else if (res.signedUrl) {\n                    return {\n                        accessUrl: res.accessUrl,\n                        uploadUrl: res.signedUrl,\n                        thumbnailUrl: res.thumbnailUrl\n                    };\n                } else {\n                    throw new _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.EdgeStoreError({\n                        message: \"Could not get upload url\",\n                        code: \"SERVER_ERROR\"\n                    });\n                }\n            }\n            const res = await edgeStoreSdk.requestUpload({\n                bucketName,\n                bucketType,\n                fileInfo\n            });\n            if (res.signedUrl) {\n                return {\n                    accessUrl: res.accessUrl,\n                    uploadUrl: res.signedUrl,\n                    thumbnailUrl: res.thumbnailUrl\n                };\n            }\n            throw new _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.EdgeStoreError({\n                message: \"Could not get upload url\",\n                code: \"SERVER_ERROR\"\n            });\n        },\n        requestUploadParts: async ({ multipart, path })=>{\n            const res = await edgeStoreSdk.requestUploadParts({\n                multipart,\n                key: path\n            });\n            return {\n                multipart: {\n                    uploadId: res.multipart.uploadId,\n                    parts: res.multipart.parts.map((part)=>({\n                            partNumber: part.partNumber,\n                            uploadUrl: part.signedUrl\n                        }))\n                }\n            };\n        },\n        completeMultipartUpload: async ({ uploadId, key, parts })=>{\n            return await edgeStoreSdk.completeMultipartUpload({\n                uploadId,\n                key,\n                parts\n            });\n        },\n        confirmUpload: async ({ url })=>{\n            return await edgeStoreSdk.confirmUpload({\n                url\n            });\n        },\n        deleteFile: async ({ url })=>{\n            return await edgeStoreSdk.deleteFile({\n                url\n            });\n        }\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@edgestore/server/dist/providers/edgestore/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@edgestore/server/dist/shared-039276af.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@edgestore/server/dist/shared-039276af.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ requestUploadParts),\n/* harmony export */   b: () => (/* binding */ buildPath),\n/* harmony export */   c: () => (/* binding */ completeMultipartUpload),\n/* harmony export */   d: () => (/* binding */ confirmUpload),\n/* harmony export */   e: () => (/* binding */ deleteFile),\n/* harmony export */   i: () => (/* binding */ init),\n/* harmony export */   p: () => (/* binding */ parsePath),\n/* harmony export */   r: () => (/* binding */ requestUpload)\n/* harmony export */ });\n/* harmony import */ var _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @edgestore/shared */ \"(rsc)/./node_modules/@edgestore/shared/dist/index.mjs\");\n/* harmony import */ var _panva_hkdf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @panva/hkdf */ \"(rsc)/./node_modules/@panva/hkdf/dist/node/esm/index.js\");\n/* harmony import */ var cookie__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cookie */ \"(rsc)/./node_modules/cookie/index.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/node/esm/jwt/encrypt.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/node/esm/jwt/decrypt.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/@edgestore/server/node_modules/uuid/dist/esm-node/v4.js\");\n\n\n\n\n\nconst IMAGE_MIME_TYPES = [\n    \"image/jpeg\",\n    \"image/png\",\n    \"image/gif\",\n    \"image/webp\",\n    \"image/svg+xml\",\n    \"image/tiff\",\n    \"image/bmp\",\n    \"image/x-icon\"\n];\n// TODO: change it to 1 hour when we have a way to refresh the token\nconst DEFAULT_MAX_AGE = 30 * 24 * 60 * 60; // 30 days\nasync function init(params) {\n    const log = globalThis._EDGE_STORE_LOGGER;\n    const { ctx, provider, router } = params;\n    log.debug(\"Running [init]\", {\n        ctx\n    });\n    const ctxToken = await encryptJWT(ctx);\n    const { token } = await provider.init({\n        ctx,\n        router: router\n    });\n    const newCookies = [\n        (0,cookie__WEBPACK_IMPORTED_MODULE_1__.serialize)(\"edgestore-ctx\", ctxToken, {\n            path: \"/\",\n            maxAge: DEFAULT_MAX_AGE\n        })\n    ];\n    if (token) {\n        newCookies.push((0,cookie__WEBPACK_IMPORTED_MODULE_1__.serialize)(\"edgestore-token\", token, {\n            path: \"/\",\n            maxAge: DEFAULT_MAX_AGE\n        }));\n    }\n    const baseUrl = await provider.getBaseUrl();\n    log.debug(\"Finished [init]\", {\n        ctx,\n        newCookies,\n        token,\n        baseUrl\n    });\n    return {\n        newCookies,\n        token,\n        baseUrl\n    };\n}\nasync function requestUpload(params) {\n    const { provider, router, ctxToken, body: { bucketName, input, fileInfo } } = params;\n    const log = globalThis._EDGE_STORE_LOGGER;\n    log.debug(\"Running [requestUpload]\", {\n        bucketName,\n        input,\n        fileInfo\n    });\n    if (!ctxToken) {\n        throw new _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.EdgeStoreError({\n            message: \"Missing edgestore-ctx cookie\",\n            code: \"UNAUTHORIZED\"\n        });\n    }\n    const ctx = await getContext(ctxToken);\n    log.debug(\"Decrypted Context\", {\n        ctx\n    });\n    const bucket = router.buckets[bucketName];\n    if (!bucket) {\n        throw new _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.EdgeStoreError({\n            message: `Bucket ${bucketName} not found`,\n            code: \"BAD_REQUEST\"\n        });\n    }\n    if (bucket._def.beforeUpload) {\n        log.debug(\"Running [beforeUpload]\");\n        const canUpload = await bucket._def.beforeUpload?.({\n            ctx,\n            input,\n            fileInfo: {\n                size: fileInfo.size,\n                type: fileInfo.type,\n                fileName: fileInfo.fileName,\n                extension: fileInfo.extension,\n                replaceTargetUrl: fileInfo.replaceTargetUrl,\n                temporary: fileInfo.temporary\n            }\n        });\n        log.debug(\"Finished [beforeUpload]\", {\n            canUpload\n        });\n        if (!canUpload) {\n            throw new _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.EdgeStoreError({\n                message: \"Upload not allowed for the current context\",\n                code: \"UPLOAD_NOT_ALLOWED\"\n            });\n        }\n    }\n    if (bucket._def.type === \"IMAGE\") {\n        if (!IMAGE_MIME_TYPES.includes(fileInfo.type)) {\n            throw new _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.EdgeStoreError({\n                code: \"MIME_TYPE_NOT_ALLOWED\",\n                message: \"Only images are allowed in this bucket\",\n                details: {\n                    allowedMimeTypes: IMAGE_MIME_TYPES,\n                    mimeType: fileInfo.type\n                }\n            });\n        }\n    }\n    if (bucket._def.bucketConfig?.maxSize) {\n        if (fileInfo.size > bucket._def.bucketConfig.maxSize) {\n            throw new _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.EdgeStoreError({\n                code: \"FILE_TOO_LARGE\",\n                message: `File size is too big. Max size is ${bucket._def.bucketConfig.maxSize}`,\n                details: {\n                    maxFileSize: bucket._def.bucketConfig.maxSize,\n                    fileSize: fileInfo.size\n                }\n            });\n        }\n    }\n    if (bucket._def.bucketConfig?.accept) {\n        const accept = bucket._def.bucketConfig.accept;\n        let accepted = false;\n        for (const acceptedMimeType of accept){\n            if (acceptedMimeType.endsWith(\"/*\")) {\n                const mimeType = acceptedMimeType.replace(\"/*\", \"\");\n                if (fileInfo.type.startsWith(mimeType)) {\n                    accepted = true;\n                    break;\n                }\n            } else if (fileInfo.type === acceptedMimeType) {\n                accepted = true;\n                break;\n            }\n        }\n        if (!accepted) {\n            throw new _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.EdgeStoreError({\n                code: \"MIME_TYPE_NOT_ALLOWED\",\n                message: `\"${fileInfo.type}\" is not allowed. Accepted types are ${JSON.stringify(accept)}`,\n                details: {\n                    allowedMimeTypes: accept,\n                    mimeType: fileInfo.type\n                }\n            });\n        }\n    }\n    const path = buildPath({\n        fileInfo,\n        bucket,\n        pathAttrs: {\n            ctx,\n            input\n        }\n    });\n    const metadata = await bucket._def.metadata?.({\n        ctx,\n        input\n    });\n    const isPublic = bucket._def.accessControl === undefined;\n    log.debug(\"upload info\", {\n        path,\n        metadata,\n        isPublic,\n        bucketType: bucket._def.type\n    });\n    const requestUploadRes = await provider.requestUpload({\n        bucketName,\n        bucketType: bucket._def.type,\n        fileInfo: {\n            ...fileInfo,\n            path,\n            isPublic,\n            metadata\n        }\n    });\n    const { parsedPath, pathOrder } = parsePath(path);\n    log.debug(\"Finished [requestUpload]\");\n    return {\n        ...requestUploadRes,\n        size: fileInfo.size,\n        uploadedAt: new Date().toISOString(),\n        path: parsedPath,\n        pathOrder,\n        metadata\n    };\n}\nasync function requestUploadParts(params) {\n    const { provider, ctxToken, body: { multipart, path } } = params;\n    const log = globalThis._EDGE_STORE_LOGGER;\n    log.debug(\"Running [requestUploadParts]\", {\n        multipart,\n        path\n    });\n    if (!ctxToken) {\n        throw new _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.EdgeStoreError({\n            message: \"Missing edgestore-ctx cookie\",\n            code: \"UNAUTHORIZED\"\n        });\n    }\n    await getContext(ctxToken); // just to check if the token is valid\n    const res = await provider.requestUploadParts({\n        multipart,\n        path\n    });\n    log.debug(\"Finished [requestUploadParts]\");\n    return res;\n}\nasync function completeMultipartUpload(params) {\n    const { provider, router, ctxToken, body: { bucketName, uploadId, key, parts } } = params;\n    const log = globalThis._EDGE_STORE_LOGGER;\n    log.debug(\"Running [completeMultipartUpload]\", {\n        bucketName,\n        uploadId,\n        key\n    });\n    if (!ctxToken) {\n        throw new _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.EdgeStoreError({\n            message: \"Missing edgestore-ctx cookie\",\n            code: \"UNAUTHORIZED\"\n        });\n    }\n    await getContext(ctxToken); // just to check if the token is valid\n    const bucket = router.buckets[bucketName];\n    if (!bucket) {\n        throw new _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.EdgeStoreError({\n            message: `Bucket ${bucketName} not found`,\n            code: \"BAD_REQUEST\"\n        });\n    }\n    const res = await provider.completeMultipartUpload({\n        uploadId,\n        key,\n        parts\n    });\n    log.debug(\"Finished [completeMultipartUpload]\");\n    return res;\n}\nasync function confirmUpload(params) {\n    const { provider, router, ctxToken, body: { bucketName, url } } = params;\n    const log = globalThis._EDGE_STORE_LOGGER;\n    log.debug(\"Running [confirmUpload]\", {\n        bucketName,\n        url\n    });\n    if (!ctxToken) {\n        throw new _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.EdgeStoreError({\n            message: \"Missing edgestore-ctx cookie\",\n            code: \"UNAUTHORIZED\"\n        });\n    }\n    await getContext(ctxToken); // just to check if the token is valid\n    const bucket = router.buckets[bucketName];\n    if (!bucket) {\n        throw new _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.EdgeStoreError({\n            message: `Bucket ${bucketName} not found`,\n            code: \"BAD_REQUEST\"\n        });\n    }\n    const res = await provider.confirmUpload({\n        bucket,\n        url: unproxyUrl(url)\n    });\n    log.debug(\"Finished [confirmUpload]\");\n    return res;\n}\nasync function deleteFile(params) {\n    const { provider, router, ctxToken, body: { bucketName, url } } = params;\n    const log = globalThis._EDGE_STORE_LOGGER;\n    log.debug(\"Running [deleteFile]\", {\n        bucketName,\n        url\n    });\n    if (!ctxToken) {\n        throw new _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.EdgeStoreError({\n            message: \"Missing edgestore-ctx cookie\",\n            code: \"UNAUTHORIZED\"\n        });\n    }\n    const ctx = await getContext(ctxToken);\n    const bucket = router.buckets[bucketName];\n    if (!bucket) {\n        throw new _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.EdgeStoreError({\n            message: `Bucket ${bucketName} not found`,\n            code: \"BAD_REQUEST\"\n        });\n    }\n    if (!bucket._def.beforeDelete) {\n        throw new _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.EdgeStoreError({\n            message: \"You need to define beforeDelete if you want to delete files directly from the frontend.\",\n            code: \"SERVER_ERROR\"\n        });\n    }\n    const fileInfo = await provider.getFile({\n        url: unproxyUrl(url)\n    });\n    const canDelete = await bucket._def.beforeDelete({\n        ctx,\n        fileInfo\n    });\n    if (!canDelete) {\n        throw new _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.EdgeStoreError({\n            message: \"Delete not allowed for the current context\",\n            code: \"DELETE_NOT_ALLOWED\"\n        });\n    }\n    const res = await provider.deleteFile({\n        bucket,\n        url: unproxyUrl(url)\n    });\n    log.debug(\"Finished [deleteFile]\");\n    return res;\n}\nasync function encryptJWT(ctx) {\n    const secret = process.env.EDGE_STORE_JWT_SECRET ?? process.env.EDGE_STORE_SECRET_KEY;\n    if (!secret) {\n        throw new _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.EdgeStoreError({\n            message: \"EDGE_STORE_JWT_SECRET or EDGE_STORE_SECRET_KEY is not defined\",\n            code: \"SERVER_ERROR\"\n        });\n    }\n    const encryptionSecret = await getDerivedEncryptionKey(secret);\n    return await new jose__WEBPACK_IMPORTED_MODULE_2__.EncryptJWT(ctx).setProtectedHeader({\n        alg: \"dir\",\n        enc: \"A256GCM\"\n    }).setIssuedAt().setExpirationTime(Date.now() / 1000 + DEFAULT_MAX_AGE).setJti((0,uuid__WEBPACK_IMPORTED_MODULE_3__[\"default\"])()).encrypt(encryptionSecret);\n}\nasync function decryptJWT(token) {\n    const secret = process.env.EDGE_STORE_JWT_SECRET ?? process.env.EDGE_STORE_SECRET_KEY;\n    if (!secret) {\n        throw new _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.EdgeStoreError({\n            message: \"EDGE_STORE_JWT_SECRET or EDGE_STORE_SECRET_KEY is not defined\",\n            code: \"SERVER_ERROR\"\n        });\n    }\n    const encryptionSecret = await getDerivedEncryptionKey(secret);\n    const { payload } = await (0,jose__WEBPACK_IMPORTED_MODULE_4__.jwtDecrypt)(token, encryptionSecret, {\n        clockTolerance: 15\n    });\n    return payload;\n}\nasync function getDerivedEncryptionKey(secret) {\n    return await (0,_panva_hkdf__WEBPACK_IMPORTED_MODULE_5__.hkdf)(\"sha256\", secret, \"\", \"Edge Store Generated Encryption Key\", 32);\n}\nfunction buildPath(params) {\n    const { bucket } = params;\n    const pathParams = bucket._def.path;\n    const path = pathParams.map((param)=>{\n        const paramEntries = Object.entries(param);\n        if (paramEntries[0] === undefined) {\n            throw new _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.EdgeStoreError({\n                message: `Empty path param found in: ${JSON.stringify(pathParams)}`,\n                code: \"SERVER_ERROR\"\n            });\n        }\n        const [key, value] = paramEntries[0];\n        // this is a string like: \"ctx.xxx\" or \"input.yyy.zzz\"\n        const currParamVal = value().split(\".\").reduce((acc2, key)=>{\n            if (acc2[key] === undefined) {\n                throw new _edgestore_shared__WEBPACK_IMPORTED_MODULE_0__.EdgeStoreError({\n                    message: `Missing key ${key} in ${JSON.stringify(acc2)}`,\n                    code: \"BAD_REQUEST\"\n                });\n            }\n            return acc2[key];\n        }, params.pathAttrs);\n        return {\n            key,\n            value: currParamVal\n        };\n    });\n    return path;\n}\nfunction parsePath(path) {\n    const parsedPath = path.reduce((acc, curr)=>{\n        acc[curr.key] = curr.value;\n        return acc;\n    }, {});\n    const pathOrder = path.map((p)=>p.key);\n    return {\n        parsedPath,\n        pathOrder\n    };\n}\nasync function getContext(token) {\n    return await decryptJWT(token);\n}\n/**\n * On local development, protected files are proxied to the server,\n * which changes the original URL.\n *\n * This function is used to get the original URL,\n * so that we can delete or confirm the upload.\n */ function unproxyUrl(url) {\n    if ( true && url.startsWith(\"http://\")) {\n        // get the url param from the query string\n        const urlParam = new URL(url).searchParams.get(\"url\");\n        if (urlParam) {\n            return urlParam;\n        }\n    }\n    return url;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@edgestore/server/dist/shared-039276af.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@edgestore/shared/dist/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@edgestore/shared/dist/index.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EDGE_STORE_ERROR_CODES: () => (/* binding */ EDGE_STORE_ERROR_CODES),\n/* harmony export */   EdgeStoreApiClientError: () => (/* binding */ EdgeStoreApiClientError),\n/* harmony export */   EdgeStoreError: () => (/* binding */ EdgeStoreError),\n/* harmony export */   initEdgeStore: () => (/* binding */ initEdgeStore)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n\nfunction _define_property$1(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n/* eslint-disable @typescript-eslint/no-non-null-assertion */ const EDGE_STORE_ERROR_CODES = {\n    BAD_REQUEST: 400,\n    FILE_TOO_LARGE: 400,\n    MIME_TYPE_NOT_ALLOWED: 400,\n    UNAUTHORIZED: 401,\n    UPLOAD_NOT_ALLOWED: 403,\n    DELETE_NOT_ALLOWED: 403,\n    CREATE_CONTEXT_ERROR: 500,\n    SERVER_ERROR: 500\n};\nclass EdgeStoreError extends Error {\n    formattedMessage() {\n        return `${this.message}${this.details ? `\\n    Details: ${JSON.stringify(this.details)}` : \"\"}${this.cause ? `\\n    Caused by: ${this.cause.message}` : \"\"}`;\n    }\n    formattedJson() {\n        return {\n            message: this.code === \"SERVER_ERROR\" ? \"Internal server error\" : this.message,\n            code: this.code,\n            details: this.details\n        };\n    }\n    constructor(opts){\n        super(opts.message);\n        _define_property$1(this, \"cause\", void 0);\n        _define_property$1(this, \"code\", void 0);\n        _define_property$1(this, \"level\", void 0);\n        _define_property$1(this, \"details\", void 0);\n        this.name = \"EdgeStoreError\";\n        this.code = opts.code;\n        this.cause = opts.cause;\n        this.level = EDGE_STORE_ERROR_CODES[opts.code] >= 500 ? \"error\" : \"warn\";\n        this.details = \"details\" in opts ? opts.details : undefined;\n    }\n}\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass EdgeStoreApiClientError extends Error {\n    constructor(opts){\n        super(opts.response.message);\n        _define_property(this, \"data\", void 0);\n        this.name = \"EdgeStoreApiClientError\";\n        this.data = opts.response;\n    }\n}\n/**\n * Creates a Proxy that prints the path to the property when called.\n *\n * Example:\n *\n * ```ts\n * const pathParamProxy = createPathParamProxy();\n * console.log(pathParamProxy.ctx.user.id());\n * // Logs: \"ctx.user.id\"\n * console.log(pathParamProxy.input.type());\n * // Logs: \"input.type\"\n * ```\n */ function createPathParamProxy() {\n    const getPath = (target, _prop)=>{\n        const proxyFunction = ()=>target;\n        return new Proxy(proxyFunction, {\n            get: (_target, propChild)=>{\n                return getPath(`${target}.${String(propChild)}`);\n            }\n        });\n    };\n    return new Proxy(()=>\"\", {\n        get: (_target, prop)=>{\n            return getPath(String(prop));\n        }\n    });\n}\nconst createNewBuilder = (initDef, newDef)=>{\n    const mergedDef = {\n        ...initDef,\n        ...newDef\n    };\n    return createBuilder({\n        type: mergedDef.type\n    }, mergedDef);\n};\nfunction createBuilder(opts, initDef) {\n    const _def = {\n        type: opts.type,\n        input: zod__WEBPACK_IMPORTED_MODULE_0__.z.never(),\n        path: [],\n        metadata: ()=>({}),\n        ...initDef\n    };\n    return {\n        $config: {\n            ctx: undefined\n        },\n        // @ts-expect-error - I think it would be too much work to make this type correct.\n        _def,\n        input (input) {\n            return createNewBuilder(_def, {\n                input\n            });\n        },\n        path (pathResolver) {\n            // TODO: Should throw a runtime error in the following cases:\n            // 1. in case of multiple keys in one object\n            // 2. in case of duplicate keys\n            const pathParamProxy = createPathParamProxy();\n            const params = pathResolver(pathParamProxy);\n            return createNewBuilder(_def, {\n                path: params\n            });\n        },\n        metadata (metadata) {\n            return createNewBuilder(_def, {\n                metadata\n            });\n        },\n        accessControl (accessControl) {\n            return createNewBuilder(_def, {\n                accessControl: accessControl\n            });\n        },\n        beforeUpload (beforeUpload) {\n            return createNewBuilder(_def, {\n                beforeUpload\n            });\n        },\n        beforeDelete (beforeDelete) {\n            return createNewBuilder(_def, {\n                beforeDelete\n            });\n        }\n    };\n}\nclass EdgeStoreBuilder {\n    context() {\n        return new EdgeStoreBuilder();\n    }\n    create() {\n        return createEdgeStoreInner()();\n    }\n}\nfunction createRouterFactory() {\n    return function createRouterInner(buckets) {\n        return {\n            $config: {\n                ctx: undefined\n            },\n            buckets\n        };\n    };\n}\nfunction initBucket(type, config) {\n    return createBuilder({\n        type\n    }, {\n        bucketConfig: config\n    });\n}\nfunction createEdgeStoreInner() {\n    return function initEdgeStoreInner() {\n        return {\n            /**\n       * Builder object for creating an image bucket\n       */ imageBucket (config) {\n                return initBucket(\"IMAGE\", config);\n            },\n            /**\n       * Builder object for creating a file bucket\n       */ fileBucket (config) {\n                return initBucket(\"FILE\", config);\n            },\n            /**\n       * Create a router\n       */ router: createRouterFactory()\n        };\n    };\n}\n/**\n * Initialize EdgeStore - be done exactly once per backend\n */ const initEdgeStore = new EdgeStoreBuilder(); // ↓↓↓ TYPE TESTS ↓↓↓\n// type Context = {\n//   userId: string;\n//   userRole: 'admin' | 'visitor';\n// };\n// const es = initEdgeStore.context<Context>().create();\n// const imagesBucket = es.imageBucket()\n//   .input(\n//     z.object({\n//       type: z.enum(['profile', 'post']),\n//       extension: z.string().optional(),\n//     }),\n//   )\n//   .path(({ ctx, input }) => [{ author: ctx.userId }, { type: input.type }])\n//   .metadata(({ ctx, input }) => ({\n//     extension: input.extension,\n//     role: ctx.userRole,\n//   }))\n//   .beforeUpload(() => {\n//     return true;\n//   });\n// const a = es.imageBucket()\n//   .input(z.object({ type: z.string(), someMeta: z.string().optional() }))\n//   .path(({ ctx, input }) => [{ author: ctx.userId }, { type: input.type }])\n//   .metadata(({ ctx, input }) => ({\n//     role: ctx.userRole,\n//     someMeta: input.someMeta,\n//   }))\n//   .accessControl({\n//     OR: [\n//       {\n//         userId: { path: 'author' }, // this will check if the userId is the same as the author in the path parameter\n//       },\n//       {\n//         userRole: 'admin', // this is the same as { userRole: { eq: \"admin\" } }\n//       },\n//     ],\n//   })\n//   .beforeUpload(({ ctx, input }) => {\n//     return true;\n//   })\n//   .beforeDelete(({ ctx, file }) => {\n//     return true;\n//   });\n// const b = es.imageBucket().path(({ ctx }) => [{ author: ctx.userId }]);\n// const router = es.router({\n//   original: imagesBucket,\n//   imageBucket: a,\n//   imageBucket2: b,\n// });\n// export { router };\n// type ListFilesResponse<TBucket extends AnyRouter['buckets'][string]> = {\n//   data: {\n//     // url: string;\n//     // size: number;\n//     // uploadedAt: Date;\n//     // metadata: InferMetadataObject<TBucket>;\n//     path: InferBucketPathKeys<TBucket> extends string ? {\n//       [key: string]: string;\n//     } :{\n//       [TKey in InferBucketPathKeys<TBucket>]: string;\n//     };\n//   }[];\n//   pagination: {\n//     currentPage: number;\n//     totalPages: number;\n//     totalCount: number;\n//   };\n// };\n// type TPathKeys = 'author' | 'type';\n// type TPathKeys2 = InferBucketPathKeys<AnyBuilder>;\n// type ObjectWithKeys<TKeys extends string> = {\n//   [TKey in TKeys]: string;\n// };\n// type Test1 = ObjectWithKeys<TPathKeys>;\n// type Test2 = ObjectWithKeys<TPathKeys2>;\n// type PathKeys = InferBucketPathKeys<typeof router.buckets.imageBucket>;\n// type MetadataKeys = InferMetadataObject<typeof router.buckets.imageBucket>;\n// type MyEdgeStoreRouter = typeof router;\n// type MyAccessControl = AccessControlSchema<Context, AnyDef>;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@edgestore/shared/dist/index.mjs\n");

/***/ })

};
;